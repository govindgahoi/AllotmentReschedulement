using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using BEL_Allotment;

namespace DLL_Allotment
{
    public class BooksDetails_DAL
    {
        
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["conStr"].ConnectionString);

        #region LandAcquisition
        public DataSet GetCourtType()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetCourtType", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCaseType()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetCaseType", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetLandADetailwithParameter(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetLandAcquisitionDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistrictID", objBEL.District);
                //cmd.Parameters.AddWithValue("@TehsilID", objBEL.SubDistrict);
                //cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetDistrictRecords()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spDistrict", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #region Delete Records
        public DataSet LANotificationDeleteDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LANotificationDeleteDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ResumptionOrderID", objBEL.ResumptionOrderID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LAPossessionDeleteDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAPossessionDeleteDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PossessionID", objBEL.ResumptionOrderID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet LAAwardDeleteDetails_sp(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAAwardDeleteDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AwardID", objBEL.AwardID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet LAConveyenceDeedsDeleteDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAConveyenceDeedsDeleteDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ConveyenceID", objBEL.ConveyenceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet LAPaymentDeleteDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAPaymentDeleteDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LAPaymentID", objBEL.LAPaymentID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LACompansationDeleteDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LACompansationDeleteDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistbursementID", objBEL.DistbursementID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LALitigationDeleteDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LALitigationDeleteDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LitigationID", objBEL.LitigationID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion



        #region InsertRecords
        public DataSet NewRegistrationLandAcquispitionDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[NewLandAcquisitionRegistrationAllottee_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@DistirctID", objBEL.Distict);
                cmd.Parameters.AddWithValue("@TehsilID", objBEL.SubDistict);
                cmd.Parameters.AddWithValue("@Pargana", objBEL.Village);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAId);
                cmd.Parameters.AddWithValue("@PrivateLandArea", objBEL.PrivateLand);
                cmd.Parameters.AddWithValue("@GSLandArea", objBEL.GSLand);
                cmd.Parameters.AddWithValue("@CeilingLandArea", objBEL.CeilingLand);
                cmd.Parameters.AddWithValue("@ForestLand", objBEL.ForestLand);
                cmd.Parameters.AddWithValue("@OtherArea", objBEL.OtherArea);
                cmd.Parameters.AddWithValue("@NoofTubewells", objBEL.NoofTubewells);
                cmd.Parameters.AddWithValue("@NoofPuccaBuildings", objBEL.NoofPuccaBuildings);
                cmd.Parameters.AddWithValue("@NoofPuccaDrains", objBEL.NoofPuccaDrains);
                cmd.Parameters.AddWithValue("@Areaofgrovaslands", objBEL.Areaofgroveslands);
                cmd.Parameters.AddWithValue("@NoofWorshipplaces", objBEL.NosofWorshipPlaces);
                cmd.Parameters.AddWithValue("@NoofTrees", objBEL.NosofTrees);
                cmd.Parameters.AddWithValue("@Others", objBEL.Other);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Newstatus", objBEL.Newstatus);
                cmd.Parameters.AddWithValue("@PublicUtility", objBEL.PublicUtility);
                cmd.Parameters.AddWithValue("@GeneralLand", objBEL.GeneralLand);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet LANotificationDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LANotificationDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@ResumptionOrderID", objBEL.ResumptionOrderID);
                cmd.Parameters.AddWithValue("@NameofVillage", objBEL.VillageID);
                cmd.Parameters.AddWithValue("@TypeofLand", objBEL.TypeofLand);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.Area);
                cmd.Parameters.AddWithValue("@NoofProposals", objBEL.NoofProposals);
                cmd.Parameters.AddWithValue("@DateofProposals", objBEL.DateofProposals);
                cmd.Parameters.AddWithValue("@US", objBEL.us);
                cmd.Parameters.AddWithValue("@ResumptionNumber", objBEL.NotificationNo);
                cmd.Parameters.AddWithValue("@ResumptionDate", objBEL.NotificationDate);
                cmd.Parameters.AddWithValue("@ResumptionArea", objBEL.NotificationArea);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LAPossessionDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAPossessionDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@PossessionID", objBEL.ResumptionOrderID);
                cmd.Parameters.AddWithValue("@VillageName", objBEL.PossessionVillage);
                cmd.Parameters.AddWithValue("@PossessionDate", objBEL.PossessionDate);
                cmd.Parameters.AddWithValue("@PossessionArea", objBEL.PossessionArea);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LAAwardsDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAAwardsDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@AwardsID", objBEL.AwardID);
                cmd.Parameters.AddWithValue("@VillageName", objBEL.AwardsVillageID);
                cmd.Parameters.AddWithValue("@AwardsArea", objBEL.AwardedArea);
                cmd.Parameters.AddWithValue("@AwardsDate", objBEL.DateofAwards);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@AwardedAmount", objBEL.AwardedAmount);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LAConveyenceDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAConveyenceDeedsDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@ConveyenceID", objBEL.ConveyenceID);
                cmd.Parameters.AddWithValue("@VillageName", objBEL.ConveyenceDeedVillageID);
                cmd.Parameters.AddWithValue("@Area", objBEL.ConveyenceArea);
                cmd.Parameters.AddWithValue("@Execution", objBEL.Execution);
                cmd.Parameters.AddWithValue("@Registration", objBEL.Registration);
                cmd.Parameters.AddWithValue("@Mutation", objBEL.Mutation);
                cmd.Parameters.AddWithValue("@Initial", objBEL.Initial);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.ConRemarks);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LAPaymentDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LAPaymentDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@LAPaymentID", objBEL.ConveyenceID);
                cmd.Parameters.AddWithValue("@VillageName", objBEL.Village);
                cmd.Parameters.AddWithValue("@Details", objBEL.Details);
                cmd.Parameters.AddWithValue("@DraftNo", objBEL.DraftNo);
                cmd.Parameters.AddWithValue("@DraftDate", objBEL.DraftDate);
                cmd.Parameters.AddWithValue("@DraftAmount", objBEL.PaymentTotalAmount);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet LACompansationDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LACompansationDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@DistbursementID", objBEL.CompansationID);
                cmd.Parameters.AddWithValue("@VillageName", objBEL.CompansationVillageID);
                cmd.Parameters.AddWithValue("@DistbursementAmount", objBEL.CompansationAmount);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet LALitigationDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LALitigationDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.Parameters.AddWithValue("@LitigationID", objBEL.LitigationID);
                cmd.Parameters.AddWithValue("@CaseName", objBEL.CaseName);
                cmd.Parameters.AddWithValue("@CaseType", objBEL.caseType);
                cmd.Parameters.AddWithValue("@CourtType", objBEL.CourtType);
                cmd.Parameters.AddWithValue("@Lawyer", objBEL.Lawyer);
                cmd.Parameters.AddWithValue("@PartyName", objBEL.PartyName);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        #endregion 

        #region BindGrid
        public DataSet GetLandAcuisitionDetailsFilledById(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAllLandAcuisitionDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandIDs);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetIANameNameRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetIANameNameDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistrictID", objBEL.District);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPossessionDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetPossessionDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PossessionID", objBEL.PossessionID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPossessionGridDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetPossessionDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetNotificationDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetNotificationDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ResumptionOrderID", objBEL.ResumptionOrderID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetNotificationGridDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetNotificationGridDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAwardDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAwardDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AwardID", objBEL.AwardID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAwardGridDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAwardDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetConveyenceDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetConveyenceDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ConveyenceID", objBEL.ConveyenceID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetConveyenceGridDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetConveyenceDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetPaymentDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetPaymentDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PaymentID", objBEL.PaymentsID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPaymentGridDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetPaymentDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCompansationDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetCompansationDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistbursementID", objBEL.CompansationID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCompansationGridDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetCompansationDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetLitigationDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetLitigationDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LitigationID", objBEL.LitigationID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetLitigationGridDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetLitigationDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandID", objBEL.LandID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        #endregion

        #region "Algamation Post Allotment"

        public DataSet SetServiceRequestIAServiceInHouse(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestForIAServicesInHouse_SP]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GSTNo);



                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfAmalgamationPostAllotment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForAmalgamationPostAllotment]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;//GetApplicationOfLidaAllotment
        }

        //--------Test--------
        public DataSet GetApplicationOfLidaAllotment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForAmalgamationPostAllotment]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;//GetApplicationOfLidaAllotment
        }

        public DataSet GetApplicationOfAmalgamationPostAllotmentUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForAmalgamationPostAllotmentUnderProcess]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfAmalgamationPostAllotmentCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForAmalgamationPostAllotmentApproved]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 ClearPreviousSubdividedPlotDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_clearPreviusSubdividedPlots", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveSubdividedPlots(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertAllotteeSubdividedlots]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertAmalgamationDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertAmalgmationDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@PlotArea", objBEL.AmalgamatedArea);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetPlotAdjacencyDetailsPostAmalgamation(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetPloAdjacencyDetailsPostAmalgmation]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAIdParam);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetPlotsForAmalgamationPostAllotment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetPlotForAmalgamationPost", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        //public DataSet GetPlotsForAmalgamationPostAllotment(belBookDetails objBEL)
        //{
        //    DataSet ds = new DataSet();
        //    try
        //    {
        //        SqlCommand cmd = new SqlCommand("GetApplicationForSubDivisionPostAllotmentApproved", con);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
        //        SqlDataAdapter adp = new SqlDataAdapter(cmd);
        //        adp.Fill(ds);
        //        cmd.Dispose();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        ds.Dispose();
        //    }
        //    return ds;
        //}

        #endregion

        #region "Logistic & Warehousing"

        public Int32 SaveCommentsDescriptionLAW(belBookDetails objBEL)
        {

            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateCommentsDescriptionLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LAWID", objBEL.LAWID);
                cmd.Parameters.AddWithValue("@ClauseasperPolicy", objBEL.ClauseasperPolicy);
                cmd.Parameters.AddWithValue("@Description", objBEL.Description);
                cmd.Parameters.AddWithValue("@Clausedescription", objBEL.Clausedescription);
                cmd.Parameters.AddWithValue("@IncentivesSeekaspertheproposal", objBEL.IncentivesSeekaspertheproposal);
                cmd.Parameters.AddWithValue("@BenefitEligibility", objBEL.BenefitEligibility);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveCommentsDescriptionPIP(belBookDetails objBEL)
        {

            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateCommentsDescriptionPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LAWID", objBEL.LAWID);
                cmd.Parameters.AddWithValue("@ClauseasperPolicy", objBEL.ClauseasperPolicy);
                cmd.Parameters.AddWithValue("@Description", objBEL.Description);
                cmd.Parameters.AddWithValue("@Clausedescription", objBEL.Clausedescription);
                cmd.Parameters.AddWithValue("@IncentivesSeekaspertheproposal", objBEL.IncentivesSeekaspertheproposal);
                cmd.Parameters.AddWithValue("@BenefitEligibility", objBEL.BenefitEligibility);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 ClearCommentsDescriptionLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearCommentDescriptionLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LAWID", objBEL.LAWID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 ClearCommentsDescriptionPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearCommentDescriptionPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LAWID", objBEL.LAWID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateEvaluationDetailsLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InserUpdateEvaluationDetailsLAW_sp1]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.VerifiedArea);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.VerifiedCoveredArea);
                cmd.Parameters.AddWithValue("@Compliance323", objBEL.Compliance3_2_3);
                cmd.Parameters.AddWithValue("@Comment323", objBEL.Commment3_2_3);
                cmd.Parameters.AddWithValue("@Investment_Land", objBEL.Investment_Land);
                cmd.Parameters.AddWithValue("@Investment_BuildingWorks", objBEL.Investment_BuildingWorks);
                cmd.Parameters.AddWithValue("@Investment_Infrastructure", objBEL.Investment_Infrastructure);
                cmd.Parameters.AddWithValue("@Investment_OtherFacilities", objBEL.Investment_OtherFacilities);
                cmd.Parameters.AddWithValue("@Investment_Compliance", objBEL.Investment_Compliance);
                cmd.Parameters.AddWithValue("@ApplicantName", objBEL.ApplicantNameVerified);
                cmd.Parameters.AddWithValue("@ApplicantName_Remarks", objBEL.ApplicantName_Remarks);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyNameVerified);
                cmd.Parameters.AddWithValue("@CompanyAddress", objBEL.CompanyAddressVerified);
                cmd.Parameters.AddWithValue("@AuthorisedUser", objBEL.AuthorisedUserVerified);
                cmd.Parameters.AddWithValue("@AuthorisedUserAddress", objBEL.AuthorisedUserAddressVerified);
                cmd.Parameters.AddWithValue("@Address_Remarks", objBEL.Address_Remarks);
                cmd.Parameters.AddWithValue("@CompanyConstitution", objBEL.CompanyConstitutionVerified);
                cmd.Parameters.AddWithValue("@CompanyConstitution_Remarks", objBEL.CompanyConstitution_Remarks);
                cmd.Parameters.AddWithValue("@ProjectLocation", objBEL.ProjectLocationVerified);
                cmd.Parameters.AddWithValue("@ProjectLocationVerified", objBEL.ProjectLocationRemarks);
                cmd.Parameters.AddWithValue("@NamesofPromoters", objBEL.NamesofPromotersVerified);
                cmd.Parameters.AddWithValue("@NameofPromoters_Remarks", objBEL.NameofPromoters_Remarks);
                cmd.Parameters.AddWithValue("@GSTIN_Number", objBEL.GSTIN_NumberVerified);
                cmd.Parameters.AddWithValue("@GSTIN_Number_Remarks", objBEL.GSTIN_Number_Remarks);
                cmd.Parameters.AddWithValue("@Type_of_Project", objBEL.Type_of_ProjectVerified);
                cmd.Parameters.AddWithValue("@Type_of_Project_Remarks", objBEL.Type_of_Project_Remarks);
                cmd.Parameters.AddWithValue("@Category_of_project", objBEL.Category_of_projectVerified);
                cmd.Parameters.AddWithValue("@Category_of_project_Remarks", objBEL.Category_of_project_Remarks);
                cmd.Parameters.AddWithValue("@RegistrationPermit_for_setting_Logistic", objBEL.RegistrationPermit_for_setting_LogisticVerified);
                cmd.Parameters.AddWithValue("@RegistrationPermit_for_setting_Logistic_Remaks", objBEL.RegistrationPermit_for_setting_Logistic_Remarks);
                cmd.Parameters.AddWithValue("@Proposed_date_for_setting_up_logistic_unit", objBEL.Proposed_date_for_setting_up_logistic_unitVerified);
                cmd.Parameters.AddWithValue("@Proposed_date_for_setting_up_logistic_unit_Remarks", objBEL.Proposed_date_for_setting_up_logistic_unit_Remarks);
                cmd.Parameters.AddWithValue("@ProposedCapitalInvestment", objBEL.ProposedCapitalInvestmentVerified);
                cmd.Parameters.AddWithValue("@ProposedCapitalInvestment_Remarks", objBEL.ProposedCapitalInvestment_Remarks);
                cmd.Parameters.AddWithValue("@date_capital_investment_started", objBEL.date_capital_investment_startedVerified);
                cmd.Parameters.AddWithValue("@date_capital_investment_started_Remarks", objBEL.date_capital_investment_started_Remarks);
                cmd.Parameters.AddWithValue("@Total_Amount_by_Applicant", objBEL.Total_Amount_by_ApplicantVerified);
                cmd.Parameters.AddWithValue("@Total_Amount_by_Applicant_Remarks", objBEL.Total_Amount_by_Applicant_Remarks);
                cmd.Parameters.AddWithValue("@RebateonStampDuty", objBEL.RebateonStampDutyVerified);
                cmd.Parameters.AddWithValue("@RebateonStampDuty_Remarks", objBEL.RebateonStampDuty_Remarks);
                cmd.Parameters.AddWithValue("@EPFReimbursement", objBEL.EPFReimbursementVerified);
                cmd.Parameters.AddWithValue("@EPFReimbursement_Remarks", objBEL.EPFReimbursement_Remarks);
                cmd.Parameters.AddWithValue("@Additional_EPF_Reimbursement", objBEL.Additional_EPF_ReimbursementVerified);
                cmd.Parameters.AddWithValue("@Additional_EPF_Reimbursement_Remarks", objBEL.Additional_EPF_Reimbursement_Remarks);
                cmd.Parameters.AddWithValue("@Capital_Interest_Subsidy", objBEL.Capital_Interest_SubsidyVerified);
                cmd.Parameters.AddWithValue("@Capital_Interest_Subsidy_Remarks", objBEL.Capital_Interest_Subsidy_Remarks);
                cmd.Parameters.AddWithValue("@InfrastructureInterestSubsidy", objBEL.InfrastructureInterestSubsidyVerified);
                cmd.Parameters.AddWithValue("@InfrastructureInterestSubsidy_Remarks", objBEL.InfrastructureInterestSubsidy_Remarks);
                cmd.Parameters.AddWithValue("@RebateonLanduseconversioncharges", objBEL.RebateonLanduseconversionchargesVerified);
                cmd.Parameters.AddWithValue("@RebateonLanduseconversioncharges_Remarks", objBEL.RebateonLanduseconversioncharges_Remarks);
                cmd.Parameters.AddWithValue("@Exemptionfromdevelopmentcharges", objBEL.ExemptionfromdevelopmentchargesVerified);
                cmd.Parameters.AddWithValue("@Exemptionfromdevelopmentcharges_Remarks", objBEL.Exemptionfromdevelopmentcharges_Remarks);
                cmd.Parameters.AddWithValue("@ElectricityRebate", objBEL.ElectricityRebateVerified);
                cmd.Parameters.AddWithValue("@ElectricityRebate_Remarks", objBEL.ElectricityRebate_Remarks);
                cmd.Parameters.AddWithValue("@Warehousingqualitycertificationreimbursement", objBEL.WarehousingqualitycertificationreimbursementVerified);
                cmd.Parameters.AddWithValue("@Warehousingqualitycertificationreimbursement_remarks", objBEL.Warehousingqualitycertificationreimbursement_remarks);
                cmd.Parameters.AddWithValue("@monthassistanceforpayrollofdisabledworkers", objBEL.monthassistanceforpayrollofdisabledworkersVerified);
                cmd.Parameters.AddWithValue("@monthassistanceforpayrollofdisabledworkers_Remarks", objBEL.monthassistanceforpayrollofdisabledworkers_Remarks);
                cmd.Parameters.AddWithValue("@Skilldevelopmentpromotion", objBEL.SkilldevelopmentpromotionVerified);
                cmd.Parameters.AddWithValue("@Skilldevelopmentpromotion_Remarks", objBEL.Skilldevelopmentpromotion_Remarks);
                cmd.Parameters.AddWithValue("@IntelligentLogisticIncentives", objBEL.IntelligentLogisticIncentivesVerified);
                cmd.Parameters.AddWithValue("@IntelligentLogisticIncentives_Remarks", objBEL.IntelligentLogisticIncentives_Remarks);
                cmd.Parameters.AddWithValue("@Compliance_1", objBEL.Compliance_1);
                cmd.Parameters.AddWithValue("@Compliance_2", objBEL.Compliance_2);
                cmd.Parameters.AddWithValue("@Compliance_3", objBEL.Compliance_3);
                cmd.Parameters.AddWithValue("@Compliance_4", objBEL.Compliance_4);
                cmd.Parameters.AddWithValue("@Compliance_5", objBEL.Compliance_5);
                cmd.Parameters.AddWithValue("@Compliance_6", objBEL.Compliance_6);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateEvaluationDetailsPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InserUpdateEvaluationDetailsPIP_sp1]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.VerifiedArea);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.VerifiedCoveredArea);
                cmd.Parameters.AddWithValue("@Compliance323", objBEL.Compliance3_2_3);
                cmd.Parameters.AddWithValue("@Comment323", objBEL.Commment3_2_3);
                cmd.Parameters.AddWithValue("@Investment_Land", objBEL.Investment_Land);
                cmd.Parameters.AddWithValue("@Investment_BuildingWorks", objBEL.Investment_BuildingWorks);
                cmd.Parameters.AddWithValue("@Investment_Infrastructure", objBEL.Investment_Infrastructure);
                cmd.Parameters.AddWithValue("@Investment_OtherFacilities", objBEL.Investment_OtherFacilities);
                cmd.Parameters.AddWithValue("@Investment_Compliance", objBEL.Investment_Compliance);
                cmd.Parameters.AddWithValue("@ApplicantName", objBEL.ApplicantNameVerified);
                cmd.Parameters.AddWithValue("@ApplicantName_Remarks", objBEL.ApplicantName_Remarks);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyNameVerified);
                cmd.Parameters.AddWithValue("@CompanyAddress", objBEL.CompanyAddressVerified);
                cmd.Parameters.AddWithValue("@AuthorisedUser", objBEL.AuthorisedUserVerified);
                cmd.Parameters.AddWithValue("@AuthorisedUserAddress", objBEL.AuthorisedUserAddressVerified);
                cmd.Parameters.AddWithValue("@Address_Remarks", objBEL.Address_Remarks);
                cmd.Parameters.AddWithValue("@CompanyConstitution", objBEL.CompanyConstitutionVerified);
                cmd.Parameters.AddWithValue("@CompanyConstitution_Remarks", objBEL.CompanyConstitution_Remarks);
                cmd.Parameters.AddWithValue("@ProjectLocation", objBEL.ProjectLocationVerified);
                cmd.Parameters.AddWithValue("@ProjectLocationVerified", objBEL.ProjectLocationRemarks);
                cmd.Parameters.AddWithValue("@NamesofPromoters", objBEL.NamesofPromotersVerified);
                cmd.Parameters.AddWithValue("@NameofPromoters_Remarks", objBEL.NameofPromoters_Remarks);
                cmd.Parameters.AddWithValue("@GSTIN_Number", objBEL.GSTIN_NumberVerified);
                cmd.Parameters.AddWithValue("@GSTIN_Number_Remarks", objBEL.GSTIN_Number_Remarks);
                cmd.Parameters.AddWithValue("@Type_of_Project", objBEL.Type_of_ProjectVerified);
                cmd.Parameters.AddWithValue("@Type_of_Project_Remarks", objBEL.Type_of_Project_Remarks);
                cmd.Parameters.AddWithValue("@Category_of_project", objBEL.Category_of_projectVerified);
                cmd.Parameters.AddWithValue("@Category_of_project_Remarks", objBEL.Category_of_project_Remarks);
                cmd.Parameters.AddWithValue("@RegistrationPermit_for_setting_Logistic", objBEL.RegistrationPermit_for_setting_LogisticVerified);
                cmd.Parameters.AddWithValue("@RegistrationPermit_for_setting_Logistic_Remaks", objBEL.RegistrationPermit_for_setting_Logistic_Remarks);
                cmd.Parameters.AddWithValue("@Proposed_date_for_setting_up_logistic_unit", objBEL.Proposed_date_for_setting_up_logistic_unitVerified);
                cmd.Parameters.AddWithValue("@Proposed_date_for_setting_up_logistic_unit_Remarks", objBEL.Proposed_date_for_setting_up_logistic_unit_Remarks);
                cmd.Parameters.AddWithValue("@ProposedCapitalInvestment", objBEL.ProposedCapitalInvestmentVerified);
                cmd.Parameters.AddWithValue("@ProposedCapitalInvestment_Remarks", objBEL.ProposedCapitalInvestment_Remarks);
                cmd.Parameters.AddWithValue("@date_capital_investment_started", objBEL.date_capital_investment_startedVerified);
                cmd.Parameters.AddWithValue("@date_capital_investment_started_Remarks", objBEL.date_capital_investment_started_Remarks);
                cmd.Parameters.AddWithValue("@Total_Amount_by_Applicant", objBEL.Total_Amount_by_ApplicantVerified);
                cmd.Parameters.AddWithValue("@Total_Amount_by_Applicant_Remarks", objBEL.Total_Amount_by_Applicant_Remarks);
                cmd.Parameters.AddWithValue("@RebateonStampDuty", objBEL.RebateonStampDutyVerified);
                cmd.Parameters.AddWithValue("@RebateonStampDuty_Remarks", objBEL.RebateonStampDuty_Remarks);
                cmd.Parameters.AddWithValue("@EPFReimbursement", objBEL.EPFReimbursementVerified);
                cmd.Parameters.AddWithValue("@EPFReimbursement_Remarks", objBEL.EPFReimbursement_Remarks);
                cmd.Parameters.AddWithValue("@Additional_EPF_Reimbursement", objBEL.Additional_EPF_ReimbursementVerified);
                cmd.Parameters.AddWithValue("@Additional_EPF_Reimbursement_Remarks", objBEL.Additional_EPF_Reimbursement_Remarks);
                cmd.Parameters.AddWithValue("@Capital_Interest_Subsidy", objBEL.Capital_Interest_SubsidyVerified);
                cmd.Parameters.AddWithValue("@Capital_Interest_Subsidy_Remarks", objBEL.Capital_Interest_Subsidy_Remarks);
                cmd.Parameters.AddWithValue("@InfrastructureInterestSubsidy", objBEL.InfrastructureInterestSubsidyVerified);
                cmd.Parameters.AddWithValue("@InfrastructureInterestSubsidy_Remarks", objBEL.InfrastructureInterestSubsidy_Remarks);
                cmd.Parameters.AddWithValue("@RebateonLanduseconversioncharges", objBEL.RebateonLanduseconversionchargesVerified);
                cmd.Parameters.AddWithValue("@RebateonLanduseconversioncharges_Remarks", objBEL.RebateonLanduseconversioncharges_Remarks);
                cmd.Parameters.AddWithValue("@Exemptionfromdevelopmentcharges", objBEL.ExemptionfromdevelopmentchargesVerified);
                cmd.Parameters.AddWithValue("@Exemptionfromdevelopmentcharges_Remarks", objBEL.Exemptionfromdevelopmentcharges_Remarks);
                cmd.Parameters.AddWithValue("@ElectricityRebate", objBEL.ElectricityRebateVerified);
                cmd.Parameters.AddWithValue("@ElectricityRebate_Remarks", objBEL.ElectricityRebate_Remarks);
                cmd.Parameters.AddWithValue("@Warehousingqualitycertificationreimbursement", objBEL.WarehousingqualitycertificationreimbursementVerified);
                cmd.Parameters.AddWithValue("@Warehousingqualitycertificationreimbursement_remarks", objBEL.Warehousingqualitycertificationreimbursement_remarks);
                cmd.Parameters.AddWithValue("@monthassistanceforpayrollofdisabledworkers", objBEL.monthassistanceforpayrollofdisabledworkersVerified);
                cmd.Parameters.AddWithValue("@monthassistanceforpayrollofdisabledworkers_Remarks", objBEL.monthassistanceforpayrollofdisabledworkers_Remarks);
                cmd.Parameters.AddWithValue("@Skilldevelopmentpromotion", objBEL.SkilldevelopmentpromotionVerified);
                cmd.Parameters.AddWithValue("@Skilldevelopmentpromotion_Remarks", objBEL.Skilldevelopmentpromotion_Remarks);
                cmd.Parameters.AddWithValue("@IntelligentLogisticIncentives", objBEL.IntelligentLogisticIncentivesVerified);
                cmd.Parameters.AddWithValue("@IntelligentLogisticIncentives_Remarks", objBEL.IntelligentLogisticIncentives_Remarks);
                cmd.Parameters.AddWithValue("@Compliance_1", objBEL.Compliance_1);
                cmd.Parameters.AddWithValue("@Compliance_2", objBEL.Compliance_2);
                cmd.Parameters.AddWithValue("@Compliance_3", objBEL.Compliance_3);
                cmd.Parameters.AddWithValue("@Compliance_4", objBEL.Compliance_4);
                cmd.Parameters.AddWithValue("@Compliance_5", objBEL.Compliance_5);
                cmd.Parameters.AddWithValue("@Compliance_6", objBEL.Compliance_6);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteLAWLandDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteLAWLandDetail_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.LAWLandID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeletePIPLandDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeletePIPLandDetail_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.LAWLandID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetLAWLandDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetLAWLandDeatils_sp]", con);

                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetPIPLandDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetPIPLandDeatils_sp]", con);

                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateLAWLandDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateLAWLandDetails_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandDeedDate", objBEL.LandDeedDate);
                cmd.Parameters.AddWithValue("@LandArea", objBEL.LandArea);
                cmd.Parameters.AddWithValue("@KhasraNo", objBEL.KhasraNumber);
                cmd.Parameters.AddWithValue("@LandValue", objBEL.LandValue);
                cmd.Parameters.AddWithValue("@LAWLandID", objBEL.LAWLandID);
                cmd.Parameters.AddWithValue("@StampDutyPaid", objBEL.StampDutyPaid);

                cmd.Parameters.AddWithValue("@District", objBEL.LAWDistrict);
                cmd.Parameters.AddWithValue("@Tehsil", objBEL.LAWTehsil);
                cmd.Parameters.AddWithValue("@Village", objBEL.LAWVillage);

                cmd.Parameters.AddWithValue("@ExistingLand", objBEL.ExistingLand);
                cmd.Parameters.AddWithValue("@LandContiguousStatus", objBEL.LandContiguousStatus);
                cmd.Parameters.AddWithValue("@LandContiguous", objBEL.LandContiguous);
                cmd.Parameters.AddWithValue("@GramGovStatus", objBEL.GramGovStatus);
                cmd.Parameters.AddWithValue("@GramGov", objBEL.GramGov);
                cmd.Parameters.AddWithValue("@LandExchangeStatus", objBEL.LandExchangeStatus);
                cmd.Parameters.AddWithValue("@LandExchange", objBEL.LandExchange);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdatePIPLandDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdatePIPLandDetails_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandDeedDate", objBEL.LandDeedDate);
                cmd.Parameters.AddWithValue("@LandArea", objBEL.LandArea);
                cmd.Parameters.AddWithValue("@KhasraNo", objBEL.KhasraNumber);
                cmd.Parameters.AddWithValue("@LandValue", objBEL.LandValue);
                cmd.Parameters.AddWithValue("@LAWLandID", objBEL.LAWLandID);
                cmd.Parameters.AddWithValue("@StampDutyPaid", objBEL.StampDutyPaid);

                cmd.Parameters.AddWithValue("@District", objBEL.LAWDistrict);
                cmd.Parameters.AddWithValue("@Tehsil", objBEL.LAWTehsil);
                cmd.Parameters.AddWithValue("@Village", objBEL.LAWVillage);

                cmd.Parameters.AddWithValue("@ExistingLand", objBEL.ExistingLand);
                cmd.Parameters.AddWithValue("@anyOtherExistingProject", objBEL.anyOtherExistingProject);

                cmd.Parameters.AddWithValue("@LandContiguousStatus", objBEL.LandContiguousStatus);
                cmd.Parameters.AddWithValue("@LandContiguous", objBEL.LandContiguous);
                cmd.Parameters.AddWithValue("@GramGovStatus", objBEL.GramGovStatus);
                cmd.Parameters.AddWithValue("@GramGov", objBEL.GramGov);
                cmd.Parameters.AddWithValue("@LandExchangeStatus", objBEL.LandExchangeStatus);
                cmd.Parameters.AddWithValue("@LandExchange", objBEL.LandExchange);
                cmd.Parameters.AddWithValue("@PIPOtherDetails", objBEL.PIPOtherDetails);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 AddLAWLandDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertLAWLandDetails_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandDeedDate", objBEL.LandDeedDate);
                cmd.Parameters.AddWithValue("@LandArea", objBEL.LandArea);
                cmd.Parameters.AddWithValue("@KhasraNo", objBEL.KhasraNumber);
                cmd.Parameters.AddWithValue("@LandValue", objBEL.LandValue);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.LAWID);
                cmd.Parameters.AddWithValue("@StampDutyPaid", objBEL.StampDutyPaid);
                cmd.Parameters.AddWithValue("@District", objBEL.LAWDistrict);
                cmd.Parameters.AddWithValue("@Tehsil", objBEL.LAWTehsil);
                cmd.Parameters.AddWithValue("@Village", objBEL.LAWVillage);

                cmd.Parameters.AddWithValue("@ExistingLand", objBEL.ExistingLand);
                cmd.Parameters.AddWithValue("@LandContiguousStatus", objBEL.LandContiguousStatus);
                cmd.Parameters.AddWithValue("@LandContiguous", objBEL.LandContiguous);
                cmd.Parameters.AddWithValue("@GramGovStatus", objBEL.GramGovStatus);
                cmd.Parameters.AddWithValue("@GramGov", objBEL.GramGov);
                cmd.Parameters.AddWithValue("@LandExchangeStatus", objBEL.LandExchangeStatus);
                cmd.Parameters.AddWithValue("@LandExchange", objBEL.LandExchange);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 AddPIPLandDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertPIPLandDetails_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandDeedDate", objBEL.LandDeedDate);
                cmd.Parameters.AddWithValue("@LandArea", objBEL.LandArea);
                cmd.Parameters.AddWithValue("@KhasraNo", objBEL.KhasraNumber);
                cmd.Parameters.AddWithValue("@LandValue", objBEL.LandValue);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.LAWID);
                cmd.Parameters.AddWithValue("@StampDutyPaid", objBEL.StampDutyPaid);
                cmd.Parameters.AddWithValue("@District", objBEL.LAWDistrict);
                cmd.Parameters.AddWithValue("@Tehsil", objBEL.LAWTehsil);
                cmd.Parameters.AddWithValue("@Village", objBEL.LAWVillage);

                cmd.Parameters.AddWithValue("@ExistingLand", objBEL.ExistingLand);
                cmd.Parameters.AddWithValue("@anyOtherExistingProject", objBEL.anyOtherExistingProject);

                cmd.Parameters.AddWithValue("@LandContiguousStatus", objBEL.LandContiguousStatus);
                cmd.Parameters.AddWithValue("@LandContiguous", objBEL.LandContiguous);
                cmd.Parameters.AddWithValue("@GramGovStatus", objBEL.GramGovStatus);
                cmd.Parameters.AddWithValue("@GramGov", objBEL.GramGov);
                cmd.Parameters.AddWithValue("@LandExchangeStatus", objBEL.LandExchangeStatus);
                cmd.Parameters.AddWithValue("@LandExchange", objBEL.LandExchange);
                cmd.Parameters.AddWithValue("@PIPOtherDetails", objBEL.PIPOtherDetails);

                
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetApplicationOfLogisticWarehousingApproved(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLAWApproved", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfPIPApproved(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForPIPApproved", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAlertApplicationOfPIPApproved(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAlertApplicationForPIPApproved", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfLogisticWarehousingRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLAWRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfPIPRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForPIPRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAlertApplicationOfPIPRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAlertApplicationForPIPRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetApplicationOfPIPObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForPIPObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAlertApplicationOfPIPObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAlertApplicationForPIPObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public Int32 IssueLetterLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("IssueLettersLAW_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IssueDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@LetterType", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 IssueLetterPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("IssueLettersPIP_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IssueDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@LetterType", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetAllMeetingMinutesLAW(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfMeetingMinutesLAW", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllMeetingMinutesPIP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfMeetingMinutesPIP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetUserForwardedList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_getLAwTransferSchedule", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPIPUserForwardedList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_getPIPTransferSchedule", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 DeleteMeetingMinutesLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteMeetingMinutesLAW_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@OrderId", objBEL.OfficeOrderID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteMeetingMinutesPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteMeetingMinutesPIP_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@OrderId", objBEL.OfficeOrderID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateMeetingMinutesLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateMeetingMinutesLAW_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.OfficeOrderID);
                cmd.Parameters.AddWithValue("@MeetingDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@MeetingType", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateMeetingMinutesPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateMeetingMinutesPIP_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.OfficeOrderID);
                cmd.Parameters.AddWithValue("@MeetingDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@MeetingType", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 InsertMeetingMinutesLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertMeetingMinutes_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@MeetingType", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 InsertMeetingMinutesPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertMeetingMinutesPIP_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@MeetingType", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveObjectionResponseLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UploadObjectionResponseLAW", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantResponse", objBEL.responseMessage);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveObjectionResponsePIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UploadObjectionResponsePIP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantResponse", objBEL.responseMessage);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 RaiseObjectionLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[RaiseObjectionLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Clarification", objBEL.ObjectionDesc);
                cmd.Parameters.AddWithValue("@InternalObjDocName", objBEL.LAName);
                cmd.Parameters.AddWithValue("@InternalObjDocContent", objBEL.LAContentType);
                cmd.Parameters.AddWithValue("@UseDocPath", objBEL.LAWDocPath);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 RaiseObjectionPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[RaiseObjectionPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@PIPReasonDetails", objBEL.PIPReasonDetails);
                cmd.Parameters.AddWithValue("@Clarification", objBEL.ObjectionDesc);
                cmd.Parameters.AddWithValue("@InternalObjDocName", objBEL.LAName);
                cmd.Parameters.AddWithValue("@InternalObjDocContent", objBEL.LAContentType);
                cmd.Parameters.AddWithValue("@UseDocPath", objBEL.LAWDocPath);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetApplicationOfLogisticWarehousingUnderProcess1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLAWUnderProcess1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfPIPUnderProcess1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForPIPUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAlertApplicationOfPIPUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAlertApplicationForPIPUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 UpdateLawComments(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateLawComments", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdatePIPComments(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdatePIPComments", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetApplicationOfLogisticWarehousingInBox1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLAWInbox1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfPIPInBox1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForPIPInbox1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Get_Notesheet_of_application_LAW(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Notesheet_of_Application_LAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet Get_Notesheet_of_application_PIP(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Notesheet_of_Application_PIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 TransferApplicationLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferApplicationLAW", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser", objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 TransferCommitteeApplicationPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferCommitteeApplicationPIP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser", objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@TransferPIPCommStatus", objBEL.TransferPIPCommStatus);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 TransferApplicationPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferDepartmentApplicationPIP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser", objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@TransferPIPCommStatus", objBEL.TransferPIPCommStatus);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 FormFinalSubmissionLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_LAWFormFinalSubmission]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@KYCID", objBEL.KYCID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 FormFinalSubmissionPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_PIPFormFinalSubmission]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@KYCID", objBEL.KYCID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateCorrespondenceDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateCorrespondenceLetters_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.OfficeOrderID);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.LetterNo);
                cmd.Parameters.AddWithValue("@LetterDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@LetterTo", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteCorrespondenceLetters(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteCorrespondenceLetter_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@OrderId", objBEL.OfficeOrderID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertCorrespondenceLetters(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertCorrespondenceLetters_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.LetterNo);
                cmd.Parameters.AddWithValue("@LetterDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@LetterTo", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetAllCorrespondenceLetters(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfCorrespondenceLetters", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetLAWDocumentByID(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetLAWDocumentDetailByID]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPIPDocumentByID(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetPIPDocumentDetailByID]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfLogisticWarehousingInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLAWInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfPIPInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForPIPInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAlertApplicationOfPIPInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAlertApplicationForPIPInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAlertCommStatus(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAlertPIPCommStatus", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetLAWCheckListDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetLAWCheckListDocumentDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                //cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPIPCheckListDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetPIPCheckListDocumentDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                //cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public Int32 SaveLAWServiceChecklistDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadChecklistfileLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Path", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SavePIPServiceChecklistDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadChecklistfilePIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Path", objBEL.LAWDocPath);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetAllServiceChecklistsLAW(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetServiceChecklists_LAW]", con);

                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ServiceCondition", objBEL.ServiceChecklistCondition);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllServiceChecklistsPIP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetServiceChecklists_PIP]", con);

                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ServiceCondition", objBEL.ServiceChecklistCondition);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 UpdateApplicantProjectDetailsLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[ApplicationProjectDetailsLAW_sp1]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TypeOfProject", objBEL.TypeOfProject);
                cmd.Parameters.AddWithValue("@CategoryOfProject", objBEL.CategoryOfProject);
                cmd.Parameters.AddWithValue("@Proposeddateforsettinguplogisticunit", objBEL.Proposeddateforsettinguplogisticunit);
                cmd.Parameters.AddWithValue("@datewhencapitalinvestmentstarted", objBEL.datewhencapitalinvestmentstarted);
                cmd.Parameters.AddWithValue("@ProposedInvestment", objBEL.ProposedInvestment);
                cmd.Parameters.AddWithValue("@CostoftheLand", objBEL.CostoftheLand);
                cmd.Parameters.AddWithValue("@CostofInfrastructures", objBEL.CostofInfrastructures);
                cmd.Parameters.AddWithValue("@CostofthePlantMachinery", objBEL.CostofthePlantMachinery);
                cmd.Parameters.AddWithValue("@OtherCost", objBEL.OtherCost);
                cmd.Parameters.AddWithValue("@TotalAmountrequestedbyApplicant", objBEL.TotalAmountrequestedbyApplicant);
                cmd.Parameters.AddWithValue("@RebateonStampDuty", objBEL.RebateonStampDuty);
                cmd.Parameters.AddWithValue("@EPFReimbursement", objBEL.EPFReimbursement);
                cmd.Parameters.AddWithValue("@AdditionalEPFReimbursement", objBEL.AdditionalEPFReimbursement);
                cmd.Parameters.AddWithValue("@CapitalInterestSubsidy", objBEL.CapitalInterestSubsidy);
                cmd.Parameters.AddWithValue("@InfrastructureInterestSubsidy", objBEL.InfrastructureInterestSubsidy);
                cmd.Parameters.AddWithValue("@RebateonLanduseconversioncharges", objBEL.RebateonLanduseconversioncharges);
                cmd.Parameters.AddWithValue("@Exemptionfromdevelopmentcharges", objBEL.Exemptionfromdevelopmentcharges);
                cmd.Parameters.AddWithValue("@ElectricityRebate", objBEL.ElectricityRebate);
                cmd.Parameters.AddWithValue("@Warehousingqualitycertificationreimbursement", objBEL.Warehousingqualitycertificationreimbursement);
                cmd.Parameters.AddWithValue("@assistanceforpayrollofdisabledworkers", objBEL.assistanceforpayrollofdisabledworkers);
                cmd.Parameters.AddWithValue("@Skilldevelopmentpromotion", objBEL.Skilldevelopmentpromotion);
                cmd.Parameters.AddWithValue("@IntelligentLogisticIncentives", objBEL.IntelligentLogisticIncentives);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.ProposedArea);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.ProposedCoveredArea);
                cmd.Parameters.AddWithValue("@LAWRegistrationNo", objBEL.LAWRegistrationNo);
                cmd.Parameters.AddWithValue("@ProjectDetail", objBEL.ProjectDetail);
                cmd.Parameters.AddWithValue("@anyOther", objBEL.anyOther);

                cmd.Parameters.AddWithValue("@BuildingCostforConstruction", objBEL.BuildingCostforConstruction);
                cmd.Parameters.AddWithValue("@CapitalSubsidy", objBEL.CapitalSubsidy);
                cmd.Parameters.AddWithValue("@SubsidyType", objBEL.SelectSubsidyFront);
                cmd.Parameters.AddWithValue("@SubsidyType2", objBEL.SelectSubsidyBack);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateApplicantProjectDetailsPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[ApplicationProjectDetailsPIP_sp1]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                cmd.Parameters.AddWithValue("@TypeOfProject", objBEL.TypeOfProject);
                cmd.Parameters.AddWithValue("@CategoryOfProject", objBEL.CategoryOfProject);
                cmd.Parameters.AddWithValue("@DateofCompletion", objBEL.DateofCompletion);
                cmd.Parameters.AddWithValue("@datewhencapitalinvestmentstarted", objBEL.datewhencapitalinvestmentstarted);
                cmd.Parameters.AddWithValue("@ProposedInvestment", objBEL.ProposedInvestment);
                
                cmd.Parameters.AddWithValue("@DistanceFromRailway", objBEL.DistanceFromRailway);
                cmd.Parameters.AddWithValue("@ProposedDirectEmployment", objBEL.ProposedDirectEmployment);
                cmd.Parameters.AddWithValue("@DistanceFromBus", objBEL.DistanceFromBus);
                cmd.Parameters.AddWithValue("@ProposedIndirectEmployment", objBEL.ProposedIndirectEmployment);
                cmd.Parameters.AddWithValue("@TotalAmountrequestedbyApplicant", objBEL.TotalAmountrequestedbyApplicant);
                cmd.Parameters.AddWithValue("@ExemptionOnStamp", objBEL.ExemptionOnStamp);
                cmd.Parameters.AddWithValue("@SubsidyFixedCapitalInvestment", objBEL.SubsidyFixedCapitalInvestment);
                cmd.Parameters.AddWithValue("@SubsidyHostelDormitory", objBEL.SubsidyHostelDormitory);
                cmd.Parameters.AddWithValue("@CapitalInterestSubsidy", objBEL.CapitalInterestSubsidy);
                cmd.Parameters.AddWithValue("@InfrastructureInterestSubsidy", objBEL.InfrastructureInterestSubsidy);
                cmd.Parameters.AddWithValue("@RebateonLanduseconversioncharges", objBEL.RebateonLanduseconversioncharges);
                cmd.Parameters.AddWithValue("@Exemptionfromdevelopmentcharges", objBEL.Exemptionfromdevelopmentcharges);
                cmd.Parameters.AddWithValue("@ElectricityRebate", objBEL.ElectricityRebate);
                cmd.Parameters.AddWithValue("@Warehousingqualitycertificationreimbursement", objBEL.Warehousingqualitycertificationreimbursement);
                cmd.Parameters.AddWithValue("@assistanceforpayrollofdisabledworkers", objBEL.assistanceforpayrollofdisabledworkers);
                cmd.Parameters.AddWithValue("@Skilldevelopmentpromotion", objBEL.Skilldevelopmentpromotion);
                cmd.Parameters.AddWithValue("@IntelligentLogisticIncentives", objBEL.IntelligentLogisticIncentives);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.ProposedArea);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.ProposedCoveredArea);
                cmd.Parameters.AddWithValue("@PIPRegistrationNo", objBEL.PIPRegistrationNo);
                cmd.Parameters.AddWithValue("@ProjectDetail", objBEL.ProjectDetail);
                cmd.Parameters.AddWithValue("@anyOther", objBEL.anyOther);
                cmd.Parameters.AddWithValue("@DistanceFromAirport", objBEL.DistanceFromAirport);
                cmd.Parameters.AddWithValue("@CapitalSubsidy", objBEL.CapitalSubsidy);
                cmd.Parameters.AddWithValue("@SubsidyType", objBEL.SelectSubsidyFront);
                cmd.Parameters.AddWithValue("@SubsidyType2", objBEL.SelectSubsidyBack);

                
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveApplicantSignLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantSignLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveApplicantSignPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantSignPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveMigrationDetailsLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantMigrationLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LAWServiceRequestNO", objBEL.ServiceRequestNO);           
                cmd.Parameters.AddWithValue("@ProjectIdentification", objBEL.ProjectIdentification);                
                cmd.Parameters.AddWithValue("@NameClearance", objBEL.NameClearance);
                cmd.Parameters.AddWithValue("@DateOfClearance", objBEL.DateOfClearance);
                //cmd.Parameters.AddWithValue("@DetailsOfIncentive", objBEL.DetailsOfIncentive);
                cmd.Parameters.AddWithValue("@DetailsOfIncentive", objBEL.DetailsOfIncentive);
                cmd.Parameters.AddWithValue("@PresentImplementStatsu", objBEL.PresentImplementStatsu);
                cmd.Parameters.AddWithValue("@DateOfProduction", objBEL.DateOfProduction);

                cmd.Parameters.AddWithValue("@CapitaloftheLandDPR", objBEL.CapitaloftheLandDPR);
                cmd.Parameters.AddWithValue("@CapitaloftheLandAEI", objBEL.CapitaloftheLandAEI);
                cmd.Parameters.AddWithValue("@CapitaloftheBuildingDPR", objBEL.CapitaloftheBuildingDPR);
                cmd.Parameters.AddWithValue("@CapitaloftheBuildingAEI", objBEL.CapitaloftheBuildingAEI);

                cmd.Parameters.AddWithValue("@CapitalofthePlantMachineryDPR", objBEL.CapitalofthePlantMachineryDPR);
                cmd.Parameters.AddWithValue("@CapitalofthePlantMachineryAEI", objBEL.CapitalofthePlantMachineryAEI);
                cmd.Parameters.AddWithValue("@OtherCapitalDPR", objBEL.OtherCapitalDPR);
                cmd.Parameters.AddWithValue("@OtherCapitalAEI", objBEL.OtherCapitalAEI);
                cmd.Parameters.AddWithValue("@TotalCapitalDPR", objBEL.TotalCapitalDPR);
                cmd.Parameters.AddWithValue("@TotalCapitalAEI", objBEL.TotalCapitalAEI);

                cmd.Parameters.AddWithValue("@MeanOfFinance", objBEL.MeanOfFinance);
                cmd.Parameters.AddWithValue("@Reason", objBEL.Reason);
                cmd.Parameters.AddWithValue("@WantToMigrate", objBEL.WantToMigrate);
                cmd.Parameters.AddWithValue("@Place", objBEL.Place);
                cmd.Parameters.AddWithValue("@Dates", objBEL.Dates);

                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveMigrationDetailsPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantMigrationPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LAWServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ProjectIdentification", objBEL.ProjectIdentification);
                cmd.Parameters.AddWithValue("@NameClearance", objBEL.NameClearance);
                cmd.Parameters.AddWithValue("@DateOfClearance", objBEL.DateOfClearance);
                //cmd.Parameters.AddWithValue("@DetailsOfIncentive", objBEL.DetailsOfIncentive);
                cmd.Parameters.AddWithValue("@DetailsOfIncentive", objBEL.DetailsOfIncentive);
                cmd.Parameters.AddWithValue("@PresentImplementStatsu", objBEL.PresentImplementStatsu);
                cmd.Parameters.AddWithValue("@DateOfProduction", objBEL.DateOfProduction);

                cmd.Parameters.AddWithValue("@CapitaloftheLandDPR", objBEL.CapitaloftheLandDPR);
                cmd.Parameters.AddWithValue("@CapitaloftheLandAEI", objBEL.CapitaloftheLandAEI);
                cmd.Parameters.AddWithValue("@CapitaloftheBuildingDPR", objBEL.CapitaloftheBuildingDPR);
                cmd.Parameters.AddWithValue("@CapitaloftheBuildingAEI", objBEL.CapitaloftheBuildingAEI);

                cmd.Parameters.AddWithValue("@CapitalofthePlantMachineryDPR", objBEL.CapitalofthePlantMachineryDPR);
                cmd.Parameters.AddWithValue("@CapitalofthePlantMachineryAEI", objBEL.CapitalofthePlantMachineryAEI);
                cmd.Parameters.AddWithValue("@OtherCapitalDPR", objBEL.OtherCapitalDPR);
                cmd.Parameters.AddWithValue("@OtherCapitalAEI", objBEL.OtherCapitalAEI);
                cmd.Parameters.AddWithValue("@TotalCapitalDPR", objBEL.TotalCapitalDPR);
                cmd.Parameters.AddWithValue("@TotalCapitalAEI", objBEL.TotalCapitalAEI);

                cmd.Parameters.AddWithValue("@MeanOfFinance", objBEL.MeanOfFinance);
                cmd.Parameters.AddWithValue("@Reason", objBEL.Reason);
                cmd.Parameters.AddWithValue("@WantToMigrate", objBEL.WantToMigrate);
                cmd.Parameters.AddWithValue("@Place", objBEL.Place);
                cmd.Parameters.AddWithValue("@Dates", objBEL.Dates);

                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveApplicantImageLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantImageLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveApplicantImagePIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantImagePIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SavePartnerDetailsLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantPartnersLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PartnerName", objBEL.PartnerName);
                cmd.Parameters.AddWithValue("@Address", objBEL.PartnerAddress);
                cmd.Parameters.AddWithValue("@PartnerPer", objBEL.PartnerPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.PartnerPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.PartnerEmail);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SavePartnerDetailsPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantPartnersPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PartnerName", objBEL.PartnerName);
                cmd.Parameters.AddWithValue("@Address", objBEL.PartnerAddress);
                cmd.Parameters.AddWithValue("@PartnerPer", objBEL.PartnerPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.PartnerPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.PartnerEmail);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveTrusteeDetailsLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantTrusteeLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TrusteeName", objBEL.TrusteeName);
                cmd.Parameters.AddWithValue("@Address", objBEL.TrusteeAddress);
                cmd.Parameters.AddWithValue("@Phone", objBEL.TrusteePhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.TrusteeEmail);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveTrusteeDetailsPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantTrusteePIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TrusteeName", objBEL.TrusteeName);
                cmd.Parameters.AddWithValue("@Address", objBEL.TrusteeAddress);
                cmd.Parameters.AddWithValue("@Phone", objBEL.TrusteePhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.TrusteeEmail);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveDirectorsDetailsLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantDirectorsLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@DirectorName", objBEL.DirectorName);
                cmd.Parameters.AddWithValue("@Address", objBEL.DirectorAddress);
                cmd.Parameters.AddWithValue("@DinPan", objBEL.DirectorDinPan);
                cmd.Parameters.AddWithValue("@Phone", objBEL.DirectorPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.DirectorEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveDirectorsDetailsPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantDirectorsPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@DirectorName", objBEL.DirectorName);
                cmd.Parameters.AddWithValue("@Address", objBEL.DirectorAddress);
                cmd.Parameters.AddWithValue("@DinPan", objBEL.DirectorDinPan);
                cmd.Parameters.AddWithValue("@Phone", objBEL.DirectorPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.DirectorEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveShareHolderDetailsLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantShareHoldersLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveShareHolderDetailsPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantShareHoldersPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 ClearFirmConstitutionLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearFirmConstitutionLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 ClearFirmConstitutionPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearFirmConstitutionPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet UpdateApplicantLAWBasicDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantLAWBasicDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GSTNo);
                cmd.Parameters.AddWithValue("@UdyogAadharNo", objBEL.UdyogAadharNo);
                cmd.Parameters.AddWithValue("@ApplicantAadhar", objBEL.AadharNo);
                cmd.Parameters.AddWithValue("@ProjectLocation", objBEL.Address);
                cmd.Parameters.AddWithValue("@ApplicantAddress", objBEL.applicantAddress);
                cmd.Parameters.AddWithValue("@CompanyAddress", objBEL.CompanyAddress);
                cmd.Parameters.AddWithValue("@isSPV", objBEL.IsSPV);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet UpdateApplicantPIPBasicDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantPIPBasicDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GSTNo);
                cmd.Parameters.AddWithValue("@UdyogAadharNo", objBEL.UdyogAadharNo);
                cmd.Parameters.AddWithValue("@ApplicantAadhar", objBEL.AadharNo);
                cmd.Parameters.AddWithValue("@ProjectLocation", objBEL.Address);
                cmd.Parameters.AddWithValue("@ApplicantAddress", objBEL.applicantAddress);
                cmd.Parameters.AddWithValue("@CompanyAddress", objBEL.CompanyAddress);
                cmd.Parameters.AddWithValue("@isSPV", objBEL.IsSPV);

                cmd.Parameters.AddWithValue("@IsRegionPIP", objBEL.IsRegionPIP);
                cmd.Parameters.AddWithValue("@ProposedPIP", objBEL.ProposedPIP);

                cmd.Parameters.AddWithValue("@ApplicantName", objBEL.AllotteeName);
                cmd.Parameters.AddWithValue("@emailID", objBEL.emailID);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetLAWDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetLAWDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPIPDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetPIPDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet SaveLogisticDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("InsertLogisticsRegistration_Sp1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.ApplicantName);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNumber);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.emailID);

                cmd.Parameters.AddWithValue("@ControlID", objBEL.MControlID);
                cmd.Parameters.AddWithValue("@UnitId", objBEL.MUnitId);

                cmd.Parameters.AddWithValue("@ServiceId", objBEL.MServiceId);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.MRequestID);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet SaveReScDueDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("InsertReScDueRegistration_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.ApplicantName);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNumber);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.emailID);

                cmd.Parameters.AddWithValue("@ControlID", objBEL.MControlID);
                cmd.Parameters.AddWithValue("@UnitId", objBEL.MUnitId);

                cmd.Parameters.AddWithValue("@ServiceId", objBEL.MServiceId);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.MRequestID);


                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet SavePIPDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("InsertPIPRegistration_Sp1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.ApplicantName);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNumber);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.emailID);

                cmd.Parameters.AddWithValue("@ControlID", objBEL.MControlID);
                cmd.Parameters.AddWithValue("@UnitId", objBEL.MUnitId);

                cmd.Parameters.AddWithValue("@ServiceId", objBEL.MServiceId);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.MRequestID);


                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet SavePIPFinDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("InsertPIPFinRegistration_Sp1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.ApplicantName);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNumber);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.emailID);

                cmd.Parameters.AddWithValue("@ControlID", objBEL.MControlID);
                cmd.Parameters.AddWithValue("@UnitId", objBEL.MUnitId);

                cmd.Parameters.AddWithValue("@ServiceId", objBEL.MServiceId);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.MRequestID);


                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@UID", objBEL.UID);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        #endregion

        #region "LAD"

        public Int32 UpdateLAStatus(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_UpdateLAStatus", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@StatusID", objBEL.StatusID);
                cmd.Parameters.AddWithValue("@StatusName", objBEL.StatusName);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetgridforLADClosed(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAssessmentSearchClosed_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@search", objBEL.searchText);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 RevertLAStatus(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_RevertLAStatus", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetgridStatus(string search)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LandAssessmentStatusbyID_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", search);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetgridLADClosed(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[LandAssessmentClosed_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        // mashi
        public DataSet ViewSignedCopyLetterSbiEAUCtion(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetSignedCopyLetterSBI_EAUCTION", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Service", objBEL.Doctype);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UploadSignedCopyLetterSbiauction(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadSignedCopyOfLetterSbiAuction]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@Name"       , objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                //cmd.Parameters.AddWithValue("@DocType", objBEL.Doctype);
                //cmd.Parameters.AddWithValue("@Flag", objBEL.Flag);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        // end code 
        public DataSet GetApplicationOfSubDivisionPostAllotmentCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForSubDivisionPostAllotmentApproved]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfSubDivisionPostAllotmentRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationOfSubDivisionPostAllotmentRejected]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfSubDivisionPostAllotment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForSubDivisionPostAllotment]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;//GetApplicationOfSubdivision
        }

        public DataSet GetApplicationForSubDivisionPostAllotmentUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForSubDivisionPostAllotmentUnderProcess]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;//GetApplicationOfSubdivision
        }

        public DataSet GetApplicationOfSubDivisionPostAllotmentUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForSubDivisionPostAllotmentUnderObjection]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;//GetApplicationOfSubdivision
        }

        public DataSet GetapplicableChargesforTimeExtenstionView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ServiceApplicableChargeTimeextenstionView", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetapplicableChargesforTimeExtenstionNMSWPPaid(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPaymentTimeExtenstionNMSWPPaid", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #region "Mis Investment"
        public DataSet GetListOfInvestmentIAWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfInvestmentAllotteeWise]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ReportType", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDatetime);              
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDatetime);
                cmd.Parameters.AddWithValue("@Service", objBEL.serviceID);



                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfOutstandingWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfInvestmentOutstandingWise]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Description", objBEL.Description);
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ReportType", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDatetime);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDatetime);
                
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfPublishedPlots(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfPublishedPlots]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ReportType", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDatetime);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDatetime);



                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion



        #region Allottee Master Detail
        public DataSet GetAllotteeIDDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetAllotteeIDDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentletterNumber", objBEL.AllotmentLetterno
                    );
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #region  UploadCACertificateDocument
        public Int32 UploadCACertificateDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadAllotmentLetter]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@AllotteeId", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@DocID", objBEL.DocumentID);
                cmd.Parameters.AddWithValue("@AllotmentLetterNumber", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetBindUploadedDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GET_AllDocView]", con);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCheckListDocumentAllotteeRegistration(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetCheckListAllotteeDocument]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCompletedAlloteeDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetCompletedAlloteeDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IndustrialArea);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 UpdateAllotteeProjectDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateAllotteeProjectDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.ID);
                cmd.Parameters.AddWithValue("@IndustryType", objBEL.IndustryType);
                cmd.Parameters.AddWithValue("@EstimatedCostOfProject", objBEL.EstimatedCostOfProject);
                cmd.Parameters.AddWithValue("@EstimatedEmploymentGeneration", objBEL.EstimatedEmploymentGeneration);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@OpenAreaRequired", objBEL.OpenAreaRequired);
                cmd.Parameters.AddWithValue("@LandDetails", objBEL.LandDetails);
                cmd.Parameters.AddWithValue("@BuildingDetails", objBEL.BuildingDetails);
                cmd.Parameters.AddWithValue("@MachineryEquipmentsDetails", objBEL.MachineryEquipmentsDetails);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidqty", objBEL.IndustrialEffluentSolidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidComposition", objBEL.IndustrialEffluentSolidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidqty", objBEL.IndustrialEffluentLiquidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidComposition", objBEL.IndustrialEffluentLiquidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousqty", objBEL.IndustrialEffluentGaseousqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousComposition", objBEL.IndustrialEffluentGaseousComposition);
                cmd.Parameters.AddWithValue("@FumeGenerationStatus", objBEL.FumeGenerationStatus);
                cmd.Parameters.AddWithValue("@FumeQuantity", objBEL.FumeQuantity);
                cmd.Parameters.AddWithValue("@FumeNature", objBEL.FumeNature);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure1", objBEL.EffluentTreatmentMeasure1);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure2", objBEL.EffluentTreatmentMeasure2);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure3", objBEL.EffluentTreatmentMeasure3);
                cmd.Parameters.AddWithValue("@PowerReqInKW", objBEL.PowerReqInKW);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear1", objBEL.TelephoneReqFirstYear1);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear2", objBEL.TelephoneReqFirstYear2);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate1", objBEL.TelephoneReqUltimate1);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate2", objBEL.TelephoneReqUltimate2);
                cmd.Parameters.AddWithValue("@ApplicantPriorityStatus", objBEL.ApplicantPriorityStatus);
                cmd.Parameters.AddWithValue("@ApplicantPrioritySpecification", objBEL.ApplicantPrioritySpecification);
                cmd.Parameters.AddWithValue("@OtherFixedAssets", objBEL.OtherFixedAssets);
                cmd.Parameters.AddWithValue("@OtherExpenses", objBEL.OtherExpenses);
                cmd.Parameters.AddWithValue("@OwnResources", objBEL.OwnResources);
                cmd.Parameters.AddWithValue("@FI", objBEL.FI);
                cmd.Parameters.AddWithValue("@FAR", objBEL.FAR);
                cmd.Parameters.AddWithValue("@ProjectStartMonths", objBEL.projectstartmonths);
                cmd.Parameters.AddWithValue("@pollutionCategory", objBEL.pollutionCategory);
                cmd.Parameters.AddWithValue("@workexperience", objBEL.workexperience);
                cmd.Parameters.AddWithValue("@NetTurnOver", objBEL.NetTurnOver);
                cmd.Parameters.AddWithValue("@NetWorth", objBEL.Networth);
                cmd.Parameters.AddWithValue("@HSProductCategory", objBEL.HSProductCategory);
                cmd.Parameters.AddWithValue("@HSProductSubCategory", objBEL.HSProductSubCategory);
                cmd.Parameters.AddWithValue("@HSProductName", objBEL.HSProductName);
                cmd.Parameters.AddWithValue("@ExportOriented", objBEL.ExportOriented);
                cmd.Parameters.AddWithValue("@IAType", objBEL.IAType);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        #endregion

        public Int32 UpdateAllotteeMassterAID(belBookDetails objBEL)
        {
            int result;
            //DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[ZNK_UpdateAllotteeMassterAID]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);               
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@AID", objBEL.AID);
                cmd.Parameters.Add("flag", SqlDbType.BigInt).Direction = ParameterDirection.Output;
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 NewAllotteeRegistration(belBookDetails objBEL)
        {
            int result;
            //DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[ZNK_NewAllotteeRegistration]", con);
                cmd.CommandType = CommandType.StoredProcedure;               
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);               
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                
               
                cmd.Parameters.AddWithValue("@userid", objBEL.UserIds);
                cmd.Parameters.AddWithValue("@Password", objBEL.Password);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 AllotteeKYA(belBookDetails objBEL)
        {
            int result;
            //DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[ZNK_AllotteeKYA]", con);               
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentLetterNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PloltNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@GSTStatus", objBEL.GSTStatus);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GstNo);
                cmd.Parameters.AddWithValue("@GSTDate", objBEL.GSTDate);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@AadharNo", objBEL.AadharNo);
                cmd.Parameters.AddWithValue("@KYAdoc", objBEL.KYAdoc);
                cmd.Parameters.AddWithValue("@Status", objBEL.Status);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet NewRegistrationAllotteeDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[NewRegistrationAllottee_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentLetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@AllotedPloltNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@FileNo", objBEL.FileNo);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ToatalPlotedArea", objBEL.totalPlotArea);
                cmd.Parameters.AddWithValue("@AllotmenttLetterApplicationDate", objBEL.AllotmenttLetterApplicationDate);
                cmd.Parameters.AddWithValue("@Sector", objBEL.SectorName);
                cmd.Parameters.AddWithValue("@AllotmentRate", objBEL.AllotmentRate);
                cmd.Parameters.AddWithValue("@locationcharge", objBEL.locationcharge);
                cmd.Parameters.AddWithValue("@InterestRateApplicable", objBEL.InterestRateApplicable);
                cmd.Parameters.AddWithValue("@GroundCoverage", objBEL.GroundCoverage);
                cmd.Parameters.AddWithValue("@PermisableFAR", objBEL.PermisableFAR);
                cmd.Parameters.AddWithValue("@AllotmentIssueDate", objBEL.AllotmentIssueDate);

                cmd.Parameters.AddWithValue("@ref_AllotmentNo", objBEL.ref_AllotmentNo);
                cmd.Parameters.AddWithValue("@ConstructionValueAtTimeofAllotment", objBEL.ConstructionValueAtTimeofAllotment);
                cmd.Parameters.AddWithValue("@CaseType", objBEL.CaseType);
                cmd.Parameters.AddWithValue("@TranserLevyCase", objBEL.TranserLevyCase);
                cmd.Parameters.AddWithValue("@PrevDues", objBEL.PrevDues);
                cmd.Parameters.AddWithValue("@firstAllotmentDate", objBEL.firstAllotmentDate);
                cmd.Parameters.AddWithValue("@Allotmentreferencenumber", objBEL.Allotmentreferencenumber);
                cmd.Parameters.AddWithValue("@ChangeOfPlotRefNo", objBEL.ChangeOfPlotRefNo);
                cmd.Parameters.AddWithValue("@ChangeOfPlotRefDate", objBEL.ChangeOfPlotRefDate);
                cmd.Parameters.AddWithValue("@AdditionalChargesforplot", objBEL.AdditionalChargesforplot);
                cmd.Parameters.AddWithValue("@DeedafterChangeofPlot", objBEL.DeedafterChangeofPlot);
                cmd.Parameters.AddWithValue("@Newstatus", objBEL.Newstatus);
                cmd.Parameters.AddWithValue("@SectorID", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GstNo);
                cmd.Parameters.AddWithValue("@UdyogAadharNo", objBEL.UdyogAadharNo);
                cmd.Parameters.AddWithValue("@AadharNo", objBEL.AadharNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 ClearAllotteeShareHolder(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearAllotteeShareHolders]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveAllotteeShareHolderDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateAllotteeShareHolders]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveAllotteeDirectorsDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateAllotteeDirectors]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@DirectorName", objBEL.DirectorName);
                cmd.Parameters.AddWithValue("@Address", objBEL.DirectorAddress);
                cmd.Parameters.AddWithValue("@DinPan", objBEL.DirectorDinPan);
                cmd.Parameters.AddWithValue("@Phone", objBEL.DirectorPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.DirectorEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveAllotteeTrusteeDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateAllotteeTrustee]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TrusteeName", objBEL.TrusteeName);
                cmd.Parameters.AddWithValue("@Address", objBEL.TrusteeAddress);
                cmd.Parameters.AddWithValue("@Phone", objBEL.TrusteePhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.TrusteeEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveAllotteePatnersDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateAllotteePartners]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PartnerName", objBEL.PartnerName);
                cmd.Parameters.AddWithValue("@Address", objBEL.PartnerAddress);
                cmd.Parameters.AddWithValue("@PartnerPer", objBEL.PartnerPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.PartnerPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.PartnerEmail);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetPreServiceDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetPreServiceDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetHSCProductName(string HSC)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetHSCProductName", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@HSC", HSC);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetProductSubCategory(string HSC)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetProductSubCategory", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@HSC", HSC);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetProductCategory()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetProductCategory", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region "MD Appointment"
        public Int32 CloseCeoAppointment(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_CompleteCeoAppointment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.CaseID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 RejectCeoAppointment(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_RejectCeoAppointment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@Reason", objBEL.Comments);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 ApproveCeoAppointment(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_ApproveCeoAppointment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@date", objBEL.Date);
                cmd.Parameters.AddWithValue("@Time", objBEL.AppointmentTime);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetAppointmentRecieved(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAppointCEOAppReceived]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAppointmentApproved(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAppointCEOAppApproved]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAppointmentCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAppointCEOAppCompleted]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAppointmentRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAppointCEOAppRejected]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAppointeeDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAppointeeDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.IAID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllIADistrictWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAllIADistrictWise]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.IAID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllDistrictRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAllDistrictRecords]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 UpdateCeoAppointmentDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_updateceoappointmentdetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.IAID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet SaveCEOAppointmentDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("InsertCEOAppointmentDetails_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.ApplicantName);
                cmd.Parameters.AddWithValue("@Address", objBEL.Address);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNumber);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.emailID);
                cmd.Parameters.AddWithValue("@Purpose", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.DocPath);
                cmd.Parameters.AddWithValue("@DistrictName", objBEL.DistrictName);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }





        #endregion

        #region "Office Order Master"


        public DataSet GetOfficeOrdersPublic()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfOfficeOrdersPublic", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 DeleteOfficeOrder(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteOfficeOrder_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@OrderId", objBEL.OfficeOrderID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateOfficeOrderMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateOfficeOrders_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.OfficeOrderID);
                cmd.Parameters.AddWithValue("@OrderRefNo", objBEL.OrderRefNo);
                cmd.Parameters.AddWithValue("@IssueDate", objBEL.IssuedDate);
                cmd.Parameters.AddWithValue("@Subject", objBEL.SubjectOrder);
                cmd.Parameters.AddWithValue("@IssuedBy", objBEL.IssuedBy);
                cmd.Parameters.AddWithValue("@Section", objBEL.Section);
                cmd.Parameters.AddWithValue("@Description", objBEL.Description);
                cmd.Parameters.AddWithValue("@Public", objBEL.PublicPrivate);
                cmd.Parameters.AddWithValue("@FilePath", objBEL.OrderFilePath);
                cmd.Parameters.AddWithValue("@OrderCategory", objBEL.OrderCategory);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetOfficeOrdersList()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfOfficeOrders", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SaveOfficeOrder(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertOfficeOrders_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@OrderRefNo", objBEL.OrderRefNo);
                cmd.Parameters.AddWithValue("@IssueDate", objBEL.IssuedDate);
                cmd.Parameters.AddWithValue("@Subject", objBEL.SubjectOrder);
                cmd.Parameters.AddWithValue("@IssuedBy", objBEL.IssuedBy);
                cmd.Parameters.AddWithValue("@Section", objBEL.Section);
                cmd.Parameters.AddWithValue("@Description", objBEL.Description);
                cmd.Parameters.AddWithValue("@Public", objBEL.PublicPrivate);
                cmd.Parameters.AddWithValue("@FilePath", objBEL.OrderFilePath);
                cmd.Parameters.AddWithValue("@OrderCategory", objBEL.OrderCategory);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion

        #region "Facility Master"

        public DataSet GetTransferLevyCalculation(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetTransferLevyCalculation", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Case", objBEL.TLCaseType);
                cmd.Parameters.AddWithValue("@UAPT", objBEL.UnitUnderProductionMoreThenTwoYearStatus);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredAreaTransfer);
                cmd.Parameters.AddWithValue("@LevyType", objBEL.TLLevyType);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfFeeNMSWPReceived(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_NMSWPFeeReceivedAllApplication]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDatetime);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDatetime);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfFeeNMSWPReceivedGST(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_NMSWPFeeReceivedAllApplicationWithGST]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDatetime);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDatetime);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfTotalFeeReceived(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_TotalFeeReceivedAllApplication]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDatetime);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDatetime);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 ParkEntryInParkMasterInstant(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertInstantParkInMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@sectorid", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.PlotArea);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 PlotEntryInPlotMasterInstant(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertInstantPlotInMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@sectorid", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.PlotArea);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeleteFacilityFromMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteFacilityInMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.FacilityID);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet BindFacilityInTextBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAllFacilityRecord]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ID", objBEL.FacilityID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindFacilityInListbox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetAllFacility]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@secid", objBEL.SectorID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 FacilityEntryInFacilityMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertUpdateFacilityInFacilityMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@FacilityName", objBEL.FacilityName);
                cmd.Parameters.AddWithValue("@FacilityPlotNo", objBEL.FacilityPlotNo);
                cmd.Parameters.AddWithValue("@FacilityDesc", objBEL.FacilityDesc);
                cmd.Parameters.AddWithValue("@FacilityUniqueID", objBEL.FacilityUniqueID);
                cmd.Parameters.AddWithValue("@FacilityType", objBEL.FacilityType);
                cmd.Parameters.AddWithValue("@OperatedBy", objBEL.MaintainedBy);
                cmd.Parameters.AddWithValue("@LockStatus", objBEL.LockStatus);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Remark", objBEL.PlotRemark);
                cmd.Parameters.AddWithValue("@sectorid", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@Capacity", objBEL.FacilityCapacity);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion

        #region IAService Wise Reports

        public DataSet GetListOfAllIAApplictionsDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetBifiractedReportIAApplicant]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@ReportType", objBEL.ReportType);
                cmd.Parameters.AddWithValue("@ServiceTimeLines", objBEL.ServiceTimeLines);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet Get_IAService_ROList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPendencyReportIAServiceLevelWithRO", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAName);
                //cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                //cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Get_IAServiceList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceListwithRO", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@ServiceName", objBEL.ServiceTimeLines);
                //cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                //cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion



        #region IAServiceReports
        public DataSet Get_IAService_ReginalofficeList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPendencyReportReginalofficeWise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceTimelinesID", objBEL.serviceID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Get_IAService_ListNew(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPendencyReportIAServiceLevelWise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion



        #region  IAMaster

        public DataSet GetNGOCdistictRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spNGOCDistrictRecords", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetSubDistict(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetSubDistict", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistrictCode", objBEL.Distict);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetVillage(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetVillage", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@SubDistrictCode", objBEL.SubDistict);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        public DataSet SetServiceRequestIAServiceNMSWP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestForIAServices_SP_NMSWP]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@ControlID", objBEL.SWCControlID);
                cmd.Parameters.AddWithValue("@UnitID", objBEL.SWCUnitID);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.SWCServiceID);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.SWCRequestID);
                cmd.Parameters.AddWithValue("@EligibleRebate", objBEL.EligibleRebate);
                cmd.Parameters.AddWithValue("@AvailRebate", objBEL.AvailRebate);
                cmd.Parameters.AddWithValue("@TransferCondition", objBEL.TransferCondition);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GSTNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SetServiceRequestFinishIAServiceOutstandingDues(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestFinish_SP_IAService_Outstanding_Dues]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TraID", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #region "New Methods for Rastogi Service"

        public DataSet GetNewReconstitutionDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetReconstitutionDetailsSaved]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 ClearFirmConstitutionOfReconstitution(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_ClearReconstitutionFirmConstitution]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet UpdateReconstitutionDetailsNew(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateReconstitutionDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        #endregion



        #region  NiveshMitra Intrigration

        public DataSet GetapplicableChargesforReconstitutionNMSWP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesforReconstitutionNMSWP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetapplicableChargesforRecognitionNMSWP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesforRecognitionNMSWP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SetServiceRequestFinish_IAService(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SetServiceRequestFinish_IAService", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet ServiceApplicableChargeforSubletting(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TempServiceApplicableChargeforSubletting", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region  Plot Cancelation 


        public DataSet Get_NoticeWithAllotteeInternal(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Get_NoticeWithAllotteeInternal]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet PlotCancelationApplicantDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetPlotCancelationApplicantDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 InsertPlotCancelationDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertPlotCancelation_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationPlotCancelationDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@NoticID", objBEL.NoticeID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        public DataSet ViewSignedCopyNotice(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetSignedCopyofNotice", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NoticeID", objBEL.NoticeID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                return ds;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 InsertServiceCustomSetApplicantDataforNotice(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertServiceCustomSetApplicantDataforNotice]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@LeaseDeedDate", objBEL.LeaseDeedDate);
                cmd.Parameters.AddWithValue("@ClauseNumber", objBEL.Clause);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 UploadNotice(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadPlotNotic]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet Get_NoticeWithAllottee(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Get_NoticeWithAllottee]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet CreateNotice(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("CreateaNotice", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@AppointmentType", objBEL.AppointmentType);
                cmd.Parameters.AddWithValue("@AppointmentDesc", objBEL.AppointmentDesc);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.UserID);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet SetRequestIAPlotCancelation(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestForIAPlotCancelation_SP]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Email", objBEL.Email);
                cmd.Parameters.AddWithValue("@Mobile", objBEL.PhoneNumber);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SetServiceRequestFinishCancelationofplot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SetServiceRequestFinish_SP_Cancelationofplot", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region StartofProduction

        public DataSet GetAllotteeDetailsIAStartofProductionService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAService_Startofproduction]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 InsertStartofProductionDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertStartofProductionDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ProductionstartDate", objBEL.ProductionstartDate);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationPlotCancelationDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetStartofProductionDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetStartofProductionDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region  Subletting
        public Int32 InsertServiceCustomSetApplicantDataforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertServiceCustomSetApplicantDataforSubleting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@SublettingYear", objBEL.SublettingYear);
                cmd.Parameters.AddWithValue("@sublettingcharge", objBEL.totalSublettingCharge);
                cmd.Parameters.AddWithValue("@leasedeedDate", objBEL.leasedeeddate);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        #endregion

        #region Restorationofplot

        public Int32 InsertRestorationofplot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertRestorationDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@PaidStatus", objBEL.paidStatus);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationRestorationofplotDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetRestorationDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetRestorationDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllotteeDetailsIAServiceModule1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAServiceModule1]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 InsertServiceCustomSetApplicantDataforRestoration(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertServiceCustomSetApplicantDataforRestoration]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Restorationlevypercentage", objBEL.Restorationlevypercentage);
                cmd.Parameters.AddWithValue("@buildingPlanDate", objBEL.buildingDate);
                cmd.Parameters.AddWithValue("@ProductionStartDate", objBEL.ProductionDate);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region SurrenderofPlot

        public Int32 InsertSurrenderofPlot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertSurrenderDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@PaidStatus", objBEL.paidStatus);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationSurrenderofPlotDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetSurrenderDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetSurrenderDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        #region SublettingofPlot

        public Int32 InsertSublettingofPlot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertSublettingDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@PaidStatus", objBEL.paidStatus);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationSublettingDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetSublettingDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetSublettingDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveApplicantImageforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantImageforSubletting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveApplicantSignforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantSignforSubletting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateApplicantProjectDetailsforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SublettingApplicationProjectDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@IndustryType", objBEL.IndustryType);
                cmd.Parameters.AddWithValue("@EstimatedCostOfProject", objBEL.EstimatedCostOfProject);
                cmd.Parameters.AddWithValue("@EstimatedEmploymentGeneration", objBEL.EstimatedEmploymentGeneration);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@OpenAreaRequired", objBEL.OpenAreaRequired);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidqty", objBEL.IndustrialEffluentSolidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidComposition", objBEL.IndustrialEffluentSolidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidqty", objBEL.IndustrialEffluentLiquidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidComposition", objBEL.IndustrialEffluentLiquidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousqty", objBEL.IndustrialEffluentGaseousqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousComposition", objBEL.IndustrialEffluentGaseousComposition);
                cmd.Parameters.AddWithValue("@FumeGenerationStatus", objBEL.FumeGenerationStatus);
                cmd.Parameters.AddWithValue("@FumeQuantity", objBEL.FumeQuantity);
                cmd.Parameters.AddWithValue("@FumeNature", objBEL.FumeNature);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure1", objBEL.EffluentTreatmentMeasure1);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure2", objBEL.EffluentTreatmentMeasure2);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure3", objBEL.EffluentTreatmentMeasure3);
                cmd.Parameters.AddWithValue("@PowerReqInKW", objBEL.PowerReqInKW);
                cmd.Parameters.AddWithValue("@IAType", objBEL.IAType);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet UpdateApplicantDetailsforSubletting(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateSublettingRequestAllottee_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@AllotedPloltNo", objBEL.PlotNumber);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@serviceRequestNumber", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 ClearShareHolderforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearShareHoldersforsubletting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveShareHolderDetailsforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantShareHoldersforSubletting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveDirectorsDetailsforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantDirectorsforSubletting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@DirectorName", objBEL.DirectorName);
                cmd.Parameters.AddWithValue("@Address", objBEL.DirectorAddress);
                cmd.Parameters.AddWithValue("@DinPan", objBEL.DirectorDinPan);
                cmd.Parameters.AddWithValue("@Phone", objBEL.DirectorPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.DirectorEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveTrusteeDetailsforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantTrusteeforSubletting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TrusteeName", objBEL.TrusteeName);
                cmd.Parameters.AddWithValue("@Address", objBEL.TrusteeAddress);
                cmd.Parameters.AddWithValue("@Phone", objBEL.TrusteePhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.TrusteeEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SavePartnerDetailsforSubletting(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantPartnersforSubletting]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PartnerName", objBEL.PartnerName);
                cmd.Parameters.AddWithValue("@Address", objBEL.PartnerAddress);
                cmd.Parameters.AddWithValue("@PartnerPer", objBEL.PartnerPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.PartnerPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.PartnerEmail);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region Additional Unit

        public Int32 InsertAdditionalUnit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertAdditionalUnitDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@PaidStatus", objBEL.paidStatus);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationAdditionalUnitDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetAdditionalUnitDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetAdditionalUnitDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region hand over of lease deed

        public DataSet GethandoverofleasedeedDetailsIAService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GethandoverofleasedeedDetailsIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 InserthandoverofleasedeedtoleaseDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InserthandoverofleasedeedtoleaseDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region water Connection
        public Int32 InsertWaterConnectionDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertWaterconnectionDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Waterrequirement", objBEL.Waterrequirement);
                cmd.Parameters.AddWithValue("@TypeofConnection", objBEL.TypeofConnection);
                cmd.Parameters.AddWithValue("@WaterMeterSize", objBEL.WaterMeterSize);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region reconstitution
        public DataSet GetreconstitutionDetailsIAService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetReconstitutionDetailsIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllAllotteeDetailsFilledforReconstitution(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAllAllotteeDetailsforReconstitution", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet bindshareholdergried(string AlloteeId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetshareholderDetailsforReconstitution", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", AlloteeId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet bindDirectorsGrid(string AlloteeId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetDirectorsDetailforReconstitution", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", AlloteeId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet bindTrustee_details_grid(string AlloteeId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetTrustee_detailsforReconstitution", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", AlloteeId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet bindPartnershipFirmGrid(string AlloteeId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetPartnershipforReconstitution", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", AlloteeId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 InsertReconsitutionDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[ReconstitutionApplicationRequest_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NewAllottedID", objBEL.NewAllottedID);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.AllotteeName);
                cmd.Parameters.AddWithValue("@emailID", objBEL.emailID);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNo);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.Address);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.serviceID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 Insertshareholderdetails(string AlloteeId, string ShareholderName, decimal shareper, string Address, string phone, string email)
        {
            int result1;
            try
            {
                SqlCommand cmd = new SqlCommand("[ShareHolderDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@alloteeid", AlloteeId);
                cmd.Parameters.AddWithValue("@ShareholderName", ShareholderName);
                cmd.Parameters.AddWithValue("@Address", Address);
                cmd.Parameters.AddWithValue("@shareper", shareper);
                cmd.Parameters.AddWithValue("@phone", phone);
                cmd.Parameters.AddWithValue("@email", email);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result1 = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result1 > 0)
                {
                    return result1;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertDirectordetails(string AlloteeId, string DirectorName, string din_pan, string Address, string phone, string email)
        {
            int result1;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertDirectorDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", AlloteeId);
                cmd.Parameters.AddWithValue("@DirectorName", DirectorName);
                cmd.Parameters.AddWithValue("@Address", Address);
                cmd.Parameters.AddWithValue("@DIN_PAN", din_pan);
                cmd.Parameters.AddWithValue("@Phone", phone);
                cmd.Parameters.AddWithValue("@EmailId", email);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result1 = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result1 > 0)
                {
                    return result1;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertTrusteedetails(string AlloteeId, string TrusteeName, string Address, string phone, string email)
        {
            int result1;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertTrusteeDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", AlloteeId);
                cmd.Parameters.AddWithValue("@TrusteeName", TrusteeName);
                cmd.Parameters.AddWithValue("@Address", Address);
                cmd.Parameters.AddWithValue("@Phone", phone);
                cmd.Parameters.AddWithValue("@EmailId", email);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result1 = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result1 > 0)
                {
                    return result1;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertPartnerdetails(string AlloteeId, string PartnerName, decimal Partnershipper, string Address, string phone, string email)
        {
            int result1;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertPartnerDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", AlloteeId);
                cmd.Parameters.AddWithValue("@PartnerName", PartnerName);
                cmd.Parameters.AddWithValue("@Address", Address);
                cmd.Parameters.AddWithValue("@PartnershipPer", Partnershipper);
                cmd.Parameters.AddWithValue("@Phone", phone);
                cmd.Parameters.AddWithValue("@EmailId", email);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result1 = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result1 > 0)
                {
                    return result1;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion



        #region "Transfer Of Plot"
        public DataSet GetapplicableChargesforTransferPlotNMSWPPaid(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPaymentTransferPlotNMSWPPaid", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateAcknowledgementTransferNew(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateTransfreeAcknowledgement_New]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TLCaseType", objBEL.TLCaseType);
                cmd.Parameters.AddWithValue("@UAP", objBEL.UnitUnderProductionMoreThenTwoYearStatus);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredAreaTransfer);
                cmd.Parameters.AddWithValue("@TLLevyType", objBEL.TLLevyType);
                cmd.Parameters.AddWithValue("@HOApproval", objBEL.HOApproval);
                cmd.Parameters.AddWithValue("@TLCaseName", objBEL.TLCaseName);
                cmd.Parameters.AddWithValue("@SubdivisionDate", objBEL.SubdivisionDate);
                cmd.Parameters.AddWithValue("@DeathDate", objBEL.DeathDate);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetTransferApplicableCase()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetTransferApplicableCase", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicableChargesIAServicesNMSWPPay(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesforTransferPlotAmountNMSWP1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetapplicableChargesforTransferPlotNMSWP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesforTransferPlotNMSWP1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SaveSignTransferar(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveTransferarSign]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveImageTransferar(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveTransferarImage]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetapplicableChargesforTransferPlotAmount(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesforTransferPlotAmount", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetapplicableChargesforTransferPlot(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesforTransferPlot", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateAcknowledgementTransfer(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateTransfreeAcknowledgement]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UP", objBEL.UnitUnderProductionStatus);
                cmd.Parameters.AddWithValue("@UAP", objBEL.UnitUnderProductionMoreThenTwoYearStatus);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredAreaTransfer);
                cmd.Parameters.AddWithValue("@TLExemption", objBEL.TLExemption);
                cmd.Parameters.AddWithValue("@TLExemptionCase", objBEL.TLExemptionCase);
                cmd.Parameters.AddWithValue("@TLExemptionCaseName", objBEL.TLExemptionCaseName);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet CheckTransferPlotAcknowledgement(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_CheckTransferAcknowledgment]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateTransferarAccountsDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateTransferarAccountsDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PayeeName", objBEL.PayeeName);
                cmd.Parameters.AddWithValue("@BankName", objBEL.PayeeBankName);
                cmd.Parameters.AddWithValue("@AccountNo", objBEL.AccountNo);
                cmd.Parameters.AddWithValue("@IFSCCode", objBEL.IFSCCode);
                cmd.Parameters.AddWithValue("@BranchName", objBEL.BranchName);
                cmd.Parameters.AddWithValue("@BranchAddress", objBEL.BranchAddress);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateTransfreeProjectDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateTransfreeProjectDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@IndustryType", objBEL.IndustryType);
                cmd.Parameters.AddWithValue("@EstimatedCostOfProject", objBEL.EstimatedCostOfProject);
                cmd.Parameters.AddWithValue("@EstimatedEmploymentGeneration", objBEL.EstimatedEmploymentGeneration);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@OpenAreaRequired", objBEL.OpenAreaRequired);
                cmd.Parameters.AddWithValue("@LandDetails", objBEL.LandDetails);
                cmd.Parameters.AddWithValue("@BuildingDetails", objBEL.BuildingDetails);
                cmd.Parameters.AddWithValue("@MachineryEquipmentsDetails", objBEL.MachineryEquipmentsDetails);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidqty", objBEL.IndustrialEffluentSolidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidComposition", objBEL.IndustrialEffluentSolidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidqty", objBEL.IndustrialEffluentLiquidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidComposition", objBEL.IndustrialEffluentLiquidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousqty", objBEL.IndustrialEffluentGaseousqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousComposition", objBEL.IndustrialEffluentGaseousComposition);
                cmd.Parameters.AddWithValue("@FumeGenerationStatus", objBEL.FumeGenerationStatus);
                cmd.Parameters.AddWithValue("@FumeQuantity", objBEL.FumeQuantity);
                cmd.Parameters.AddWithValue("@FumeNature", objBEL.FumeNature);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure1", objBEL.EffluentTreatmentMeasure1);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure2", objBEL.EffluentTreatmentMeasure2);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure3", objBEL.EffluentTreatmentMeasure3);
                cmd.Parameters.AddWithValue("@PowerReqInKW", objBEL.PowerReqInKW);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear1", objBEL.TelephoneReqFirstYear1);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear2", objBEL.TelephoneReqFirstYear2);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate1", objBEL.TelephoneReqUltimate1);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate2", objBEL.TelephoneReqUltimate2);
                cmd.Parameters.AddWithValue("@ApplicantPriorityStatus", objBEL.ApplicantPriorityStatus);
                cmd.Parameters.AddWithValue("@ApplicantPrioritySpecification", objBEL.ApplicantPrioritySpecification);
                cmd.Parameters.AddWithValue("@OtherFixedAssets", objBEL.OtherFixedAssets);
                cmd.Parameters.AddWithValue("@OtherExpenses", objBEL.OtherExpenses);
                cmd.Parameters.AddWithValue("@projectstartmonths", objBEL.projectstartmonths);
                cmd.Parameters.AddWithValue("@workexperience", objBEL.workexperience);
                cmd.Parameters.AddWithValue("@NetTurnOver", objBEL.NetTurnOver);
                cmd.Parameters.AddWithValue("@ExpansionOfLand", objBEL.ExpansionOfLand);
                cmd.Parameters.AddWithValue("@ExportOriented", objBEL.ExportOriented);
                cmd.Parameters.AddWithValue("@IAType", objBEL.IAType);
                cmd.Parameters.AddWithValue("@IACategory", objBEL.IAcategory);
                cmd.Parameters.AddWithValue("@ExisPlotNo", objBEL.ExistingPlotNo);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.ExistingAllotteeName);
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@NetWorth", objBEL.Networth);
                if (objBEL.AllotmentDate.ToString().Length > 0)
                {
                    cmd.Parameters.AddWithValue("@AllotmentDate", objBEL.AllotmentDate);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@AllotmentDate", DBNull.Value);
                }
                cmd.Parameters.AddWithValue("@PropProduct", objBEL.ProductManufactured);
                cmd.Parameters.AddWithValue("@ETPReq", objBEL.EtpRequired);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveApplicantSignTransfree(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantSignTransfree]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveApplicantImageTransfree(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantImageTransfree]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SavePartnerDetailsTransfree(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantPartnersTransfree]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PartnerName", objBEL.PartnerName);
                cmd.Parameters.AddWithValue("@Address", objBEL.PartnerAddress);
                cmd.Parameters.AddWithValue("@PartnerPer", objBEL.PartnerPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.PartnerPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.PartnerEmail);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveTrusteeDetailsTransfree(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantTrusteeTransfree]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TrusteeName", objBEL.TrusteeName);
                cmd.Parameters.AddWithValue("@Address", objBEL.TrusteeAddress);
                cmd.Parameters.AddWithValue("@Phone", objBEL.TrusteePhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.TrusteeEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveDirectorsDetailsTransfree(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantDirectorsTransfree]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@DirectorName", objBEL.DirectorName);
                cmd.Parameters.AddWithValue("@Address", objBEL.DirectorAddress);
                cmd.Parameters.AddWithValue("@DinPan", objBEL.DirectorDinPan);
                cmd.Parameters.AddWithValue("@Phone", objBEL.DirectorPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.DirectorEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveShareHolderDetailsTransfree(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantShareHoldersTransfree]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 ClearFirmConstitution(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_TransfreeFirmConstitution]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet UpdateTransfreeDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateTransfreeDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeName",        objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID",             objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo",             objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@ApplicationAdress1",  objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy",           objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress",    objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone",      objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail",      objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName",         objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution",    objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo",               objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo",               objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ServiceReqNo",        objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@GSTNo" ,              objBEL.GSTNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetTransfreeBasicDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetTransfreeBasicDetailsSaved]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetTransfreeDocuments(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetTransfreeDocuments]", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetTransfreeDocumentsView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetTransferarDocumentDetail]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetTransferarDocumentsView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetTransferarDocumentDetail]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetTransferarDocuments(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetTransferarDocuments]", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveTransferarChecklistDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadTransferarChecklistDocuments]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region "NMSWP"

        public Int32 FinalSubmissionWithoutFee(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_finalsubmissionWithoutFee]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetLeaseDeedPaymentDetailAfterTransactionNMSWP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLeaseDeedPAymentDetailAfterTransactionNMSWP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetTransactionDetailsNMSWP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetNMSWPTransactionDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetTransactionDetailsNMSWPLAW(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetNMSWPTransactionDetailsLAW", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetTransactionDetailsNMSWPPIP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetNMSWPTransactionDetailsPIP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 SaveTransactionDetailsNMSWPLAW(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[CreateTransactionDataBeforeGetewayNMSWPLAW]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NMControlID", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@NMUnitID", objBEL.UnitId);
                cmd.Parameters.AddWithValue("@NMServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@fee", objBEL.TEFFees.ToString());                 
                cmd.Parameters.AddWithValue("@NMRequestID", objBEL.MRequestID);
                cmd.Parameters.Add("flags",SqlDbType.BigInt).Direction=ParameterDirection.Output;
                 
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        public Int32 SaveTransactionDetailsNMSWPPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[CreateTransactionDataBeforeGetewayNMSWPPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NMControlID", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@NMUnitID", objBEL.UnitId);
                cmd.Parameters.AddWithValue("@NMServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@fee", objBEL.TEFFees.ToString());
                cmd.Parameters.AddWithValue("@NMRequestID", objBEL.MRequestID);
                //cmd.Parameters.Add("flags", SqlDbType.BigInt).Direction = ParameterDirection.Output;

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveTransactionDetailsNMSWPPIPCom(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[CreateTransactionDataBeforeGetewayNMSWPPIPCom]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NMControlID", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@NMUnitID", objBEL.UnitId);
                cmd.Parameters.AddWithValue("@NMServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@fee", objBEL.TEFFees.ToString());
                cmd.Parameters.AddWithValue("@NMRequestID", objBEL.MRequestID);
                //cmd.Parameters.Add("flags", SqlDbType.BigInt).Direction = ParameterDirection.Output;

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateTransactionDetailsNMSWPPIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateTransactionDataBeforeGetewayNMSWPPIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NMControlID", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@NMUnitID", objBEL.UnitId);
                cmd.Parameters.AddWithValue("@NMServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@fee", objBEL.TEFFees.ToString());
                //cmd.Parameters.AddWithValue("@Fee_Status", objBEL.TEFFeeStatus.ToString());
                cmd.Parameters.AddWithValue("@NMRequestID", objBEL.MRequestID);
                //cmd.Parameters.Add("flags", SqlDbType.BigInt).Direction = ParameterDirection.Output;

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        #region "IA Service NMSWP"
        public DataSet VerifyOTPIAService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("sp_chechOTPIAService", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@OTP", objBEL.OTP);
                cmd.Parameters.AddWithValue("@ControlID", objBEL.SWCControlID);
                cmd.Parameters.AddWithValue("@UnitID", objBEL.SWCUnitID);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.SWCServiceID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public Int32 SaveOTPIAServicesNMSWP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveOTPIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@USERID", objBEL.UserId);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.emailID);
                cmd.Parameters.AddWithValue("@OTP", objBEL.OTP);
                cmd.Parameters.AddWithValue("@ControlID", objBEL.SWCControlID);
                cmd.Parameters.AddWithValue("@UnitID", objBEL.SWCUnitID);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.SWCServiceID);




                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion


        #region IAServiceAccountDetails

        public DataSet GetgridServiceTracker(String ServiceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_TrackServiceIA", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfIAServiceAccountDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfIAServiceAccountDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfIAServiceAccountDetailsCleared(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfIAServiceAccountDetailsCleared]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 UpdateApplicationAfterAccountClearenceIAService(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateAllotmentApplicationAfterAccountsClearenceIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Service_Request_No", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TransactionID", objBEL.TranID);
                cmd.Parameters.AddWithValue("@ConfirmAmount", objBEL.PayTrans_trn_amt);
                cmd.Parameters.AddWithValue("@ConfirmDate", objBEL.PayDate);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion



        #region Letter Upload
        public DataSet GetgridLetterUpload(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetgridLetterUpload", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Id", objBEL.ID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet InsertletteruploadDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[sp_INSERT_letter]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.POAIAID);
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.serviceID);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocType", objBEL.Doctype);
                cmd.Parameters.AddWithValue("@SignedDocument", objBEL.POAPhoto);
                cmd.Parameters.AddWithValue("@SignedDocumentContent", objBEL.POAPhotoContent);
                cmd.Parameters.AddWithValue("@SignedMap", objBEL.POASign);
                cmd.Parameters.AddWithValue("@SignedMapContent", objBEL.POASignContent);
                cmd.Parameters.AddWithValue("@UploadedBy", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet UpdateletteruploadDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[sp_UPDATE_letter]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@SignedDocument", objBEL.POAPhoto);
                cmd.Parameters.AddWithValue("@SignedDocumentContent", objBEL.POAPhotoContent);
                cmd.Parameters.AddWithValue("@SignedMap", objBEL.POASign);
                cmd.Parameters.AddWithValue("@SignedMapContent", objBEL.POASignContent);
                cmd.Parameters.AddWithValue("@UploadedBy", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        #endregion


        #region "District Update in NMSWP"
        public DataSet GetAllotmentletterDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetAllotmentletterDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentletterNumber", objBEL.AllotmentLetterno
                    );
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public Int32 UpdateDistrictInNMSWPInDB(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UPdateDistrictNMSWPInDB]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion


        #region "QPR"


        public Int32 insertQPR(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertQPR]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@QuarterEnd", objBEL.QuarterEndDate);
                cmd.Parameters.AddWithValue("@RegionID", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAName);
                cmd.Parameters.AddWithValue("@LandType", objBEL.QPRLandtype);
                cmd.Parameters.AddWithValue("@Category", objBEL.QPRCategory);
                cmd.Parameters.AddWithValue("@TotalLandAcquired", objBEL.TotalLandAcquired);
                cmd.Parameters.AddWithValue("@TotlLandForAllotIncDevPlot", objBEL.TotalLandforAllotmentPlots);
                cmd.Parameters.AddWithValue("@TotlLandForAllotIncDevArea", objBEL.TotalLandforAllotmentArea);
                cmd.Parameters.AddWithValue("@AllotteedLandIncUnDevUnit", objBEL.AllotedLandunit);
                cmd.Parameters.AddWithValue("@AllotteedLandIncUnDevPlot", objBEL.AllotedLandPlot);
                cmd.Parameters.AddWithValue("@AllotteedLandIncUnDevArea", objBEL.AllotedLandArea);
                cmd.Parameters.AddWithValue("@LandNotAvlDueToLitigationPlot", objBEL.LandNotAvlDueToLitigationPlot);
                cmd.Parameters.AddWithValue("@LandNotAvlDueToLitigationArea", objBEL.LandNotAvlDueToLitigationArea);
                cmd.Parameters.AddWithValue("@BalLandForAllotmentPlot", objBEL.BalLandForAllotmentPlot);
                cmd.Parameters.AddWithValue("@BalLandForAllotmentArea", objBEL.BalLandForAllotmentArea);
                cmd.Parameters.AddWithValue("@UnderConstructionUnit", objBEL.UnderConstructionUnit);
                cmd.Parameters.AddWithValue("@UnderConstructionArea", objBEL.UnderConstructionArea);
                cmd.Parameters.AddWithValue("@ConstructedFunctionalUnit", objBEL.ConstructedFunctionalUnit);
                cmd.Parameters.AddWithValue("@ConstructedFunctionalArea", objBEL.ConstructedFunctionalArea);
                cmd.Parameters.AddWithValue("@SickClosedUnit", objBEL.SickClosedUnit);
                cmd.Parameters.AddWithValue("@SickClosedArea", objBEL.SickClosedArea);
                cmd.Parameters.AddWithValue("@NotStartedEvenconstructionUnit", objBEL.NotStartedEvenconstructionUnit);
                cmd.Parameters.AddWithValue("@NotStartedEvenconstructionArea", objBEL.NotStartedEvenconstructionArea);
                cmd.Parameters.AddWithValue("@RatePerSqm", objBEL.IARatePerSqmt);
                cmd.Parameters.AddWithValue("@EnteredBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Year", objBEL.QPRyear);
                // cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 UpdateQPR(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateQPR]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.QPRID);
                cmd.Parameters.AddWithValue("@QuarterEnd", objBEL.QuarterEndDate);
                cmd.Parameters.AddWithValue("@RegionID", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAName);
                cmd.Parameters.AddWithValue("@LandType", objBEL.QPRLandtype);
                cmd.Parameters.AddWithValue("@Category", objBEL.QPRCategory);
                cmd.Parameters.AddWithValue("@TotalLandAcquired", objBEL.TotalLandAcquired);
                cmd.Parameters.AddWithValue("@TotlLandForAllotIncDevPlot", objBEL.TotalLandforAllotmentPlots);
                cmd.Parameters.AddWithValue("@TotlLandForAllotIncDevArea", objBEL.TotalLandforAllotmentArea);
                cmd.Parameters.AddWithValue("@AllotteedLandIncUnDevUnit", objBEL.AllotedLandunit);
                cmd.Parameters.AddWithValue("@AllotteedLandIncUnDevPlot", objBEL.AllotedLandPlot);
                cmd.Parameters.AddWithValue("@AllotteedLandIncUnDevArea", objBEL.AllotedLandArea);
                cmd.Parameters.AddWithValue("@LandNotAvlDueToLitigationPlot", objBEL.LandNotAvlDueToLitigationPlot);
                cmd.Parameters.AddWithValue("@LandNotAvlDueToLitigationArea", objBEL.LandNotAvlDueToLitigationArea);
                cmd.Parameters.AddWithValue("@BalLandForAllotmentPlot", objBEL.BalLandForAllotmentPlot);
                cmd.Parameters.AddWithValue("@BalLandForAllotmentArea", objBEL.BalLandForAllotmentArea);
                cmd.Parameters.AddWithValue("@UnderConstructionUnit", objBEL.UnderConstructionUnit);
                cmd.Parameters.AddWithValue("@UnderConstructionArea", objBEL.UnderConstructionArea);
                cmd.Parameters.AddWithValue("@ConstructedFunctionalUnit", objBEL.ConstructedFunctionalUnit);
                cmd.Parameters.AddWithValue("@ConstructedFunctionalArea", objBEL.ConstructedFunctionalArea);
                cmd.Parameters.AddWithValue("@SickClosedUnit", objBEL.SickClosedUnit);
                cmd.Parameters.AddWithValue("@SickClosedArea", objBEL.SickClosedArea);
                cmd.Parameters.AddWithValue("@NotStartedEvenconstructionUnit", objBEL.NotStartedEvenconstructionUnit);
                cmd.Parameters.AddWithValue("@NotStartedEvenconstructionArea", objBEL.NotStartedEvenconstructionArea);
                cmd.Parameters.AddWithValue("@RatePerSqm", objBEL.IARatePerSqmt);
                cmd.Parameters.AddWithValue("@ModifiedBy", objBEL.ModifiedBy);
                cmd.Parameters.AddWithValue("@Year", objBEL.QPRyear);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetEditQPRDetails(string id)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetEditQPRdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", id);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public Int32 Delete_QPRdetals(string id)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteQPRDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", id);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion


        #region "GEtdemandNoteOFAllottee"
        public DataSet GEtdemandNoteOFAllottee(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("sp_generatedemandforallottees", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeeID", objBEL.AllotteeID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region  "Plot Availability by manish rastogi"



        public DataSet GetgridforLandoffred1(int id)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetDocumentlfromLAP1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandAcquisitionID", id);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetDistrictNameRecords(int DistrictID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spIARecordsforfindaplot", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistrictID", DistrictID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Getgridplotavailability(int IA)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetplotavailabledetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@Region", Region);
                cmd.Parameters.AddWithValue("@IAID", IA);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet Getgridplotareawise(int IA, int AreaID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetplotSearchareawise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AreaID", AreaID);
                cmd.Parameters.AddWithValue("@IAID", IA);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetgridLASforviewmore(string ID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAssessmentviewmore_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", ID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet getSubDistrictRecords(int DistrictID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCensus_SubDistrict", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistrictID", DistrictID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet InsertLandAssessmentDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[InsertLandAssessmentDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@DistrictID", objBEL.LandDistrictID);
                cmd.Parameters.AddWithValue("@SubDistrictID", objBEL.LandSubDistrict);
                cmd.Parameters.AddWithValue("@NameofInvestor", objBEL.LandNameofInvestor);
                cmd.Parameters.AddWithValue("@Address", objBEL.LandAddressDetails);
                cmd.Parameters.AddWithValue("@Country", objBEL.LandCountry);
                cmd.Parameters.AddWithValue("@State", objBEL.LandState);
                cmd.Parameters.AddWithValue("@City", objBEL.LandCity);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.LandMobileNo);
                cmd.Parameters.AddWithValue("@Mail", objBEL.LandMail);
                cmd.Parameters.AddWithValue("@AddressofPresentunit", objBEL.LandAddressofPresentunit);
                cmd.Parameters.AddWithValue("@AnnualTurnover", objBEL.LandAnnualTurnover);
                cmd.Parameters.AddWithValue("@Plotareaofunit", objBEL.LandPlotareaofunit);
                cmd.Parameters.AddWithValue("@FSIConsumed", objBEL.LandFSIConsumed);
                cmd.Parameters.AddWithValue("@WaterConsumed", objBEL.LandWaterConsumed);
                cmd.Parameters.AddWithValue("@EmploymentGenerated", objBEL.LandEmploymentGenerated);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.LandRemarks);
                cmd.Parameters.AddWithValue("@NatureofProject", objBEL.LandNatureofProject);
                cmd.Parameters.AddWithValue("@RawMaterial", objBEL.LandRawMaterial);
                cmd.Parameters.AddWithValue("@ParposedProduct", objBEL.LandParposedProduct);
                cmd.Parameters.AddWithValue("@FinanceAgreement", objBEL.LandFinanceAgreement);
                cmd.Parameters.AddWithValue("@TotalProjectCost", objBEL.LandTotalProjectCost);
                cmd.Parameters.AddWithValue("@BuiltupArea", objBEL.LandBuiltupArea);
                cmd.Parameters.AddWithValue("@Waterrequirement", objBEL.LandWaterrequirement);
                cmd.Parameters.AddWithValue("@TotalNoofEmployees", objBEL.LandTotalNoofEmployees);
                cmd.Parameters.AddWithValue("@IndustryType", objBEL.LandIndustryType);
                cmd.Parameters.AddWithValue("@ManufacturingActivity", objBEL.LandManufacturingActivity);
                cmd.Parameters.AddWithValue("@PreferredLocation", objBEL.LandPreferredLocation);
                cmd.Parameters.AddWithValue("@RequiredLandSize", objBEL.LandRequiredLandSize);
                cmd.Parameters.AddWithValue("@isActive", 1);
                cmd.Parameters.AddWithValue("@isDeleted", 0);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetgridLAD(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAssessmentview_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetgridforLAD(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAssessmentSearch_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@search", objBEL.searchText);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Getgridforviewmore(string ID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAcquisitionDetailsviewmore_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", ID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet InsertLandAcquisitionDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[LandAcquisitionDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NameOfLandOwner", objBEL.LANameOfLandOwner);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.LAMobileNo);
                cmd.Parameters.AddWithValue("@Email", objBEL.LAEmail);
                cmd.Parameters.AddWithValue("@DistrictID", objBEL.LADistrictID);
                cmd.Parameters.AddWithValue("@SubDistrict", objBEL.LASubDistrict);
                cmd.Parameters.AddWithValue("@LandownerType", objBEL.LAlandownerType);
                cmd.Parameters.AddWithValue("@LandType", objBEL.LAlandType);
                cmd.Parameters.AddWithValue("@Name", objBEL.LAName);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.LAContentType);
                cmd.Parameters.AddWithValue("@DocumentsMap", objBEL.LADocumentsMap);
                cmd.Parameters.AddWithValue("@SignedName", objBEL.LASignedConsentlatterName);
                cmd.Parameters.AddWithValue("@SignedContentType", objBEL.LASignedConsentlatterContentType);
                cmd.Parameters.AddWithValue("@SignedDocuments", objBEL.LASignedConsentlatterDocumentsMap);
                cmd.Parameters.AddWithValue("@TotalLand", objBEL.LATotalLand);
                cmd.Parameters.AddWithValue("@RoadConnectivity", objBEL.LARoadConnectivity);
                cmd.Parameters.AddWithValue("@Roadwidth", objBEL.LARoadwidth);
                cmd.Parameters.AddWithValue("@Distancefromnearestexpressway", objBEL.LADistancefromnearestexpressway);
                cmd.Parameters.AddWithValue("@NearestRailwayStationName", objBEL.LANearestRailwayStationName);
                cmd.Parameters.AddWithValue("@DistancefromnearestRailwayStation", objBEL.LADistancefromnearestRailwayStation);
                cmd.Parameters.AddWithValue("@surcefreshwater", objBEL.LAsurcefreshwater);
                cmd.Parameters.AddWithValue("@Depthofsourcewater", objBEL.LAdepthofsourcewater);
                cmd.Parameters.AddWithValue("@Circlerateperhectare", objBEL.LACirclerateperhectare);
                cmd.Parameters.AddWithValue("@Proposeofferedrateperhectare", objBEL.LAProposeofferedrateperhectare);
                cmd.Parameters.AddWithValue("@Alllandowners", objBEL.LAalllandowners);
                cmd.Parameters.AddWithValue("@CreatedBy", "User");
                cmd.Parameters.AddWithValue("@isActive", "1");
                cmd.Parameters.AddWithValue("@isDeleted", "0");


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 InsertLanddetails(int LandAcquisitionID, string Village, string KhataNo, string KhatedarName, string FatherHusbandName, string Address, string GataNo, string GataArea)
        {
            int result1;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertLandDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandAcquisitionID", LandAcquisitionID);
                cmd.Parameters.AddWithValue("@Village", Village);
                cmd.Parameters.AddWithValue("@KhataNo", KhataNo);
                cmd.Parameters.AddWithValue("@KhatedarName", KhatedarName);
                cmd.Parameters.AddWithValue("@FatherHusbandName", FatherHusbandName);
                cmd.Parameters.AddWithValue("@Address", Address);
                cmd.Parameters.AddWithValue("@GataNo", GataNo);
                cmd.Parameters.AddWithValue("@GataArea", GataArea);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result1 = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result1 > 0)
                {
                    return result1;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetgridLAP()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAcquisitionDetailsview_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetgridforSearch(string search)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAcquisitionSearchDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@search", search);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetgridForView(string ID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("LandAcquisitionRepeterview_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", ID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetgridforLandoffred(int id)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetDocumentlfromLAP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandAcquisitionID", id);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        #endregion



        #region "BP Resubmision"

        public DataSet VerifyOTPBPResubmission(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("sp_chechOTpBPResubmission", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@USerID", objBEL.UserID);
                cmd.Parameters.AddWithValue("@OTP", objBEL.OTP);
                cmd.Parameters.AddWithValue("@OTPFor", objBEL.OTPFor);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 SaveOTPBPResubmission(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveOTPBPResubmission]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@USERID", objBEL.UserId);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.emailID);
                cmd.Parameters.AddWithValue("@OTP", objBEL.OTP);
                cmd.Parameters.AddWithValue("@RefNO", objBEL.ReferenceNumber);
                cmd.Parameters.AddWithValue("@OTPFor", objBEL.OTPFor);





                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetIADistrictWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetIANameDistrictWise]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DistrictID", objBEL.districtID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SetServiceRequestFinishBPResubmission(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestFinish_SP_BPResubmission]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateBPResubmission(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateResubmissionBP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ControlID", objBEL.SWCControlID);
                cmd.Parameters.AddWithValue("@UnitID", objBEL.SWCUnitID);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.SWCServiceID);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.SWCRequestID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion
        #region POA

        public DataSet GetgridPOA()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetPOAdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet InsertPOADetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[sp_INSERT_POA]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@pPOAName", objBEL.POAName);
                cmd.Parameters.AddWithValue("@pPOAEmailID", objBEL.POAEmailID);
                cmd.Parameters.AddWithValue("@pPOAMobileNo", objBEL.POAMobileNo);
                cmd.Parameters.AddWithValue("@pPOARegion", objBEL.POARegion);
                cmd.Parameters.AddWithValue("@pPOAIAID", objBEL.POAIAID);
                cmd.Parameters.AddWithValue("@pPOAPhoto", objBEL.POAPhoto);
                cmd.Parameters.AddWithValue("@pPOAPhotoContent", objBEL.POAPhotoContent);
                cmd.Parameters.AddWithValue("@pPOAPhotoName", objBEL.POAPhotoName);
                cmd.Parameters.AddWithValue("@pPOASign", objBEL.POASign);
                cmd.Parameters.AddWithValue("@pPOASignContent", objBEL.POASignContent);
                cmd.Parameters.AddWithValue("@pPOASignName", objBEL.POASignName);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet UpdatePOADetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[sp_UPDATE_POA]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ID", objBEL.PID);
                cmd.Parameters.AddWithValue("@pPOAName", objBEL.POAName);
                cmd.Parameters.AddWithValue("@pPOAEmailID", objBEL.POAEmailID);
                cmd.Parameters.AddWithValue("@pPOAMobileNo", objBEL.POAMobileNo);
                cmd.Parameters.AddWithValue("@pPOARegion", objBEL.POARegion);
                cmd.Parameters.AddWithValue("@pPOAIAID", objBEL.POAIAID);
                cmd.Parameters.AddWithValue("@pPOAPhoto", objBEL.POAPhoto);
                cmd.Parameters.AddWithValue("@pPOAPhotoContent", objBEL.POAPhotoContent);
                cmd.Parameters.AddWithValue("@pPOAPhotoName", objBEL.POAPhotoName);
                cmd.Parameters.AddWithValue("@pPOASign", objBEL.POASign);
                cmd.Parameters.AddWithValue("@pPOASignContent", objBEL.POASignContent);
                cmd.Parameters.AddWithValue("@pPOASignName", objBEL.POASignName);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 Delete_POAdetals(string id)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeletePOADetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", id);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetEditDetails(string id)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetEditPOAdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", id);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetgridPOAforSearch(string search)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetPOAdetailsforsearch", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@search", search);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion



        #region IAMaster Updated

        public DataSet GetReleventDocView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetReleventDocView]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 UploadReleventDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UploadReleventDocument", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                if (objBEL.Uploadfile == null)
                {
                    cmd.Parameters.Add("@Documents", System.Data.SqlDbType.VarBinary).Value = DBNull.Value;

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                }
                cmd.Parameters.AddWithValue("@MasterID", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        #endregion


        #region "Refund Clearence"
        public DataSet GetRefundAccountDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetRefundAccountDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetListOfApplicationRefundCleared(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetApplicationsForRefunded]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateApplicationAfterRefundClearence(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateRefundDetailsAfterRefundClearence]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Service_Request_No", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TransactionID", objBEL.TranID);
                cmd.Parameters.AddWithValue("@RefundDate", objBEL.PayDate);
                cmd.Parameters.AddWithValue("@RefundRefNo", objBEL.ReferenceNumber);
                cmd.Parameters.AddWithValue("@RefundMode", objBEL.PayMode);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetListOfApplicationForRefundClearance(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetApplicationsForRefund]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region TEFApplication

        public DataSet ListOfPlotForReservationMoney(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ListOfPlotsForReservationMoney", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetIndustrialAreaDetailSelected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_GetIndustrialAreaDetailSelected]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetDocumentChecklistTimeextenstion(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetServiceChecklists_TimeExtenstion]", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@Bit", objBEL.FirmType);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetStatusForApproval_TEF(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("[GetStatusForApproval_TEF]", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfTEFInBox_AutoApproval(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationOfTEFInBox_AutoApproval", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public Int32 UploadSignedCopyLetter_TEF(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadSignedCopyOfLetter_TEF]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocType", objBEL.Doctype);
                cmd.Parameters.AddWithValue("@Flag", objBEL.Flag);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet ViewTEFApprovalLetter(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetTEFperiod", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@ServiceRefNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllAllotteeDetailsforTEF(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllAllotteeDetailsforTEF", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.AllotmentNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 DeleteTEFDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteTEFDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 100;

                cmd.Parameters.AddWithValue("@TEFID", objBEL.TEFID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetApplicationOfTEFCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForTEFCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfTEFUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForTEFUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 InsertServiceCustomSetApplicantDataforTEF(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertServiceCustomSetApplicantDataforTEF]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TEFDate", objBEL.TEFApprovalDate);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 TransferApplicationTEF(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferApplicationTEF", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser", objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@Status", objBEL.RecStatus);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet Get_Notesheet_of_TEFapplication(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Notesheet_of_TEFApplication]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPaymentDetailTransactionWiseTEF(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ServiceApplicableChargeIAService_TEFView", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                //cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SetServiceRequestFinishReservationMoney(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestFinish_ReservationMoney]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TraID", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SetServiceRequestFinishTEF(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SetServiceRequestFinish_SP_TEF", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TraID", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetApplicantTEFDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicantTEFDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 ClearTimeExtensionDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_ClearTimeExtensionDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertAllotteeTEFDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertApplicantTEFDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 100;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TEFRefferenceNumber", objBEL.TEFRefferenceNumber);
                cmd.Parameters.AddWithValue("@TEFApprovalDate", objBEL.TEFApprovalDate);
                cmd.Parameters.AddWithValue("@TEFPeriod", objBEL.TEFPeriod);
                cmd.Parameters.AddWithValue("@TEFFees", objBEL.TEFFees);
                cmd.Parameters.AddWithValue("@isActive", objBEL.IsActive);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetTEFPaymentDetailAfterTransaction(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetTEFPayDetailAfterTransaction", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfTEFInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForTEFInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetChargesforTEF(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TEFServiceApplicableFees", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllotteeDetailsTEFAll(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDetailsTEFAll", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet SetServiceRequestTEF(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("[SetServiceRequestForTEF_SP]", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);

                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);

                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);

                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                cmd.Parameters.AddWithValue("@ApplicationRemark", objBEL.ApplicationDescription);

                cmd.Parameters.AddWithValue("@AllotmentLetterno", objBEL.AllotmentLetterno);

                cmd.Parameters.AddWithValue("@Address", objBEL.Address);

                cmd.Parameters.AddWithValue("@Allotteename", objBEL.Allotteename);

                cmd.Parameters.AddWithValue("@plotSize", objBEL.plotSize);

                cmd.Parameters.AddWithValue("@Email", objBEL.Email);

                cmd.Parameters.AddWithValue("@PhoneNumber", objBEL.PhoneNumber);

                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);

                cmd.Parameters.AddWithValue("@TEFTimeperiod", objBEL.TEFTimeperiod);

                cmd.Parameters.AddWithValue("@TEFStatus", objBEL.TEFStatus);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }

        public DataSet GetapplicableChargesforTEF(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesforTEF", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                //cmd.Parameters.AddWithValue("@IAID", objBEL.industrialAreaID);
                //cmd.Parameters.AddWithValue("@PlotSize", objBEL.PlotArea);
                //cmd.Parameters.AddWithValue("@TEFPeriod", objBEL.TEFTimeperiod);
                //cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet TEFPeriodBinding(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetTEFPeriod", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion


        #region Timeextensionfee

        public DataSet GetTimeextensionDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetTimeextensionDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAllotteeDetailsIATimeextensionService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAService_Timeextension]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 InsertTimeextensionfeeDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertTimeextensionfeeDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TEFTimeperiod", objBEL.TEFTimeperiod);
                cmd.Parameters.AddWithValue("@TEFStatus", objBEL.TEFStatus);
                cmd.Parameters.AddWithValue("@description", objBEL.ApplicationDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@freetimeextension", objBEL.FreeStatus);
                cmd.Parameters.AddWithValue("@applicableonAllotmentletter", objBEL.applicableonAllotmentletter);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion




        #region  Transfer of Lease deed to Financial Institution

        public DataSet GettransferofleasedeedDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GettransferofleasedeedDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 InserttransferofleasedeedDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InserttransferofleasedeedDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PaidStatus", objBEL.paidStatus);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@leasedeedLetterNo", objBEL.LetterNo);
                cmd.Parameters.AddWithValue("@leasedeedLetterDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@leasedeedLetterFrom", objBEL.LetterFromleasedeed);
                cmd.Parameters.AddWithValue("@leasedeedLetterAddress", objBEL.BankAddress);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNo);
                cmd.Parameters.AddWithValue("@emailid", objBEL.emailids);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                cmd.Parameters.AddWithValue("@PremimAmount", objBEL.PremimAmount);
                cmd.Parameters.AddWithValue("@InterestAmount", objBEL.InterestAmount);
                cmd.Parameters.AddWithValue("@BankName", objBEL.BankName);
                cmd.Parameters.AddWithValue("@BranchName", objBEL.BranchName);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetAllotteeDetailsIAtransferofleasedeedService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAService_transferofleasedeed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region "Noc Mortgage" 
        public DataSet GetNocMortgageDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetNocMortgageDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 InsertNocMortgageDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertNocmortgageDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.LetterNo);
                cmd.Parameters.AddWithValue("@LetterDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@LetterFrom", objBEL.LetterFrom);
                cmd.Parameters.AddWithValue("@LetterAddress", objBEL.AddressBank);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNumbers);
                cmd.Parameters.AddWithValue("@emailid", objBEL.emailids);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                cmd.Parameters.AddWithValue("@PremimAmount", objBEL.PremimAmount);
                cmd.Parameters.AddWithValue("@InterestAmount", objBEL.InterestAmount);
                cmd.Parameters.AddWithValue("@ispaid", objBEL.paidStatus);
                cmd.Parameters.AddWithValue("@BankName", objBEL.NocBankName);
                cmd.Parameters.AddWithValue("@BranchName", objBEL.NocBranchName);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetAllotteeDetailsIAMortgageService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAService_Mortgage]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetApplicationOfSecondChargeRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationOfSecondChargeRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfNocMortgageRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationOfNocMortgageRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfMortgageRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationOfMortgageRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion


        #region "Second charge" 

        public DataSet GetAllotteeDetailsIASecondchargeService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAService_Secondcharge]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfIAUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForIAServicesUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SetServiceRequestFinishSecondCharge(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SetServiceRequestFinish_SP_SecondCharge", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TraID", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetSecondchargeDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetSecondchargeDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public Int32 InsertSecondchargeDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertSecondchargeDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ispaid", objBEL.paidStatus);
                cmd.Parameters.AddWithValue("@firstAmount", objBEL.Amountfirstcharge);
                cmd.Parameters.AddWithValue("@firstNameofbank", objBEL.BankNamefirstcharge);
                cmd.Parameters.AddWithValue("@firstBranch", objBEL.BranchName);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory1", objBEL.AuthorizedSignatoryfirstcharge);
                cmd.Parameters.AddWithValue("@firstAddress", objBEL.Address);
                cmd.Parameters.AddWithValue("@firstMobileNo", objBEL.MobileNumber);
                cmd.Parameters.AddWithValue("@firstemailid", objBEL.emailID);
                cmd.Parameters.AddWithValue("@secondAmount", objBEL.Amountsecond);
                cmd.Parameters.AddWithValue("@secondNameofbank", objBEL.BankName);
                cmd.Parameters.AddWithValue("@secondBranch", objBEL.BranchNamesecond);
                cmd.Parameters.AddWithValue("@secondAddress", objBEL.Addresssecond);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorizedSignatorysecond);
                cmd.Parameters.AddWithValue("@secondMobileNo", objBEL.MobileNumbersecond);
                cmd.Parameters.AddWithValue("@secondemailid", objBEL.emailIDsecond);

                cmd.Parameters.AddWithValue("@PremimAmount", objBEL.PremimAmount);
                cmd.Parameters.AddWithValue("@InterestAmount", objBEL.InterestAmount);
                cmd.Parameters.AddWithValue("@PremimAmountSecond", objBEL.PremimAmountSecond);
                cmd.Parameters.AddWithValue("@InterestSecond", objBEL.InterestSecond);

                cmd.Parameters.AddWithValue("@SanctionletternoSecond", objBEL.SanctionletternoSecond);
                cmd.Parameters.AddWithValue("@SanctionletterDatesecond", objBEL.SanctionletterDatesecond);
                cmd.Parameters.AddWithValue("@SanctionletterDate", objBEL.SanctionletterDate);
                cmd.Parameters.AddWithValue("@Sanctionletterno", objBEL.Sanctionletterno);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion


        #region  Mortgage


        public Int32 InsertBankDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertBankDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 100;

                cmd.Parameters.AddWithValue("@BankName", objBEL.BankName);
                cmd.Parameters.AddWithValue("@BranchName", objBEL.BranchName);
                cmd.Parameters.AddWithValue("@Address", objBEL.Address);
                cmd.Parameters.AddWithValue("@MobileNumber", objBEL.MobileNumber);
                cmd.Parameters.AddWithValue("@email", objBEL.Email);
                cmd.Parameters.AddWithValue("@Percentage", objBEL.Percentage);
                cmd.Parameters.AddWithValue("@AllottmentLetterNumber", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@isActive", objBEL.IsActive);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@JointMortgageID", objBEL.MortgageID);
                cmd.Parameters.AddWithValue("@Bankstatus", objBEL.paidStatus);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 InsertJointMortgageDetails(belBookDetails objBEL)
        {
            int result; ;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertJointMortgageDetails_sp]", con);
                //SqlCommand cmd = new SqlCommand("[insertAllotteeDues]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Amount", objBEL.Amount);
                cmd.Parameters.AddWithValue("@SanctionletterDate", objBEL.LetterDate);
                cmd.Parameters.AddWithValue("@Sanctionletterno", objBEL.LetterNo);
                cmd.Parameters.AddWithValue("@username", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@ispaid", objBEL.paidStatus);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetJointMortgageDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetJointMortgageDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAllotteeDetailsIAJointMortgageService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAService_JointMortgage]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion



        #region "IA Service"
        public DataSet ListOfPlotForIAServices(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ListOfPlotsForIAservices1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.Parameters.AddWithValue("@ServiceRequestID", objBEL.subdivision_serviceid);

                cmd.Parameters.AddWithValue("@TypeOfApplication", objBEL.subdivision_TypeOfApplication);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 RaisePaymentObjection(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[RaisePaymentObjection]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 DeleteAllotteeLedgerEntry(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_DeleteAllotteeJournalEntry]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertAllotteeLedgerEntry(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_Insert_Allottee_Payment_ledger]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PaymentID", objBEL.PaymentTableID);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TransactionDate", objBEL.TransactionDate);
                cmd.Parameters.AddWithValue("@PaymentDate", objBEL.PaymentDate);
                cmd.Parameters.AddWithValue("@PaymentHeadID", objBEL.PaymentID);
                cmd.Parameters.AddWithValue("@Description", objBEL.PaymentDescription);
                cmd.Parameters.AddWithValue("@PaymentStatus", objBEL.Statusofwork);
                cmd.Parameters.AddWithValue("@Amount", objBEL.Amount);
                cmd.Parameters.AddWithValue("@UserName", objBEL.CreatedBy);
                
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetAllotteeForLedgerEntry(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("Sp_AllotteeForLedgerEntry", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAName", objBEL.IndustrialArea);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        

        public DataSet GetPlotForAucEntry(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("Sp_PlotForAucEntry", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAName", objBEL.IndustrialArea);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindTotalCountUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCountApplicationUnderObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet BindTotalCountCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCountApplicationCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindTotalCountRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCountApplicationRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindTotalCountUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCountApplicationUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet BindTotalCountInbox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCountApplication", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindTotalCountInboxHOLA(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetCountApplicationHO]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindTotalCountInboxTEFAuto(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCountApplicationTEFAuto", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 InsertBuildingSpecification(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertBuildingSpecification", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequest);
                cmd.Parameters.AddWithValue("@Far", objBEL.Far);
                cmd.Parameters.AddWithValue("@Groundcover", objBEL.Groundcover);
                cmd.Parameters.AddWithValue("@SetBackFront", objBEL.SetBackFront);
                cmd.Parameters.AddWithValue("@SetBackRear", objBEL.SetBackRear);
                cmd.Parameters.AddWithValue("@SetBackSide1", objBEL.SetBackSide1);
                cmd.Parameters.AddWithValue("@SetBackSide2", objBEL.SetBackSide2);
                cmd.Parameters.AddWithValue("@Height", objBEL.Height);
                cmd.Parameters.AddWithValue("@Occupancy", objBEL.Occupancy);
                cmd.Parameters.AddWithValue("@NatureofOccupancy", objBEL.NatureofOccupancy);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.ModifiedBy);
                cmd.Parameters.AddWithValue("@ExistingBasement", objBEL.ExistingBasement);
                cmd.Parameters.AddWithValue("@ExistingGroundFloor", objBEL.ExistingGroundFloor);
                cmd.Parameters.AddWithValue("@ExistingFirstFloor", objBEL.ExistingFirstFloor);
                cmd.Parameters.AddWithValue("@ExistingSecondFloor", objBEL.ExistingSecondFloor);
                cmd.Parameters.AddWithValue("@ExistingMezzanineFloor", objBEL.ExistingMezzanineFloor);
                cmd.Parameters.AddWithValue("@ProposedBasement", objBEL.ProposedBasement);
                cmd.Parameters.AddWithValue("@ProposedGroundFloor", objBEL.ProposedGroundFloor);
                cmd.Parameters.AddWithValue("@ProposedFirstFloor", objBEL.ProposedFirstFloor);
                cmd.Parameters.AddWithValue("@ProposedSecondFloor", objBEL.ProposedSecondFloor);
                cmd.Parameters.AddWithValue("@ProposedMezzanineFloor", objBEL.ProposedMezzanineFloor);
                cmd.Parameters.AddWithValue("@Foundation", objBEL.Foundation);
                cmd.Parameters.AddWithValue("@Floors", objBEL.Floors);
                cmd.Parameters.AddWithValue("@Walls", objBEL.Walls);
                cmd.Parameters.AddWithValue("@Roofs", objBEL.Roofs);
                cmd.Parameters.AddWithValue("@NoofStories", objBEL.NoofLatrines);
                cmd.Parameters.AddWithValue("@NoofLatrines", objBEL.NoofStories);
                cmd.Parameters.AddWithValue("@PurposeofBuildingUse", objBEL.PurposeofBuildingUse);
                cmd.Parameters.AddWithValue("@PreviousConstruction", objBEL.PreviousConstruction);
                cmd.Parameters.AddWithValue("@SourceofWater", objBEL.SourceofWater);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@StiltFloor", objBEL.StiltFloor);
                cmd.Parameters.AddWithValue("@Mumti", objBEL.Mumti);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 InsertAdditionalProductDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertAdditionalProductDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AdditionalProduct", objBEL.AdditionalProduct);
                cmd.Parameters.AddWithValue("@ProductDescription", objBEL.ProductDescription);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetApplicationOfChangeOfProjectRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForIAServiceRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfChangeOfProjectCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForIAServiceCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetApplicationOfChangeOfProjectUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForIAServicesUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetApplicationOfChangeOfProjectUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForIAServicesUnderObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveObjectionResponseIAServices(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UploadObjectionResponseIAService", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                if (objBEL.Uploadfile == null)
                {
                    cmd.Parameters.Add("@Documents", System.Data.SqlDbType.VarBinary).Value = DBNull.Value;

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                }
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@ApplicantResponse", objBEL.responseMessage);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SetServiceRequestFinishIAServiceDues(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestFinish_SP_IAService_Dues]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TraID", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UploadObjectionDocOnly(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UploadObjectiondocOnly]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                if (objBEL.Uploadfile == null)
                {
                    cmd.Parameters.Add("@Documents", System.Data.SqlDbType.VarBinary).Value = DBNull.Value;

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                }
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 RaiseObjectionIAService(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[RaiseObjectionIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@ObjectionType", objBEL.ObjectionType);
                cmd.Parameters.AddWithValue("@Clarification", objBEL.ObjectionDesc);
                cmd.Parameters.AddWithValue("@InternalObjDocName", objBEL.LAName);
                cmd.Parameters.AddWithValue("@InternalObjDocContent", objBEL.LAContentType);
                cmd.Parameters.AddWithValue("@InternalObjDoc", objBEL.LADocumentsMap);
                cmd.Parameters.AddWithValue("@NMObjRejType", objBEL.NMObjectionRejectionType);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DemandNoteDetailEntryIAService(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDemandNoteDetailsIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandID", objBEL.demandID);
                cmd.Parameters.AddWithValue("@PaymentID", objBEL.paymentID);
                cmd.Parameters.AddWithValue("@Paydesc", objBEL.PayDesc);
                cmd.Parameters.AddWithValue("@DueAmount", objBEL.Amount);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet ObjectionPlusDemandRaise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDemandNoteHeaderIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DueAmount", objBEL.DueAmount);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfChangeOfProjectInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForIAServicesInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 180;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SetServiceRequestFinishIAService(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestFinish_SP_IAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TraID", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetApplicableChargesIAServicesView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ServiceApplicableChargeIAServiceView", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllotteeDetailsIAService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetAllotteeDetailsIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicableChargesIAServices(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ServiceApplicableChargeIAService", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetPaidChargesIAServices(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_PaidChargeIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetChangeOfProjectDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetChangeOfProjectDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 InsertChangeOfProjectDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertChangeOfProjectDetails_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@IndustryType", objBEL.IndustryType);
                cmd.Parameters.AddWithValue("@EstimatedCostOfProject", objBEL.EstimatedCostOfProject);
                cmd.Parameters.AddWithValue("@EstimatedEmploymentGeneration", objBEL.EstimatedEmploymentGeneration);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@OpenAreaRequired", objBEL.OpenAreaRequired);
                cmd.Parameters.AddWithValue("@LandDetails", objBEL.LandDetails);
                cmd.Parameters.AddWithValue("@BuildingDetails", objBEL.BuildingDetails);
                cmd.Parameters.AddWithValue("@MachineryEquipmentsDetails", objBEL.MachineryEquipmentsDetails);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidqty", objBEL.IndustrialEffluentSolidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidComposition", objBEL.IndustrialEffluentSolidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidqty", objBEL.IndustrialEffluentLiquidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidComposition", objBEL.IndustrialEffluentLiquidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousqty", objBEL.IndustrialEffluentGaseousqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousComposition", objBEL.IndustrialEffluentGaseousComposition);
                cmd.Parameters.AddWithValue("@FumeGenerationStatus", objBEL.FumeGenerationStatus);
                cmd.Parameters.AddWithValue("@FumeQuantity", objBEL.FumeQuantity);
                cmd.Parameters.AddWithValue("@FumeNature", objBEL.FumeNature);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure1", objBEL.EffluentTreatmentMeasure1);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure2", objBEL.EffluentTreatmentMeasure2);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure3", objBEL.EffluentTreatmentMeasure3);
                cmd.Parameters.AddWithValue("@PowerReqInKW", objBEL.PowerReqInKW);
                cmd.Parameters.AddWithValue("@ApplicantPriorityStatus", objBEL.ApplicantPriorityStatus);
                cmd.Parameters.AddWithValue("@ApplicantPrioritySpecification", objBEL.ApplicantPrioritySpecification);
                cmd.Parameters.AddWithValue("@OtherFixedAssets", objBEL.OtherFixedAssets);
                cmd.Parameters.AddWithValue("@OtherExpenses", objBEL.OtherExpenses);
                cmd.Parameters.AddWithValue("@projectstartmonths", objBEL.projectstartmonths);
                cmd.Parameters.AddWithValue("@workexperience", objBEL.workexperience);
                cmd.Parameters.AddWithValue("@NetTurnOver", objBEL.NetTurnOver);
                cmd.Parameters.AddWithValue("@ExportOriented", objBEL.ExportOriented);
                cmd.Parameters.AddWithValue("@IAType", objBEL.IAType);
                cmd.Parameters.AddWithValue("@IACategory", objBEL.IAcategory);
                cmd.Parameters.AddWithValue("@NetWorth", objBEL.Networth);
                cmd.Parameters.AddWithValue("@ETPReq", objBEL.EtpRequired);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetCheckListDocumentAllIAServices(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetCheckListDocumentDetailIAService]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllServiceChecklistsIAServices(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetServiceChecklistsIAServices]", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@ServiceCondition", objBEL.ServiceChecklistCondition);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Bit", objBEL.Status);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet SetServiceRequestIAService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestForIAServices_SP]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GSTNo);
               


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region "Lease Deed"
        public DataSet Get_application_status_History(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Get_Application_Lease_status_history]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfPossessionCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForPossessionCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfLeaseDeedCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLeaseDeedCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 SavePossessionDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_SavePossessionDateilsByJE]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PossessionDate", objBEL.PossessionGivenDate);
                cmd.Parameters.AddWithValue("@PossessionArea", objBEL.PosseessionAreaGiven);
                cmd.Parameters.AddWithValue("@PossessionGivenTo", objBEL.PosseessionGivenTo);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocID", objBEL.DocumentID);
                cmd.Parameters.AddWithValue("@UserID", objBEL.UserId);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UploadPlotPossessionMemo(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadPossessionMemo]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@UserID", objBEL.UserId);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet CreateAppointmentForPossession(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("CreateaAppointmentForPossession", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@AppointmentType", objBEL.AppointmentType);
                cmd.Parameters.AddWithValue("@AppointmentDesc", objBEL.AppointmentDesc);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.UserID);
                cmd.Parameters.AddWithValue("@PossessionAppointment", objBEL.PossessionAppointment);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetApplicationOfLeaseDeedUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLeaseDeedUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UploadSignedLeaseDeed(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadSignedLeaseDeed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@UserID", objBEL.UserId);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.DocPath);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UploadPlotLeaseDeed(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadRegisteredLeaseDeed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@UserID", objBEL.UserId);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveLeaseDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_SaveLeaseDateilsByDa]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LeaseRegistryDate", objBEL.LeaseRegistryDate);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@LeaseBookNo", objBEL.LeaseBahi);
                cmd.Parameters.AddWithValue("@LeaseBindingNo", objBEL.LeaseJild);
                cmd.Parameters.AddWithValue("@PageFrom", objBEL.LeasePageFrom);
                cmd.Parameters.AddWithValue("@pageTo", objBEL.LeasePageTo);
                cmd.Parameters.AddWithValue("@SerialNo", objBEL.LeaseSrNo);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UploadGMIDCLetter(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadGMIDCLetter]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet UpdateROAppoitmentDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateROAppointmentDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@ROAppDate", objBEL.ROAppointmentDate);
                cmd.Parameters.AddWithValue("@RORemarks", objBEL.ROAllotteeRemarks);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 TransferApplicationLease(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferApplicationLease", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser", objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@Status", objBEL.RecStatus);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.DocPath);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveJESiteLeaseDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_SaveJESiteLeaseDateils]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ConstructionValue", objBEL.ConstructionValue);
                cmd.Parameters.AddWithValue("@PossessionArea", objBEL.PosseessionAreaLease);
                cmd.Parameters.AddWithValue("@IspectionDate", objBEL.InspectionDateLease);
                cmd.Parameters.AddWithValue("@Any", objBEL.AnyConstruction);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@PlotDimension", objBEL.PlotDimension);
                cmd.Parameters.AddWithValue("@PlotDirection", objBEL.PlotDirection);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UploadInspectionReportLeaseDeed(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadInspectionReportLeasedeed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UploadPlotTracingLeaseDeed(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadPlotTracingLeasedeed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 AssignPOA(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_AssignPOA]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@POAID", objBEL.POAID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 InsertAckDocLease(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_insertAckDoc]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@CheckistID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@CheckListHead", objBEL.ServiceChecklistCondition);
                cmd.Parameters.AddWithValue("@CheckListDesc", objBEL.ServiceChecklistDesc);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 ClearAckDoc(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_ClearAckDoc]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServceReqNo", objBEL.ServiceRequestNO);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 UploadPOAPhoto(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_uploadPOA]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@Type", objBEL.Type);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet CloseLeaseDeedAppointment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestForLeaseDeed_SP]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Get_AppointmentsWithAllottee(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Get_AppointmentsWithAllottee]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet CreateAppointmentForLeaseDeed(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("CreateaAppointmentForLeaseDeed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@AppointmentType", objBEL.AppointmentType);
                cmd.Parameters.AddWithValue("@AppointmentDesc", objBEL.AppointmentDesc);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.UserID);
                cmd.Parameters.AddWithValue("@StampAmount", objBEL.StampPaperAmount);
                cmd.Parameters.AddWithValue("@DMCircle", objBEL.DMCircle);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetApplicationOLeaseDeedInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLeaseDeedInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOLeaseDeedRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLeaseDeedRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOLeaseDeedUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLeaseDeedUnderObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetLeaseDeedPaymentDetailAfterTransaction(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLeaseDeedPAymentDetailAfterTransaction", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SetServiceRequestFinishLeaseDeed(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestFinish_SP_LeaseDeed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TraID", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetApplicableChargesLeaseDeed(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TempServiceApplicableChargeLeaseDeed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicableChargesLeaseDeedFee(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TempServiceApplicableChargeLeaseDeedFee", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet SetServiceRequestLeaseDeed(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[SetServiceRequestForLeaseDeed_SP]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Email", objBEL.Email);
                cmd.Parameters.AddWithValue("@Mobile", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@EligibleRebate", objBEL.EligibleRebate);
                cmd.Parameters.AddWithValue("@AvailRebate", objBEL.AvailRebate);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllotteeRecordToBindForApplication(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDetailsLeaseDeed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotType", objBEL.LandUse);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllotteeRecordToBindForLeaseDeed(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDetailsLeaseDeed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllottmentLetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetDocumentChecklistLeaseDeed(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetServiceChecklists_LeaseDeed]", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@Bit", objBEL.FirmType);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        #endregion




        #region "User Creation"

        public DataSet GetBuildingPlanChargesAll(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetPaymentForBuildingPlanAll]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@PlotSize", objBEL.choicearea);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@MalbaPaid", objBEL.MalbaPaid);
                cmd.Parameters.AddWithValue("@InfraPaid", objBEL.InfraPaid);
                cmd.Parameters.AddWithValue("@BPCaseType", objBEL.BPCaseType);
                cmd.Parameters.AddWithValue("@Type", objBEL.AreaStatus);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetDesignationDetails()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetDesignationdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetgridforUsercreation()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetUserdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet InsertUserDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[sp_AddLoginUserInternal_Test]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@pUsername", objBEL.username);
                cmd.Parameters.AddWithValue("@pPassword", objBEL.Password);
                cmd.Parameters.AddWithValue("@pDesignationID", objBEL.Designation);
                cmd.Parameters.AddWithValue("@Qualification", objBEL.Qualification);
                cmd.Parameters.AddWithValue("@pEmpcode", objBEL.Empcode);
                cmd.Parameters.AddWithValue("@pJoiningDate", objBEL.JoiningDate);
                cmd.Parameters.AddWithValue("@pRetirementDate", objBEL.RetirementDate);
                cmd.Parameters.AddWithValue("@pContractType", objBEL.ContractType);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.phoneNo);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@isActive", 1);
                cmd.Parameters.AddWithValue("@isDeleted", 0);
                cmd.Parameters.AddWithValue("@pEmployeename", objBEL.Employee);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet UpdateUserDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_UpdateLoginUserInternal_Test]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@pUserID", objBEL.UserID);
                cmd.Parameters.AddWithValue("@pUsername", objBEL.username);
                cmd.Parameters.AddWithValue("@pPassword", objBEL.Password);
                cmd.Parameters.AddWithValue("@pDesignationID", objBEL.Designation);
                cmd.Parameters.AddWithValue("@Qualification", objBEL.Qualification);
                cmd.Parameters.AddWithValue("@pEmpcode", objBEL.Empcode);
                cmd.Parameters.AddWithValue("@pJoiningDate", objBEL.JoiningDate);
                cmd.Parameters.AddWithValue("@pRetirementDate", objBEL.RetirementDate);
                cmd.Parameters.AddWithValue("@pContractType", objBEL.ContractType);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.phoneNo);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@isActive", 1);
                cmd.Parameters.AddWithValue("@isDeleted", 0);
                cmd.Parameters.AddWithValue("@pEmployeename", objBEL.Employee);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetUserDetails(string id)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetUsercreationdetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", id);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 Delete_Userdetals(string id)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteUserDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserID", id);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetgridforSearchUsercreation(string search)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetUserdetails_2", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@search", search);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region TEF  
        public DataSet GetListOfAllAPplictionsIA(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetBifiractedFilterWiseReportIA]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice  );
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea  );
                cmd.Parameters.AddWithValue("@ReportType"    , objBEL.PaymentMode     );
                cmd.Parameters.AddWithValue("@ServiceName"   , objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate"      , objBEL.FromDatetime    );
                cmd.Parameters.AddWithValue("@ToDate"        , objBEL.ToDatetime      );

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 InsertTEFDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertTEFDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 100;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TEFRefferenceNumber", objBEL.TEFRefferenceNumber);
                cmd.Parameters.AddWithValue("@TEFApprovalDate", objBEL.TEFApprovalDate);
                cmd.Parameters.AddWithValue("@TEFPeriod", objBEL.TEFPeriod);
                cmd.Parameters.AddWithValue("@TEFFees", objBEL.TEFFees);
                cmd.Parameters.AddWithValue("@isActive", objBEL.IsActive);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region "Reservation Money"

        public DataSet GetDetailsWithReservationMoneyNew(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDetailsAndReservationMoneyNewBYServiceReqNo", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetOutstandingDuesAmountNMSWP(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TempOutstandingDuesPaymentHead", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllotteeRecordToBindDuesPayment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDetailsForDuesPayment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetReservationPaymentDetailAfterTransactionNMSWP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetreservatonMoneyDetailAfterTransactionNMSWP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetReservationPaymentDetailAfterTransaction(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetreservatonMoneyDetailAfterTransaction", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetOutstandingDuesPaymentDetailAfterTransaction(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetOutstandingDuesPaymentDetailAfterTransaction", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetOutstandingDuesAmount(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("Sp_getpaymentOutstandingAllottee_Bifircated", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRefNo", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetReservationAmount(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetReservationMoneyAmount", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRefNo", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetDetailsWithReservationMoney(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDetailsAndReservationMoney", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllottmentLetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetAllotteeRecordToBind(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_getIAofAllottee", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRefNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region "Park and Road Master"
        public DataSet BindlistRoadInListbox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetAllRoads]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@secid", objBEL.SectorID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 RoadEntryInRoadMasterNew(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertUpdateRoadMaster", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RoadName", objBEL.RoadNo);
                cmd.Parameters.AddWithValue("@RoadWidth", objBEL.RoadWidth);
                cmd.Parameters.AddWithValue("@RoadLength", objBEL.RoadLength);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAId);
                cmd.Parameters.AddWithValue("@Row", objBEL.Row);
                cmd.Parameters.AddWithValue("@sectorid", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@RoadType", objBEL.RoadType);
                cmd.Parameters.AddWithValue("@Median", objBEL.Median);
                cmd.Parameters.AddWithValue("@MedianWidth", objBEL.MedianWidth);
                cmd.Parameters.AddWithValue("@GreenBelt", objBEL.GreenBelt);
                cmd.Parameters.AddWithValue("@StreetLight", objBEL.StreetLight);
                cmd.Parameters.AddWithValue("@NoOfStreetLight", objBEL.NoOfStreetLight);
                cmd.Parameters.AddWithValue("@FootPath", objBEL.FootPath);
                cmd.Parameters.AddWithValue("@CycleTrack", objBEL.CycleTrack);
                cmd.Parameters.AddWithValue("@RoadBegPoint", objBEL.RoadBegPoint);
                cmd.Parameters.AddWithValue("@RoadEndPoint", objBEL.RoadEndPoint);
                cmd.Parameters.AddWithValue("@StormWaterDrainage", objBEL.StormWaterDrainage);
                cmd.Parameters.AddWithValue("@IndustrialDrainage", objBEL.IndustrialDrainage);
                cmd.Parameters.AddWithValue("@ModifiedBy", objBEL.ModifiedBy);
                cmd.Parameters.AddWithValue("@ISLOCKED", objBEL.LockStatus);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteRoadFromMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteRoadInMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RoadName", objBEL.RoadNo);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAId);
                cmd.Parameters.AddWithValue("@SectorID", objBEL.SectorID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteParkFromMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteParkInMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ParkName", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@SectorID", objBEL.SectorID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 ParkEntryInParkMasterNew(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertUpdateParkInMasterNew]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ParkNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.PlotArea);
                cmd.Parameters.AddWithValue("@ParkDeveloped", objBEL.parkDeveloped);
                cmd.Parameters.AddWithValue("@North", objBEL.North);
                cmd.Parameters.AddWithValue("@South", objBEL.South);
                cmd.Parameters.AddWithValue("@East", objBEL.East);
                cmd.Parameters.AddWithValue("@west", objBEL.West);
                cmd.Parameters.AddWithValue("@MaintainedBy", objBEL.MaintainedBy);
                cmd.Parameters.AddWithValue("@NoOfTrees", objBEL.Nooftrees);
                cmd.Parameters.AddWithValue("@LockStatus", objBEL.LockStatus);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Remark", objBEL.PlotRemark);
                cmd.Parameters.AddWithValue("@sectorid", objBEL.SectorID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet BindlstParksInListbox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetAllParks]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@secid", objBEL.SectorID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region AllotteeMaster

        public DataSet GetPollutionCategoryBinding()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPollutionCategoryBinding", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 DeleteAllotteeRecords(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SP_DeleteAllotteeDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetPlotArea(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetPlotArea]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNumber);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetListOfAllotteedGISPlotsIAWise(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfAllottedGISPlot]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAIdParam);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet DeuesEntry(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDemandNoteHeader]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@DueAmount", objBEL.DueAmount);
                cmd.Parameters.AddWithValue("@DemandDate", objBEL.DemandDate);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@btnText", objBEL.btnText);
                cmd.Parameters.AddWithValue("@DemandID", objBEL.DemandID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet DuesPaymentRecivedEntry(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDuesPaymentRecivedDetailHeader]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@DueAmount", objBEL.PaymentRecivedAmount);
                cmd.Parameters.AddWithValue("@DemandDate", objBEL.PaymentRecivedDate);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 DuesPaymentDetailEntry(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDuesPaymentRecived]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandID", objBEL.PaymentRecivedID);
                cmd.Parameters.AddWithValue("@PaymentID", objBEL.ID);
                cmd.Parameters.AddWithValue("@Paydesc", objBEL.PayRecivedDescription);
                cmd.Parameters.AddWithValue("@DueAmount", objBEL.PaymentRecivedAmount);
                cmd.Parameters.AddWithValue("@PaymentRecivedDate", objBEL.PaymentReciveddate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 InsertInstallmentPaymentDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertInstallmentPaymentRecivedDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 100;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);

                cmd.Parameters.AddWithValue("@DueDateofInstallment", objBEL.DueDateofInstallment);
                cmd.Parameters.AddWithValue("@InterestDue", objBEL.InterestDue);
                cmd.Parameters.AddWithValue("@InterestDuewithout", objBEL.InterestDuewithout);
                cmd.Parameters.AddWithValue("@PremiumDue", objBEL.PremiumDue);
                cmd.Parameters.AddWithValue("@TotalAmount", objBEL.TotalAmount);
                cmd.Parameters.AddWithValue("@TotalAmountRebate", objBEL.TotalAmountRebate);
                cmd.Parameters.AddWithValue("@AllottmentLetterNumber", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@isActive", objBEL.IsActive);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetPaymentDetailswithAmount(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPaymentDetailswithAmount", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", objBEL.AlloteeId);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAdjustedPaymentAgainstdDemand(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAdjustedPaymentAgainstdDemand", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandID", objBEL.DemandID);
                cmd.Parameters.AddWithValue("@AmountRec", objBEL.PaymentRecivedAmount);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 DemandNoteDetailEntry(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDemandNoteDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandID", objBEL.demandID);
                cmd.Parameters.AddWithValue("@PaymentID", objBEL.paymentID);
                cmd.Parameters.AddWithValue("@Paydesc", objBEL.PayDesc);
                cmd.Parameters.AddWithValue("@DueAmount", objBEL.Amount);
                cmd.Parameters.AddWithValue("@btnText", objBEL.btnText);
                cmd.Parameters.AddWithValue("@Priority", objBEL.Priority);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateInstallmentStatus(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertInstallmentStatus_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@installmentStatus", objBEL.installmentStatus);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetPaymentRecivedwithAmount(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPaymentRecivedwithAmount", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", objBEL.AlloteeId);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region  UploadAllDocument
        public Int32 UploadAllDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadAllotmentLetter]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@AllotteeId", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@DocID", objBEL.DocumentID);
                cmd.Parameters.AddWithValue("@AllotmentLetterNumber", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion


        #region PlotNumberUpdate

        public DataSet GetAllAllotteeDetailsforupdateplotID(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAllAllotteeDetailsforupdateplotID", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.AllotmentNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        #region AllotteeMasterPlotNumberUpdate

        public Int32 PlotEntryInAllotteeMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[PlotEntryInAllotteeMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AlloteeId", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@AllotmentLetterno", objBEL.AllotmentLetterno);

                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAId);
                cmd.Parameters.AddWithValue("@PlotUniqueID", objBEL.PlotUniqueID);
                cmd.Parameters.AddWithValue("@MasterPlotNumber", objBEL.MasterPlotNumber);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetRegionalOfficeALLRecords()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionalALLDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        #region LandAllotmentReports

        public DataSet GetTracingDocView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[GetTracingDocView]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotID", objBEL.PlotID);
                cmd.Parameters.AddWithValue("@DocType", objBEL.Doctype);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UploadTracing(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UploadTracing", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                if (objBEL.Uploadfile == null)
                {
                    cmd.Parameters.Add("@Documents", System.Data.SqlDbType.VarBinary).Value = DBNull.Value;

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                }
                cmd.Parameters.AddWithValue("@MasterID", objBEL.PlotID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UploadJointCertificate(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UploadJointCertificate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                if (objBEL.Uploadfile == null)
                {
                    cmd.Parameters.Add("@Documents", System.Data.SqlDbType.VarBinary).Value = DBNull.Value;

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                }
                cmd.Parameters.AddWithValue("@MasterID", objBEL.PlotID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet CheckTracingDoc(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("[CheckTracing]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotID", objBEL.PlotID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetLandAllotmentReports(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetDailyApplicationReport_SP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionName", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        #region buildingPlanAccountDetails

        public DataSet GetListOfBuildingPlanAccountDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfBuildingPlanAccountDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfBuildingPlanAccountDetailsCleared(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfBuildingPlanAccountDetailsCleared]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 UpdateApplicationAfterAccountClearenceBP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateAllotmentApplicationAfterAccountsClearenceBP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Service_Request_No", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TransactionID", objBEL.TranID);
                cmd.Parameters.AddWithValue("@ConfirmAmount", objBEL.PayTrans_trn_amt);
                cmd.Parameters.AddWithValue("@ConfirmDate", objBEL.PayDate);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region HDFCPayment

        public DataSet GetBuildingPlanChargesRevised(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                // SqlCommand cmd = new SqlCommand("GetApplicationFeeForBP", con);
                SqlCommand cmd = new SqlCommand("[GetRestPaymentForBuildingPlanRevised]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                // cmd.Parameters.AddWithValue("@IAID"  , objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.choicearea);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                //  cmd.Parameters.AddWithValue("@FeeType", "S");

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public string UpdateHDFCAllotteTransaction(belBookDetails objBEL)
        {
            string result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetTransactionDataAfterHDFCPaymentGateway]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ref_no_upsidc", objBEL.PayTrans_unique_ref_UPSIDC);
                cmd.Parameters.AddWithValue("@unique_ref_gateway", objBEL.PayTrans_unique_ref);
                cmd.Parameters.AddWithValue("@response_code", objBEL.PayTrans_response_code);
                cmd.Parameters.AddWithValue("@service_tax", objBEL.PayTrans_service_tax);
                cmd.Parameters.AddWithValue("@processing_fee_amt", objBEL.PayTrans_processing_fee_amt);
                cmd.Parameters.AddWithValue("@total_amt", objBEL.PayTrans_total_amt);
                cmd.Parameters.AddWithValue("@trn_amt", objBEL.PayTrans_trn_amt);
                cmd.Parameters.AddWithValue("@trn_date", objBEL.PayTrans_trn_date_hdfc);
                cmd.Parameters.AddWithValue("@interchange_val", objBEL.PayTrans_interchange_val);
                cmd.Parameters.AddWithValue("@tdr", objBEL.PayTrans_tdr);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@MerchantId", objBEL.PayTrans_MerchantId);
                cmd.Parameters.AddWithValue("@tps", objBEL.PayTrans_tps);
                cmd.Parameters.AddWithValue("@PayTrans_id", objBEL.PayTrans_id);
                cmd.Parameters.AddWithValue("@rs", objBEL.PayTrans_rs);
                cmd.Parameters.AddWithValue("@GatewayResponse", objBEL.GatewayResponse);
                cmd.Parameters.AddWithValue("@PayMode", objBEL.PayMode);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                adp.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    result = dt.Rows[0]["Message"].ToString();
                }
                else
                {
                    result = "Failed";
                }


                return result;

            }
            catch (Exception ex)
            {
                result = ex.ToString();
                return result;
            }
        }
        #endregion

        #region "Nivesh Mitra Flow"


        public Int32 UpdateEmailFromNiveshMitra(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateCommunicationDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Name", objBEL.NameofOwner);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@Pan", objBEL.PanNo);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 UploadCommitteeMinutes(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadCommitteeMinutes]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UploadHeadOfficeCommitteeMinutes(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadHeadOfficeCommitteeMinutes]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UploadCoverLetter(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadCoverLetter]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetProcessingForNiveshMitraBuildingPlan(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                //SqlCommand cmd = new SqlCommand("GetApplicationFeeForBP", con);
                SqlCommand cmd = new SqlCommand("GetProcessingFeeForBuildingPlan", con);
                cmd.CommandType = CommandType.StoredProcedure;
                // cmd.Parameters.AddWithValue("@IAID",        objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.plotSize);
                // cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                // cmd.Parameters.AddWithValue("@FeeType",     "P");

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetBuildingPlanCharges(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                // SqlCommand cmd = new SqlCommand("GetApplicationFeeForBP", con);
                SqlCommand cmd = new SqlCommand("[GetRestPaymentForBuildingPlan]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                // cmd.Parameters.AddWithValue("@IAID"  , objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.choicearea);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetBuildingPlanChargesReceived(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                // SqlCommand cmd = new SqlCommand("GetApplicationFeeForBP", con);
                SqlCommand cmd = new SqlCommand("[GetPaymentReceivedForBuildingPlan]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetapplicableFormFeeforAllotment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableFormFeeforAllotment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@IAID", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.choicearea);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateFeePaidStatus(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateFeePaidStatus]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetapplicableChargesnDataforAllotmentInternal(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicableChargesForLandAllotmentNew", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@IAID", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.choicearea);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetapplicableChargesnDataNew(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TempServiceApplicableFeesIN", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region ProcessSimplification 
        public DataSet GetApplicationAmalgamationRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForAmalgamationPostAllotmentReject]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationTransferRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationTransferRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfBuildingPlanRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForBuildingPlanRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfBuildingPlanUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForBuildingPlanUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfLidaBuildingPlanUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLidaBuildingPlanUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfAmalgamationUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForAmalgamationUnderObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfBuildingPlanUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForBuildingPlanUnderObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfTransferUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForTransferUnderObjection]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfLidaBuildingPlanCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLidaBuildingPlanCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfLidaBuildingPlanRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLidaBuildingPlanRejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfLidaBuildingPlanUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLidaBuildingPlanUnderObjection", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfBuildingPlanCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForBuildingPlanCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfTransferPlotUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForTransferPlotUnderProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfTransferPlotCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForTransferPlotUnderCompleted", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationOfBuildingPlanInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForBuildingPlanInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        //--Test
        public DataSet GetApplicationOfLidaBuildingPlanInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLidaBuildingPlanInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfLidaBuildingPlanNotApprovedInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForLidaBuildingPlanNotApprovedInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationOfTransferPlotInBox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForTransferPlotInbox", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        //Get_Notesheet_of_LidaapplicationBTApproved
        public DataSet Get_Notesheet_of_LidaapplicationBTApproved(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Notesheet_of_LidaApplicationBTApproved]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet Get_Notesheet_of_applicationBT(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Notesheet_of_ApplicationBT]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 TransferApplicationBT(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferApplicationBT", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser", objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@Status", objBEL.RecStatus);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.DocPath);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 TransferApplicationLida(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferApplicationLida", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser", objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@Status", objBEL.RecStatus);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.DocPath);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 ClearRejectionReasons(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_ClearAllotmentRejectionReasons", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NMObjType", objBEL.NMObjectionRejectionType);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveAllotmentRejectionDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_AllotmentRejectionInsert]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Clause", objBEL.Clause);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetTypeoFIndustry()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetIndustrialType", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetIACategory()
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetIACategory", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet Get_Notesheet_of_application(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Notesheet_of_Application]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 TransferApplication(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("TransferApplication", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceId",     objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Transfer_From", objBEL.TransferFrom);
                cmd.Parameters.AddWithValue("@FromUser",      objBEL.FromUser);
                cmd.Parameters.AddWithValue("@Transfer_To", objBEL.TransferTo);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Comments);
                cmd.Parameters.AddWithValue("@Status",  objBEL.RecStatus);
                cmd.Parameters.AddWithValue("@DocPath", objBEL.DocPath);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveTempServiceChecklistDocumentResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_TempUploadChecklistfileResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateApplicantProjectDetailsResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[AllotteeApplicationProjectDetailsResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@MainApplicantId", objBEL.MainAllotteeID);
                cmd.Parameters.AddWithValue("@IndustryType", objBEL.IndustryType);
                cmd.Parameters.AddWithValue("@EstimatedCostOfProject", objBEL.EstimatedCostOfProject);
                cmd.Parameters.AddWithValue("@EstimatedEmploymentGeneration", objBEL.EstimatedEmploymentGeneration);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@OpenAreaRequired", objBEL.OpenAreaRequired);
                cmd.Parameters.AddWithValue("@LandDetails", objBEL.LandDetails);
                cmd.Parameters.AddWithValue("@BuildingDetails", objBEL.BuildingDetails);
                cmd.Parameters.AddWithValue("@MachineryEquipmentsDetails", objBEL.MachineryEquipmentsDetails);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidqty", objBEL.IndustrialEffluentSolidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidComposition", objBEL.IndustrialEffluentSolidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidqty", objBEL.IndustrialEffluentLiquidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidComposition", objBEL.IndustrialEffluentLiquidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousqty", objBEL.IndustrialEffluentGaseousqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousComposition", objBEL.IndustrialEffluentGaseousComposition);
                cmd.Parameters.AddWithValue("@FumeGenerationStatus", objBEL.FumeGenerationStatus);
                cmd.Parameters.AddWithValue("@FumeQuantity", objBEL.FumeQuantity);
                cmd.Parameters.AddWithValue("@FumeNature", objBEL.FumeNature);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure1", objBEL.EffluentTreatmentMeasure1);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure2", objBEL.EffluentTreatmentMeasure2);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure3", objBEL.EffluentTreatmentMeasure3);
                cmd.Parameters.AddWithValue("@PowerReqInKW", objBEL.PowerReqInKW);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear1", objBEL.TelephoneReqFirstYear1);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear2", objBEL.TelephoneReqFirstYear2);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate1", objBEL.TelephoneReqUltimate1);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate2", objBEL.TelephoneReqUltimate2);
                cmd.Parameters.AddWithValue("@ApplicantPriorityStatus", objBEL.ApplicantPriorityStatus);
                cmd.Parameters.AddWithValue("@ApplicantPrioritySpecification", objBEL.ApplicantPrioritySpecification);
                cmd.Parameters.AddWithValue("@OtherFixedAssets", objBEL.OtherFixedAssets);
                cmd.Parameters.AddWithValue("@OtherExpenses", objBEL.OtherExpenses);
                cmd.Parameters.AddWithValue("@projectstartmonths", objBEL.projectstartmonths);
                cmd.Parameters.AddWithValue("@workexperience", objBEL.workexperience);
                cmd.Parameters.AddWithValue("@NetTurnOver", objBEL.NetTurnOver);
                cmd.Parameters.AddWithValue("@ExpansionOfLand", objBEL.ExpansionOfLand);
                cmd.Parameters.AddWithValue("@ExportOriented", objBEL.ExportOriented);
                cmd.Parameters.AddWithValue("@IAType", objBEL.IAType);
                cmd.Parameters.AddWithValue("@IACategory", objBEL.IAcategory);
                cmd.Parameters.AddWithValue("@ExisPlotNo", objBEL.ExistingPlotNo);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.ExistingAllotteeName);
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@NetWorth", objBEL.Networth);
                if (objBEL.AllotmentDate.ToString().Length > 0)
                {
                    cmd.Parameters.AddWithValue("@AllotmentDate", objBEL.AllotmentDate);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@AllotmentDate", DBNull.Value);
                }
                cmd.Parameters.AddWithValue("@PropProduct", objBEL.ProductManufactured);
                cmd.Parameters.AddWithValue("@ETPReq", objBEL.EtpRequired);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateApplicantAccountsDetailsResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[ApplicantAccountsDetailsResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@MainApplicantId", objBEL.MainAllotteeID);
                cmd.Parameters.AddWithValue("@PayeeName", objBEL.PayeeName);
                cmd.Parameters.AddWithValue("@BankName", objBEL.PayeeBankName);
                cmd.Parameters.AddWithValue("@AccountNo", objBEL.AccountNo);
                cmd.Parameters.AddWithValue("@IFSCCode", objBEL.IFSCCode);
                cmd.Parameters.AddWithValue("@BranchName", objBEL.BranchName);
                cmd.Parameters.AddWithValue("@BranchAddress", objBEL.BranchAddress);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveApplicantImageResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantImageResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveApplicantSignResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantSignResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet UpdateApplicantDetailsResubmit(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateNewApplicantDetailsResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 ClearShareHolderResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_clearShareHoldersResubmit", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@MainAllotteeID", objBEL.MainAllotteeID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveShareHolderDetailsResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantShareHoldersResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@MainAllotteeID", objBEL.MainAllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveDirectorsDetailsResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantDirectorsResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@MainAllotteeID", objBEL.MainAllotteeID);
                cmd.Parameters.AddWithValue("@DirectorName", objBEL.DirectorName);
                cmd.Parameters.AddWithValue("@Address", objBEL.DirectorAddress);
                cmd.Parameters.AddWithValue("@DinPan", objBEL.DirectorDinPan);
                cmd.Parameters.AddWithValue("@Phone", objBEL.DirectorPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.DirectorEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveTrusteeDetailsResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantTrusteeResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@MainAllotteeID", objBEL.MainAllotteeID);
                cmd.Parameters.AddWithValue("@TrusteeName", objBEL.TrusteeName);
                cmd.Parameters.AddWithValue("@Address", objBEL.TrusteeAddress);
                cmd.Parameters.AddWithValue("@Phone", objBEL.TrusteePhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.TrusteeEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SavePatnersDetailsResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantPartnersResubmit]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@MainAllotteeID", objBEL.MainAllotteeID);
                cmd.Parameters.AddWithValue("@PartnerName", objBEL.PartnerName);
                cmd.Parameters.AddWithValue("@Address", objBEL.PartnerAddress);
                cmd.Parameters.AddWithValue("@PartnerPer", objBEL.PartnerPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.PartnerPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.PartnerEmail);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 FinalSResubmission(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("FinalResubmission", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);





                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveObjectionResponse(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UploadObjectionResponse", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                if (objBEL.Uploadfile == null)
                {
                    cmd.Parameters.Add("@Documents", System.Data.SqlDbType.VarBinary).Value = DBNull.Value;

                }
                else
                {
                    cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                }
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@AllotteeIDMain", objBEL.MainAllotteeID);
                cmd.Parameters.AddWithValue("@ApplicantResponse", objBEL.responseMessage);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetevaluationDataIndividual(String ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GETDATAFOREVALAUTIONNew", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindEvaluationChecklistGridIndividual(string ServiceReqNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[ServiceIndividualStatusChecklist]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", ServiceReqNo);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationUnderProcess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetNewAllotmentRequestNew_Processed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationUnderProcessHO(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetNewAllotmentRequestNew_InProcess_HO]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApplicationRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForAllotmenteRejected", con);
                //SqlCommand cmd = new SqlCommand("GetNewAllotmentRequestNew_Rejected", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicationForAllotmentCompleted", con);
                // SqlCommand cmd = new SqlCommand("GetNewAllotmentRequestNew_Completed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetLidaBPNotApprovedCompleted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLidaBPNotApprovedCompleted1", con);
                // SqlCommand cmd = new SqlCommand("GetNewAllotmentRequestNew_Completed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetLidaBPNotApprovedRejected(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLidaBPNotApprovedRejected", con);
                // SqlCommand cmd = new SqlCommand("GetNewAllotmentRequestNew_Completed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetLidaBPNotApprovedUnderObjection(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLidaBPNotApprovedUnderObjection", con);
                // SqlCommand cmd = new SqlCommand("GetNewAllotmentRequestNew_Completed", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicationForClarfication(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetNewAllotmentRequestNew_Clarification", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Get_Announcement_ListNew_HO(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetNewAllotmentRequestNew_testing]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 1000;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Get_Announcement_ListNew(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetNewallotmentRequestNew", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 1000;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GETDATAFORCMDASHBOARDREPORT(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetDataForCMDashboardReport]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        #endregion






        public DataSet ViewSignedCopyLetter(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetSignedCopyLetter", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Service", objBEL.Doctype);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfAllotteedPlotsIAWise(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfAllottedPlot]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAIdParam);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetDetailsWithDemand(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDetailsAndDemandNoteDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllottmentLetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        #region IndustrialAreaMaster

        public Int32 IndustrialAreaEntryMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertUpdateIndustrialAreaMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@Distict", objBEL.Distict);
                cmd.Parameters.AddWithValue("@SubDistictID", objBEL.SubDistict);
                cmd.Parameters.AddWithValue("@VillageID", objBEL.Village);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@IACategory", objBEL.IACategory);

                cmd.Parameters.AddWithValue("@TotalLandAcquired", objBEL.TotalLandAcquired);
                cmd.Parameters.AddWithValue("@TotIALandForAllotment", objBEL.TotIALandForAllotment);
                cmd.Parameters.AddWithValue("@TotIAPlotsForAllotment", objBEL.TotIAPlotsForAllotment);
                cmd.Parameters.AddWithValue("@IARatePerSqmt", objBEL.IARatePerSqmt);

                cmd.Parameters.AddWithValue("@TotResLandForAllotment", objBEL.TotResLandForAllotment);
                cmd.Parameters.AddWithValue("@TotResPlotForAllotment", objBEL.TotResPlotForAllotment);
                cmd.Parameters.AddWithValue("@ResRatePerSqmt", objBEL.ResRatePerSqmt);
                cmd.Parameters.AddWithValue("@TotCommLandForAllotment", objBEL.TotCommLandForAllotment);

                cmd.Parameters.AddWithValue("@TotCommPlotsForAllotment", objBEL.TotCommPlotsForAllotment);
                cmd.Parameters.AddWithValue("@CommRatePerSqmt", objBEL.CommRatePerSqmt);
                cmd.Parameters.AddWithValue("@TotInstPlotsForAllotment", objBEL.TotInstPlotsForAllotment);
                cmd.Parameters.AddWithValue("@TotInstLandForAllotment", objBEL.TotInstLandForAllotment);

                cmd.Parameters.AddWithValue("@InstRatePerSqmt", objBEL.InstRatePerSqmt);
                cmd.Parameters.AddWithValue("@LandForFacilities", objBEL.LandForFacilities);
                cmd.Parameters.AddWithValue("@LandForRoad", objBEL.LandForRoad);
                cmd.Parameters.AddWithValue("@LandUnderGreenBelt", objBEL.LandUnderGreenBelt);

                cmd.Parameters.AddWithValue("@LandForPark", objBEL.LandForPark);
                cmd.Parameters.AddWithValue("@BulkLand", objBEL.BulkLand);
                cmd.Parameters.AddWithValue("@OtherLandArea", objBEL.OtherLandArea);
                cmd.Parameters.AddWithValue("@OtherLandDesc", objBEL.OtherLandDesc);

                cmd.Parameters.AddWithValue("@IndustriesAllowed", objBEL.IndustriesAllowed);
                cmd.Parameters.AddWithValue("@FacilitiesAvailable", objBEL.FacilitiesAvailable);
                cmd.Parameters.AddWithValue("@PollutionCategory", objBEL.PollutionCategory);
                cmd.Parameters.AddWithValue("@pollutionCategorystatus", objBEL.pollutionCategorystatus);
                cmd.Parameters.AddWithValue("@UseZone", objBEL.UseZone);
                cmd.Parameters.AddWithValue("@InstantAllotment", objBEL.InstantAllotment);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                #region NewGISCode

                cmd.Parameters.AddWithValue("@parksd", objBEL.parksd);
                cmd.Parameters.AddWithValue("@IAType", objBEL.TypeofindustrialArea);
                cmd.Parameters.AddWithValue("@MixedSector", objBEL.MixedSector);
                cmd.Parameters.AddWithValue("@SubSector", objBEL.SubSector);
                cmd.Parameters.AddWithValue("@NHighway", objBEL.NHighway);
                cmd.Parameters.AddWithValue("@DistNH", objBEL.DistNH);
                cmd.Parameters.AddWithValue("@SHighway", objBEL.SHighway);
                cmd.Parameters.AddWithValue("@DistSH", objBEL.DistSH);
                cmd.Parameters.AddWithValue("@RStation", objBEL.RStation);
                cmd.Parameters.AddWithValue("@DistRS", objBEL.DistRS);

                cmd.Parameters.AddWithValue("@Airport", objBEL.Airport);
                cmd.Parameters.AddWithValue("@DistAir", objBEL.DistAir);
                cmd.Parameters.AddWithValue("@Seaport", objBEL.Seaport);
                cmd.Parameters.AddWithValue("@Distport", objBEL.Distport);
                cmd.Parameters.AddWithValue("@DryPort", objBEL.DryPort);

                cmd.Parameters.AddWithValue("@Distdryport", objBEL.Distdryport);
                cmd.Parameters.AddWithValue("@DistRailS", objBEL.DistRailS);
                cmd.Parameters.AddWithValue("@Zonal", objBEL.Zonal);
                cmd.Parameters.AddWithValue("@DistZonal", objBEL.DistZonal);
                cmd.Parameters.AddWithValue("@PoliceSt", objBEL.PoliceSt);


                cmd.Parameters.AddWithValue("@DistPolice", objBEL.DistPolice);
                cmd.Parameters.AddWithValue("@FireSt", objBEL.FireSt);
                cmd.Parameters.AddWithValue("@DistFire", objBEL.DistFire);
                cmd.Parameters.AddWithValue("@Bank", objBEL.Bank);
                cmd.Parameters.AddWithValue("@DistBank", objBEL.DistBank);

                cmd.Parameters.AddWithValue("@Hospital", objBEL.Hospital);
                cmd.Parameters.AddWithValue("@DistHosp", objBEL.DistHosp);
                cmd.Parameters.AddWithValue("@ElectA", objBEL.ElectA);
                cmd.Parameters.AddWithValue("@ElectC", objBEL.ElectC);
                cmd.Parameters.AddWithValue("@ElectU", objBEL.ElectU);

                cmd.Parameters.AddWithValue("@WaterA", objBEL.WaterA);
                cmd.Parameters.AddWithValue("@WaterC", objBEL.WaterC);
                cmd.Parameters.AddWithValue("@WaterU", objBEL.WaterU);
                cmd.Parameters.AddWithValue("@GasA", objBEL.GasLine);
                cmd.Parameters.AddWithValue("@GasC", objBEL.GasC);

                cmd.Parameters.AddWithValue("@GasU", objBEL.GasU);
                cmd.Parameters.AddWithValue("@STPA", objBEL.STP);
                cmd.Parameters.AddWithValue("@STPC", objBEL.STPC);
                cmd.Parameters.AddWithValue("@STPU", objBEL.STPU);
                cmd.Parameters.AddWithValue("@EPoleA", objBEL.EPoleA);

                cmd.Parameters.AddWithValue("@PowerSSA", objBEL.PowerSSA);
                cmd.Parameters.AddWithValue("@PowerSSC", objBEL.PowerSSC);
                cmd.Parameters.AddWithValue("@PowerSSU", objBEL.PowerSSU);
                cmd.Parameters.AddWithValue("@WTPA", objBEL.WTP);
                cmd.Parameters.AddWithValue("@WTPC", objBEL.WTPC);

                cmd.Parameters.AddWithValue("@WTPU", objBEL.WTPU);
                cmd.Parameters.AddWithValue("@ICTA", objBEL.ICT);
                cmd.Parameters.AddWithValue("@ICTS", objBEL.ICTS);
                cmd.Parameters.AddWithValue("@SWDA", objBEL.SWDA);
                cmd.Parameters.AddWithValue("@SWDC", objBEL.SWDC);
                cmd.Parameters.AddWithValue("@SWDU", objBEL.SWDU);
                cmd.Parameters.AddWithValue("@DhA", objBEL.DhA);
                cmd.Parameters.AddWithValue("@PtA", objBEL.PtA);
                cmd.Parameters.AddWithValue("@OtherInformation", objBEL.OtherInformation);
                cmd.Parameters.AddWithValue("@EnvtClOb", objBEL.EnvtClOb);
                cmd.Parameters.AddWithValue("@TruckparkingCapecity", objBEL.TruckparkingCapecity);
                cmd.Parameters.AddWithValue("@DormitoriesCapecity", objBEL.DormitoriesCapecity);
                cmd.Parameters.AddWithValue("@ApprovalReffno", objBEL.ApprovalReffno);

                #endregion


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetpollutionCategory(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetCategory Industries", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CategoryID", objBEL.pollutionCategory);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetIndustrialAreaStatus()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetIndustrialAreaStatus", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 DeleteIndustrialAreaMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeletIndustrialAreaMaster", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetIndustrialAreaRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spIndustrialAreaRecords", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetregionalOfficeList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionaloffice_Detail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetdistictRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spDistrictRecords", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion



        #region PlotMasterNew
        public DataSet GetPlotStatusNew()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetPlotDetailsCodes]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetIANew(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[spGetIA]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet BindlstPlotsInListbox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetAllPlots]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@secid", objBEL.SectorID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetSectorsIAWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetSectorIAwise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@iaid", objBEL.IAId);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllLandBank(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[spAllLandBank]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@SectorID", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 PlotEntryInPlotMasterNew(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertUpdatePlotInMasterNew]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.PlotArea);
                cmd.Parameters.AddWithValue("@LandUse", objBEL.LandUse);
                cmd.Parameters.AddWithValue("@Category", objBEL.Category);
                cmd.Parameters.AddWithValue("@Status", objBEL.PlotStatus);
                cmd.Parameters.AddWithValue("@SubStatus", objBEL.PlotSubStatus);
                cmd.Parameters.AddWithValue("@FrontSide", objBEL.FrontSide);
                cmd.Parameters.AddWithValue("@BackSide", objBEL.BackSide);
                cmd.Parameters.AddWithValue("@Side1", objBEL.Side1);
                cmd.Parameters.AddWithValue("@Side2", objBEL.Side2);
                cmd.Parameters.AddWithValue("@PremisesUse", objBEL.PremisesUse);
                cmd.Parameters.AddWithValue("@ApplicableLocCharge", objBEL.ApplicableLocCharge);
                cmd.Parameters.AddWithValue("@LockStatus", objBEL.LockStatus);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Remark", objBEL.PlotRemark);
                cmd.Parameters.AddWithValue("@sectorid", objBEL.SectorID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeletePlotInPlotMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeletePlotInMasterNew]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@SectorID", objBEL.SectorID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetIALandLimits(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetLandAreaLimitIAWise]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.Parameters.AddWithValue("@landType", objBEL.LandUse);
                cmd.Parameters.AddWithValue("@Area", objBEL.PlotArea);
                cmd.Parameters.AddWithValue("@plotNo", objBEL.PlotNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPlotcategoryLandUseWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPlotCategoryLandUseWise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Parameter", objBEL.Parameter);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion


        public DataSet GetDemandPayAmount(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetdemandAmount", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandNo", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet TrackDetails(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TrackApplication", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet Get_Announcement_List(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetNewallotmentRequest", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 DeleteSignedCopyLetter(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SP_DeleteSignedCopyOfLetter", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetDemandPaymentDetailAfterTransaction(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetDemandPayDetailAfterTransaction", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetLandAllottementCompletedRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLandAllottementCompletedRecords_Sp ", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ServiceType", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UploadSignedCopyLetter(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_UploadSignedCopyOfLetter]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Name"       , objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocType", objBEL.Doctype);
                cmd.Parameters.AddWithValue("@Flag", objBEL.Flag);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #region Account
        public DataSet GetListOfApplication(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfApplicationIndustrialAreaAccount", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@ServiceType", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetListOfApplicationHOLevel(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfApplicationIndustrialArea", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@ServiceType", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetListOfApplicationForAccountClearanceGSTRepots(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetApplicationForAccountGSTReports]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@ServiceType", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetListOfApplicationForAccountClearanceRepots(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfApplicationForAccountClearanceReports]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@ServiceType", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetBifircatedPayment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetBifircatedPayment]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region Evaluation

        public Int32 Set_ServiceTicketChecklistBP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("Set_ServiceTicketChecklistBP", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@UserId", objBEL.UserId);
                cmd.Parameters.AddWithValue("@packetId", objBEL.packetID);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);

                cmd.Parameters.AddWithValue("@Far", objBEL.Far);
                cmd.Parameters.AddWithValue("@Groundcover", objBEL.Groundcover);
                cmd.Parameters.AddWithValue("@SetBackFront", objBEL.SetBackFront);
                cmd.Parameters.AddWithValue("@SetBackRear", objBEL.SetBackRear);
                cmd.Parameters.AddWithValue("@SetBackSide1", objBEL.SetBackSide1);
                cmd.Parameters.AddWithValue("@SetBackSide2", objBEL.SetBackSide2);

                //cmd.Parameters.AddWithValue("@Height", objBEL.Height);
                //cmd.Parameters.AddWithValue("@Occupancy", objBEL.Occupancy);
                //cmd.Parameters.AddWithValue("@NatureofOccupancy", objBEL.NatureofOccupancy);

                cmd.Parameters.AddWithValue("@Permissibility", objBEL.Permissibility);


                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.ModifiedBy);

                /////////////////  Update By Mr Manish
                cmd.Parameters.AddWithValue("@ExistingBasement", objBEL.ExistingBasement);
                cmd.Parameters.AddWithValue("@ExistingGroundFloor", objBEL.ExistingGroundFloor);
                cmd.Parameters.AddWithValue("@ExistingFirstFloor", objBEL.ExistingFirstFloor);
                cmd.Parameters.AddWithValue("@ExistingSecondFloor", objBEL.ExistingSecondFloor);
                cmd.Parameters.AddWithValue("@ExistingMezzanineFloor", objBEL.ExistingMezzanineFloor);
                cmd.Parameters.AddWithValue("@ProposedBasement", objBEL.ProposedBasement);
                cmd.Parameters.AddWithValue("@ProposedGroundFloor", objBEL.ProposedGroundFloor);
                cmd.Parameters.AddWithValue("@ProposedFirstFloor", objBEL.ProposedFirstFloor);
                cmd.Parameters.AddWithValue("@ProposedSecondFloor", objBEL.ProposedSecondFloor);
                cmd.Parameters.AddWithValue("@ProposedMezzanineFloor", objBEL.ProposedMezzanineFloor);
                cmd.Parameters.AddWithValue("@Foundation", objBEL.Foundation);
                cmd.Parameters.AddWithValue("@Floors", objBEL.Floors);
                cmd.Parameters.AddWithValue("@Walls", objBEL.Walls);
                cmd.Parameters.AddWithValue("@Roofs", objBEL.Roofs);
                cmd.Parameters.AddWithValue("@NoofStories", objBEL.NoofLatrines);
                cmd.Parameters.AddWithValue("@NoofLatrines", objBEL.NoofStories);
                cmd.Parameters.AddWithValue("@PurposeofBuildingUse", objBEL.PurposeofBuildingUse);
                cmd.Parameters.AddWithValue("@PreviousConstruction", objBEL.PreviousConstruction);
                cmd.Parameters.AddWithValue("@SourceofWater", objBEL.SourceofWater);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetBPBylawsByArea(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetByLawsByBuildingId", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UsepermisesCode", objBEL.UsepermisesCode);
                cmd.Parameters.AddWithValue("@Plot_Area", objBEL.totalPlotArea);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 SetAccountClearenceRecords(belBookDetails objBEL)
        {
            Int32 result;


            try
            {
                SqlCommand cmd = new SqlCommand("[SetAccountClearenceRecords]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAId);
                cmd.Parameters.AddWithValue("@UserID", objBEL.UserId);
                cmd.Parameters.AddWithValue("@PacketID", objBEL.packetID);
                cmd.Parameters.AddWithValue("@TicketID", objBEL.ticketID);
                cmd.Parameters.AddWithValue("@ServiceID", Int32.Parse(objBEL.serviceID));
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@SWCControlId", objBEL.SWCControlId);
                cmd.Parameters.AddWithValue("@SWCUnitId", objBEL.SWCUnitId);
                cmd.Parameters.AddWithValue("@SWCServiceId", objBEL.SWCServiceId);
                cmd.Parameters.AddWithValue("@SWCProcessIndustryId", objBEL.SWCProcessIndustryId);
                cmd.Parameters.AddWithValue("@SWCApplicationId", objBEL.SWCApplicationId);
                cmd.Parameters.AddWithValue("@SWCFeeAmount", objBEL.SWCFeeAmount);
                cmd.Parameters.AddWithValue("@SWCFeeStatus", objBEL.SWCFeeStatus);
                cmd.Parameters.AddWithValue("@SWCTransactionId", objBEL.SWCTransactionId);
                cmd.Parameters.AddWithValue("@SWCTransactionDate", objBEL.SWCTransactionDate);
                cmd.Parameters.AddWithValue("@SWCTransactionTime", objBEL.SWCTransactionTime);
                cmd.Parameters.AddWithValue("@SWCTransactionDatetime", objBEL.SWCTransactionDatetime);
                cmd.Parameters.AddWithValue("@SWCStatusCode", objBEL.SWCStatusCode);
                cmd.Parameters.AddWithValue("@SWCRemarks", objBEL.SWCRemarks);
                cmd.Parameters.AddWithValue("@upsidcAmtCreditConfirmation", objBEL.upsidcAmtCreditConfirmation);
                cmd.Parameters.AddWithValue("@modeofPaymentConfirmation", objBEL.modeofPaymentConfirmation);
                cmd.Parameters.AddWithValue("@gateway", objBEL.gateway);
                cmd.Parameters.AddWithValue("@OnlineOffline", objBEL.OnlineOffline);
                cmd.Parameters.AddWithValue("@TransDateConfirmation", objBEL.TransDateConfirmation);
                cmd.Parameters.AddWithValue("@PaymethodConfirmation", objBEL.PaymethodConfirmation);
                cmd.Parameters.AddWithValue("@TransID", objBEL.TransID);
                cmd.Parameters.AddWithValue("@TransAmountConfirmation", objBEL.TransAmountConfirmation);
                cmd.Parameters.AddWithValue("@TransrefnoConfirmation", objBEL.TransrefnoConfirmation);
                cmd.Parameters.AddWithValue("@amtreceivedConfirmation", objBEL.amtreceivedConfirmation);
                cmd.Parameters.AddWithValue("@CurrentStatus", objBEL.CurrentStatus);


                //  cmd.Parameters.Add("@MessageToBeReturned", SqlDbType.NVarChar).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@id", SqlDbType.Int).Direction = ParameterDirection.Output;

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                string id = cmd.Parameters["@id"].Value.ToString();
                cmd.Dispose();
                if (Int32.Parse(id) > 0)
                {
                    return Int32.Parse(id);
                }
                else
                {
                    return 0;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet Get_Notesheet_of_service(int PacketId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("Notesheet_of_service", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PacketId", PacketId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetevaluationData(int PacketId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GETDATAFOREVALAUTION", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PacketId", PacketId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet BindEvaluationChecklistGrid(int PacketId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ServiceTicketStatusChecklist", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PacketID", PacketId);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetcommitteeforAllotmentApproval(int PacketId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetcommitteeforAllotmentApproval", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PacketId", PacketId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;

        }

        public DataSet BindTicketGridView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("SERVICETICKETS", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@userID", objBEL.UserId);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindGridInprocess(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("testing", con);
                //SqlCommand cmd = new SqlCommand("GetAllotmentRequestInProcess", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 ServicePacketCreationforaAllotment(belBookDetails objBEL)
        {
            Int32 result;


            try
            {
                SqlCommand cmd = new SqlCommand("ServicePacketCreationforaAllotment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@UserID", objBEL.UserId);
                //  cmd.Parameters.Add("@MessageToBeReturned", SqlDbType.NVarChar).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("@id", SqlDbType.Int).Direction = ParameterDirection.Output;

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                string id = cmd.Parameters["@id"].Value.ToString();
                cmd.Dispose();
                if (Int32.Parse(id) > 0)
                {
                    return Int32.Parse(id);
                }
                else
                {
                    return 0;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public string ServiceTicketCreationforaAllotment(belBookDetails objBEL)
        {
            string return_string = "";
            try
            {
                SqlCommand cmd = new SqlCommand("SERVICETICKETCREATIONTHOUGHPACKET_Temp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PacketID", objBEL.packetID);
                cmd.Parameters.AddWithValue("@Operation", objBEL.operationID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                adp.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    return_string = (dt.Rows[0]["Message"].ToString().Trim()).Trim();
                }
                else
                {
                    return_string = "Ticket Creation Failed";
                }

                return return_string;
            }
            catch (Exception ex)
            {
                return "Ticket Creation Failed !";
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetapplicableChargesnData(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("TempServiceApplicableFees", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetPaymentDetailTransactionWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPaymentDetailsTransactionWise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TranID", objBEL.TranID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetapplicableChargesnDataAC(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ServiceApplicableFeesSTORE", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetApplicableFeesFromTransaction(string ref_no_upsidc)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApplicableFeesFromTransaction", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ref_no_upsidc", ref_no_upsidc);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public string UpdateAllotteTransaction(belBookDetails objBEL)
        {
            string result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SetTransactionDataAfterGateway]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ref_no_upsidc", objBEL.PayTrans_unique_ref_UPSIDC);
                cmd.Parameters.AddWithValue("@unique_ref_gateway", objBEL.PayTrans_unique_ref);

                cmd.Parameters.AddWithValue("@response_code", objBEL.PayTrans_response_code);
                cmd.Parameters.AddWithValue("@service_tax", objBEL.PayTrans_service_tax);
                cmd.Parameters.AddWithValue("@processing_fee_amt", objBEL.PayTrans_processing_fee_amt);
                cmd.Parameters.AddWithValue("@total_amt", objBEL.PayTrans_total_amt);
                cmd.Parameters.AddWithValue("@trn_amt", objBEL.PayTrans_trn_amt);
                cmd.Parameters.AddWithValue("@trn_date", objBEL.PayTrans_trn_date);
                cmd.Parameters.AddWithValue("@interchange_val", objBEL.PayTrans_interchange_val);
                cmd.Parameters.AddWithValue("@tdr", objBEL.PayTrans_tdr);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@submer", objBEL.PayTrans_submer);
                cmd.Parameters.AddWithValue("@tps", objBEL.PayTrans_tps);
                cmd.Parameters.AddWithValue("@PayTrans_id", objBEL.PayTrans_id);
                cmd.Parameters.AddWithValue("@rs", objBEL.PayTrans_rs);
                cmd.Parameters.AddWithValue("@GatewayResponse", objBEL.GatewayResponse);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                adp.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    result = dt.Rows[0]["Message"].ToString();
                }
                else
                {
                    result = "Failed";
                }


                return result;

            }
            catch (Exception ex)
            {
                result = ex.ToString();
                return result;
            }
        }

        public DataSet GetServiceAccountClearenceRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceAccountClearenceRecords", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TicketID", objBEL.ticketID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public DataSet GetServiceTicketTags()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceTicketTags", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region

        public DataSet PlotBankAvailableForAllotment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("PlotBankAvailableForAllotment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet BindlstPlotsListbox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllPlots", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid",  objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@secid", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@Type",  objBEL.Parameter);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet BindlstPlotsListboxSearch(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[PlotBankSearch]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@SectorID", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@SearchText", objBEL.searchText);
                cmd.Parameters.AddWithValue("@Type", objBEL.Parameter);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetDefaultersList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetDefaultersList", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetIndustrialAreaDetailsHODashboard()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetIndustrialAreaDetailsHODashboard", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 AdvertisePlots(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("AdvertisePlots", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@plotID", SqlDbType.VarChar).Value = objBEL.PlotID;
                cmd.Parameters.Add("@UserName", SqlDbType.VarChar).Value = objBEL.UserName;
                cmd.Parameters.Add("@id", SqlDbType.Int).Direction = ParameterDirection.Output;

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                string id = cmd.Parameters["@id"].Value.ToString();
                cmd.Dispose();
                if (Int32.Parse(id) > 0)
                {
                    return Int32.Parse(id);
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet PlotsForCancelation(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("PlotBank", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 CancelPlots(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("CancelAllotments", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@plotID", SqlDbType.VarChar).Value = objBEL.PlotID;
                cmd.Parameters.AddWithValue("@Ground", objBEL.CancellationGround);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);

                cmd.Parameters.Add("@id", SqlDbType.Int).Direction = ParameterDirection.Output;

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                string id = cmd.Parameters["@id"].Value.ToString();
                cmd.Dispose();
                if (Int32.Parse(id) > 0)
                {
                    return Int32.Parse(id);
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet BindCancelledPlotsListbox(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("PLOTCANCELSTATUS", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@iaid", objBEL.industrialAreaID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GroundForCancelation(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("RecomendationGrounds", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@RegulationID", objBEL.RegulationID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPlotStatus()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPlotStatus", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 DeletePlotPlotMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeletePlotInMaster]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@SectorID", objBEL.SectorID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 PlotEntryInPlotMaster(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertUpdatePlotInMasterNewest]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAId);
                cmd.Parameters.AddWithValue("@sectorid", objBEL.SectorID);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.PlotArea);
                cmd.Parameters.AddWithValue("@LandUse", objBEL.LandUse);
                cmd.Parameters.AddWithValue("@Category", objBEL.Category);
                cmd.Parameters.AddWithValue("@Status", objBEL.PlotStatus);
                cmd.Parameters.AddWithValue("@SubStatus", objBEL.PlotSubStatus);
                cmd.Parameters.AddWithValue("@FrontSide", objBEL.FrontSide);
                cmd.Parameters.AddWithValue("@BackSide", objBEL.BackSide);
                cmd.Parameters.AddWithValue("@Side1", objBEL.Side1);
                cmd.Parameters.AddWithValue("@Side2", objBEL.Side2);
                cmd.Parameters.AddWithValue("@PremisesUse", objBEL.PremisesUse);
                cmd.Parameters.AddWithValue("@ApplicableLocCharge", objBEL.ApplicableLocCharge);
                cmd.Parameters.AddWithValue("@LockStatus", objBEL.LockStatus);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Remark", objBEL.PlotRemark);
                cmd.Parameters.AddWithValue("@NorthID", objBEL.NorthID);
                cmd.Parameters.AddWithValue("@SouthID", objBEL.SouthID);
                cmd.Parameters.AddWithValue("@EastID", objBEL.EastID);
                cmd.Parameters.AddWithValue("@WestID", objBEL.WestID);
                cmd.Parameters.AddWithValue("@TracingName", objBEL.LAName);
                cmd.Parameters.AddWithValue("@TracingContent", objBEL.LAContentType);
                cmd.Parameters.AddWithValue("@Tracing", objBEL.LADocumentsMap);
                if (objBEL.AssetStatus == "1")
                {
                    cmd.Parameters.AddWithValue("@AssetStatus", objBEL.AssetStatus);
                    cmd.Parameters.AddWithValue("@AssetDesc", objBEL.AssetDesc);
                    cmd.Parameters.AddWithValue("@AssetValue", objBEL.AssetValue);
                }
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetPlotSubStatus(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetPlotSubStatus", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@StatusID", objBEL.PlotStatus);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region "AllotteeApplication"
        public DataSet GetListOfVacantPlotsIAWise(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfVacantPlot", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAIdParam);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetapplicableChargesnDataforAllotment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableChargesnDataforAllotment", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@IAID", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.choicearea);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet ApplicationLandAllotmentInHouse(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[ApplicationLandAllotmnentInhouse]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@PreferedPlotSize", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Preference1", objBEL.Preference1);
                cmd.Parameters.AddWithValue("@Preference2", objBEL.Preference2);
                cmd.Parameters.AddWithValue("@Preference3", objBEL.Preference3);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet ApplicationLandAllotmentNiveshMitra(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[ApplicationLandAllotmnentNiveshMitra]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ApplicantName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@ApplicantAddress", objBEL.applicantAddress);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.companyName);
                cmd.Parameters.AddWithValue("@PanCardNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@PreferedPlotSize", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@ControlId", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@UnitId", objBEL.UnitId);
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.SWCRequestID);
                cmd.Parameters.AddWithValue("@Preference1", objBEL.Preference1);
                cmd.Parameters.AddWithValue("@Preference2", objBEL.Preference2);
                cmd.Parameters.AddWithValue("@Preference3", objBEL.Preference3);
                cmd.Parameters.AddWithValue("@Amount", objBEL.NiveshMitraAmt);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet CheckControlIdAlreadyExist(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("CheckControlIdAlreadyExist", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ControlID", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@UnitID",    objBEL.UnitId);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.SWCRequestID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCompanyType()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetCompanyType", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveApplicantImage(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantImage]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetIAContact(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("IAcontactDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet CheckIARatesExistOrNot(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetIARateForChecking", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetPriorityCategory()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPriorityCategory", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAllServiceChecklists(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceChecklists_Allotment", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Bit", objBEL.Status);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 SaveServiceChecklistDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SP_UploadChecklistfile", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetInspectionReport(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetInspectionreport", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetHeadOfficeMinute(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("sp_GetHeadOfficeMinutes", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCoverLetter(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("sp_GetCoverLetter", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetCheckListDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetCheckListDocumentDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 DeleteCheckListDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteCheckListDocument_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetNewApplicantDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("Sp_GetNewApplicantDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetLAApplicantDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetLAApplicantDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetNewApplicantDetailsInternal(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_GetNewApplicantDetailsInternals]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNoMain", objBEL.ApplicationID);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetTempReqIDFromMain(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetTempReqIDFromMainID", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetTempReqIDFromMainID(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("Sp_GetNewApplicantDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCheckAllotmentNo(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ZNK_GetCheckAllotmentNo", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@MobileNo", objBEL.MobileNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetTransactionDetailsByServiceReqNo(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetTransactiondetailsFromServiceReqNo", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet UpdateApplicantDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateNewApplicantDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GSTNo);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 ClearShareHolder(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearShareHolders]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateURN(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[InsertURNNo_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TraID", objBEL.TranID);
                cmd.Parameters.AddWithValue("@TransactionDate", objBEL.ChallanDate);
                cmd.Parameters.AddWithValue("@TransactionAmount", objBEL.PayTrans_trn_amt);
                cmd.Parameters.AddWithValue("@URNNumber", objBEL.URNNo);
                cmd.Parameters.AddWithValue("@PaymentDate", objBEL.PayDate);
                cmd.Parameters.AddWithValue("@BankName", objBEL.BankName);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveShareHolderDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantShareHolders]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 ChangeStatusSWP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_ChangeStatusSWP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@SWPControlID", objBEL.SWCControlID);
                cmd.Parameters.AddWithValue("@SWPUnitID", objBEL.SWCUnitId);
                cmd.Parameters.AddWithValue("@SWPServiceID", objBEL.SWCServiceID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveDirectorsDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantDirectors]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@DirectorName", objBEL.DirectorName);
                cmd.Parameters.AddWithValue("@Address", objBEL.DirectorAddress);
                cmd.Parameters.AddWithValue("@DinPan", objBEL.DirectorDinPan);
                cmd.Parameters.AddWithValue("@Phone", objBEL.DirectorPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.DirectorEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveTrusteeDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantTrustee]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@TrusteeName", objBEL.TrusteeName);
                cmd.Parameters.AddWithValue("@Address", objBEL.TrusteeAddress);
                cmd.Parameters.AddWithValue("@Phone", objBEL.TrusteePhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.TrusteeEmail);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SavePartnerDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantPartners]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PartnerName", objBEL.PartnerName);
                cmd.Parameters.AddWithValue("@Address", objBEL.PartnerAddress);
                cmd.Parameters.AddWithValue("@PartnerPer", objBEL.PartnerPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.PartnerPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.PartnerEmail);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 UpdateApplicantProjectDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[AllotteeApplicationProjectDetails_sp1]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@IndustryType", objBEL.IndustryType);
                cmd.Parameters.AddWithValue("@EstimatedCostOfProject", objBEL.EstimatedCostOfProject);
                cmd.Parameters.AddWithValue("@EstimatedEmploymentGeneration", objBEL.EstimatedEmploymentGeneration);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@OpenAreaRequired", objBEL.OpenAreaRequired);
                cmd.Parameters.AddWithValue("@LandDetails", objBEL.LandDetails);
                cmd.Parameters.AddWithValue("@BuildingDetails", objBEL.BuildingDetails);
                cmd.Parameters.AddWithValue("@MachineryEquipmentsDetails", objBEL.MachineryEquipmentsDetails);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidqty", objBEL.IndustrialEffluentSolidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentSolidComposition", objBEL.IndustrialEffluentSolidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidqty", objBEL.IndustrialEffluentLiquidqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentLiquidComposition", objBEL.IndustrialEffluentLiquidComposition);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousqty", objBEL.IndustrialEffluentGaseousqty);
                cmd.Parameters.AddWithValue("@IndustrialEffluentGaseousComposition", objBEL.IndustrialEffluentGaseousComposition);
                cmd.Parameters.AddWithValue("@FumeGenerationStatus", objBEL.FumeGenerationStatus);
                cmd.Parameters.AddWithValue("@FumeQuantity", objBEL.FumeQuantity);
                cmd.Parameters.AddWithValue("@FumeNature", objBEL.FumeNature);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure1", objBEL.EffluentTreatmentMeasure1);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure2", objBEL.EffluentTreatmentMeasure2);
                cmd.Parameters.AddWithValue("@EffluentTreatmentMeasure3", objBEL.EffluentTreatmentMeasure3);
                cmd.Parameters.AddWithValue("@PowerReqInKW", objBEL.PowerReqInKW);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear1", objBEL.TelephoneReqFirstYear1);
                cmd.Parameters.AddWithValue("@TelephoneReqFirstYear2", objBEL.TelephoneReqFirstYear2);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate1", objBEL.TelephoneReqUltimate1);
                cmd.Parameters.AddWithValue("@TelephoneReqUltimate2", objBEL.TelephoneReqUltimate2);
                cmd.Parameters.AddWithValue("@ApplicantPriorityStatus", objBEL.ApplicantPriorityStatus);
                cmd.Parameters.AddWithValue("@ApplicantPrioritySpecification", objBEL.ApplicantPrioritySpecification);
                cmd.Parameters.AddWithValue("@OtherFixedAssets", objBEL.OtherFixedAssets);
                cmd.Parameters.AddWithValue("@OtherExpenses", objBEL.OtherExpenses);
                cmd.Parameters.AddWithValue("@projectstartmonths", objBEL.projectstartmonths);
                cmd.Parameters.AddWithValue("@workexperience", objBEL.workexperience);
                cmd.Parameters.AddWithValue("@NetTurnOver", objBEL.NetTurnOver);
                cmd.Parameters.AddWithValue("@ExpansionOfLand", objBEL.ExpansionOfLand);
                cmd.Parameters.AddWithValue("@ExportOriented", objBEL.ExportOriented);
                cmd.Parameters.AddWithValue("@IAType", objBEL.IAType);
                cmd.Parameters.AddWithValue("@IACategory", objBEL.IAcategory);
                cmd.Parameters.AddWithValue("@ExisPlotNo", objBEL.ExistingPlotNo);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.ExistingAllotteeName);
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@NetWorth", objBEL.Networth);
                if (objBEL.AllotmentDate.ToString().Length > 0)
                {
                    cmd.Parameters.AddWithValue("@AllotmentDate", objBEL.AllotmentDate);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@AllotmentDate", DBNull.Value);
                }
                cmd.Parameters.AddWithValue("@PropProduct", objBEL.ProductManufactured);
                cmd.Parameters.AddWithValue("@ETPReq", objBEL.EtpRequired);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateApplicantAccountsDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateApplicantAccountsDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PayeeName", objBEL.PayeeName);
                cmd.Parameters.AddWithValue("@BankName", objBEL.PayeeBankName);
                cmd.Parameters.AddWithValue("@AccountNo", objBEL.AccountNo);
                cmd.Parameters.AddWithValue("@IFSCCode", objBEL.IFSCCode);
                cmd.Parameters.AddWithValue("@BranchName", objBEL.BranchName);
                cmd.Parameters.AddWithValue("@BranchAddress", objBEL.BranchAddress);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveApplicationForm(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicationForm]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicationForm", objBEL.ApplicationForm);
                cmd.Parameters.AddWithValue("@FormName", objBEL.FormName);
                cmd.Parameters.AddWithValue("@FormContent", objBEL.FormContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region "New_UpcomingIndustrial"

        public DataSet GetVacentPlotDetailForCM(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetVacentPlotDetailforCM", con);
                cmd.Parameters.AddWithValue("@CorporationID", objBEL.CorporationID);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.searchText);

                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetProductionNotStarted(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetProductionNotStartedList", con);
                cmd.Parameters.AddWithValue("@CorporationID", objBEL.CorporationID);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.searchText);

                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetSickUnits(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetSickUnitsList", con);

                cmd.Parameters.AddWithValue("@CorporationID", objBEL.CorporationID);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.searchText);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCM_REPORTS(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("CM_REPORTS", con);
                cmd.Parameters.AddWithValue("@CorporationID", objBEL.CorporationID);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@ReginString", objBEL.RegionalOffice);
                if (objBEL.IAId == 0)
                {
                    cmd.Parameters.AddWithValue("@IAString", DBNull.Value);
                }
                else
                {
                    cmd.Parameters.AddWithValue("@IAString", objBEL.IAId);
                }

                cmd.Parameters.AddWithValue("@ReportType", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@PreConditionType", objBEL.RequestReportCondition);
                cmd.Parameters.AddWithValue("@PreConditionValue", objBEL.RequestReportConditionVal);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.searchText);

                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }





        public DataSet GetPreCM_New_UpcomingIndustrialDetail(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("CM_PORTAL_PreNewUpcomingIndustrialArea", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AreaID", objBEL.ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCM_New_UpcomingIndustrialDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_CM_GetUpcomingIndustrialDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@CompanyId", objBEL.Companyid);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SaveCM_New_UpcomingIndustrialDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("CM_PORTAL_InsertNewUpcomingIndustrialArea", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@IAId", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                //cmd.Parameters.AddWithValue("@VacantType", objBEL.VacantType);
                cmd.Parameters.AddWithValue("@NameofScheme", objBEL.NameofScheme);
                cmd.Parameters.AddWithValue("@Location", objBEL.Location);
                cmd.Parameters.AddWithValue("@SponsorAgency", objBEL.SponsorAgency);
                cmd.Parameters.AddWithValue("@NumberofArea", objBEL.NumberofArea);
                //cmd.Parameters.AddWithValue("@ProjectDetail", objBEL.ProjectDetail);
                cmd.Parameters.AddWithValue("@Developed", objBEL.Developed);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@LandStatus", objBEL.LandStatus);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@WebURL", objBEL.WebURL);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateCM_New_UpcomingIndustrialDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("CM_PORTAL_UpdateNewUpcomingIndustrialArea", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                //cmd.Parameters.AddWithValue("@VacantType", objBEL.VacantType);
                cmd.Parameters.AddWithValue("@NameofScheme", objBEL.NameofScheme);
                cmd.Parameters.AddWithValue("@Location", objBEL.Location);
                cmd.Parameters.AddWithValue("@SponsorAgency", objBEL.SponsorAgency);
                cmd.Parameters.AddWithValue("@NumberofArea", objBEL.NumberofArea);
                //cmd.Parameters.AddWithValue("@ProjectDetail", objBEL.ProjectDetail);
                cmd.Parameters.AddWithValue("@Developed", objBEL.Developed);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@LandStatus", objBEL.LandStatus);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@WebURL", objBEL.WebURL);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeleteCM_New_UpcomingIndustrialDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("CM_PORTAL_DeleteNewUpcomingIndustrialArea", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AreaID", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region "LegalCaseType"
        public DataSet GetAlloteeID(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteID", con);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetlegalcaseType()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLegalCaseType", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetlJurisdictionListBinding()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetJurisdictionList", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetPlotDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPlotDetails", con);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveCaseDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SP_UploadCaselistfile", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CaseID", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@RefrenceID", objBEL.ReferenceNumber);
                cmd.Parameters.AddWithValue("@HearingDate", objBEL.DateOfExecutionAgreement);
                cmd.Parameters.AddWithValue("@Description", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetcaseID()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCaseID", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveNewCaseDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertLegalCaseDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicantId", objBEL.ApplicationID);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@WeAre", objBEL.Weare);
                cmd.Parameters.AddWithValue("@LTPartyName", objBEL.LtPartyName);
                cmd.Parameters.AddWithValue("@Jurisdiction", objBEL.Jurisdiction);
                cmd.Parameters.AddWithValue("@CourtDetails", objBEL.CourtDetails);
                cmd.Parameters.AddWithValue("@InCourtOf", objBEL.InCourtof);
                cmd.Parameters.AddWithValue("@MatterDetails", objBEL.MatterDetails);
                cmd.Parameters.AddWithValue("@CaseStatus", objBEL.CaseStatus);
                cmd.Parameters.AddWithValue("@LitigatingParty", objBEL.LitigatingParty);
                cmd.Parameters.AddWithValue("@PetAdvocateName", objBEL.PetAdvocateName);
                cmd.Parameters.AddWithValue("@PetAdvocateAddress", objBEL.PetAddress);
                cmd.Parameters.AddWithValue("@PetAdvocateContact", objBEL.PetContactNo);
                cmd.Parameters.AddWithValue("@ResAdvocateName", objBEL.ResAdvocateName);
                cmd.Parameters.AddWithValue("@ResAdvocateAddress", objBEL.ResAddress);
                cmd.Parameters.AddWithValue("@ResAdvocateContact", objBEL.ResContact);
                cmd.Parameters.AddWithValue("@CaseReleted", objBEL.legalcase);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CaseDate", objBEL.DateOfExecutionAgreement);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveCaseDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SP_SaveCaseDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NextHearingDate", objBEL.DateOfExecutionAgreement);
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@Status", objBEL.CaseStatus);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetLegalCasehistoryMaster(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLegalCasehistory_sp", con);
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetlegalhistoryDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLegalhistoryDocument_SP", con);
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetLegalCasehistory(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLegalhistoryCaseWise", con);
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetLegalAllCasehistory(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLegalALLhistoryCaseWise", con);
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@DateofRegistration", objBEL.DateOfExecutionAgreement);
                cmd.Parameters.AddWithValue("@CaseRelatedto", objBEL.legalcase);
                cmd.Parameters.AddWithValue("@CaseStatus", objBEL.CaseStatus);
                cmd.Parameters.AddWithValue("@Jurisdictiory", objBEL.Jurisdiction);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 DeleteLegalhistoryCaseWise(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteLegalhistoryCaseWise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetCheckListDocuments(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetCaseListDocumentDetail", con);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCaselistsDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetCaselists_SP1", con);
                cmd.Parameters.AddWithValue("@CaseID", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@RefrenceID", objBEL.ReferenceNumber);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCasehistoryDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCasehistoryDocument", con);
                cmd.Parameters.AddWithValue("@CaseNo", objBEL.CaseID);
                cmd.Parameters.AddWithValue("@HearingDate", objBEL.DateOfExecutionAgreement);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 DeleteCaseListDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteCaseList_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DocID", objBEL.DocumentID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion


        #region "VacantPlots"
        public DataSet GetCM_PreVacentPlot(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPreVacentPlot_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@VacentId", objBEL.ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCM_VacentPlotDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetVacentPlotDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@CompanyId", objBEL.Companyid);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SaveCM_VacentPlotDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertVacentPlotDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@VacantType", objBEL.VacantType);
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateCM_VacentPlotDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateVacentPlotDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@VacantType", objBEL.VacantType);
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteCM_VacentPlotDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteVacentPlotDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@VacentId", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region "ProductionDetail"
        public DataSet GetCM_PreProductionDetail(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPreProductionDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ProductionID", objBEL.ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCM_ProductionDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_CM_GetProductionDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@CompanyId", objBEL.Companyid);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SaveCM_ProductionDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertProductionDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@AllotmentIssueDate", objBEL.AllotmentIssueDate);
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@NameofUnit", objBEL.NameofUnit);
                cmd.Parameters.AddWithValue("@NameofOwner", objBEL.NameofOwner);
                cmd.Parameters.AddWithValue("@ContactNumber", objBEL.ContactNumber);
                cmd.Parameters.AddWithValue("@Address", objBEL.Address);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateCM_ProductionDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateProductionDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@AllotmentIssueDate", objBEL.AllotmentIssueDate);
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@NameofUnit", objBEL.NameofUnit);
                cmd.Parameters.AddWithValue("@NameofOwner", objBEL.NameofOwner);
                cmd.Parameters.AddWithValue("@ContactNumber", objBEL.ContactNumber);
                cmd.Parameters.AddWithValue("@Address", objBEL.Address);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteCM_ProductionDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteProductionDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ProductionID", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region CM
        public Int32 CM_CheckLogin(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_CM_Portal_InternalUserLogin]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pLoginName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@pPassword", objBEL.Password);
                //    cmd.Parameters.AddWithValue("@Idendical", objBEL.Roll);

                //Add the output parameter to the command object
                SqlParameter outPutParameter = new SqlParameter();
                outPutParameter.ParameterName = "@responseMessage";
                outPutParameter.SqlDbType = System.Data.SqlDbType.NVarChar;
                outPutParameter.Direction = System.Data.ParameterDirection.Output;
                outPutParameter.Size = 50;
                cmd.Parameters.Add(outPutParameter);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.Dispose();
                //Retrieve the value of the output parameter


                if (result == 0)
                {
                    objBEL.responseMessage = outPutParameter.Value.ToString();
                    return result;
                }
                else
                {
                    objBEL.responseMessage = outPutParameter.Value.ToString();
                    return 0;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetCMUserCompany(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_CM_Portal_InternalUserDetail]", con);
                cmd.Parameters.AddWithValue("@pLoginName", objBEL.UserName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCMregionalNameRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetCM_CONameDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CName", objBEL.CorporationName);
                //cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCM_RegionNameIndustrialDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetCM_RegionNameDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                //cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion
        #region "ProductionDetail"
        public DataSet GetCM_PreSickUnitsDetail(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPreSickUnitDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ProductionID", objBEL.ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetCM_SickUnitsDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetSickUnitsDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@CompanyId", objBEL.Companyid);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SaveCM_SickUnitsDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertSickUnitsDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@AllotmentIssueDate", objBEL.AllotmentIssueDate);
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@NameofUnit", objBEL.NameofUnit);
                cmd.Parameters.AddWithValue("@NameofOwner", objBEL.NameofOwner);
                cmd.Parameters.AddWithValue("@ContactNumber", objBEL.ContactNumber);
                cmd.Parameters.AddWithValue("@Address", objBEL.Address);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateCM_SickUnitsDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateSickUnitsDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAName);
                cmd.Parameters.AddWithValue("@CorporationName", objBEL.CorporationName);
                cmd.Parameters.AddWithValue("@AllotmentIssueDate", objBEL.AllotmentIssueDate);
                cmd.Parameters.AddWithValue("@PlotNumber", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@NameofUnit", objBEL.NameofUnit);
                cmd.Parameters.AddWithValue("@NameofOwner", objBEL.NameofOwner);
                cmd.Parameters.AddWithValue("@ContactNumber", objBEL.ContactNumber);
                cmd.Parameters.AddWithValue("@Address", objBEL.Address);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remark);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteCM_SickUnitsDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteSickUnitsDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ProductionID", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region "Engineering"

        public Int32 InsertEngineeringDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertEngineeringDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@ConstructionName", objBEL.ConstructionName);
                //cmd.Parameters.AddWithValue("@NameofWork", objBEL.Nameofwork);
                //cmd.Parameters.AddWithValue("@JobNo", objBEL.JobNo);
                //cmd.Parameters.AddWithValue("@Amount", objBEL.Amount);
                //cmd.Parameters.AddWithValue("@ConstructionID", objBEL.ConstructionID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetServiceChecklists1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetServiceChecklists_SP1", con);
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceChecklistId);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@ServiceCondition", objBEL.ServiceChecklistCondition);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 UpdateEngineeringDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateEngineeringDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@FinancialYear", objBEL.Financialyear);
                cmd.Parameters.AddWithValue("@ConstructionName", objBEL.ConstructionName);
                cmd.Parameters.AddWithValue("@NameofWork", objBEL.Nameofwork);
                cmd.Parameters.AddWithValue("@JobNo", objBEL.JobNo);
                cmd.Parameters.AddWithValue("@Amount", objBEL.Amount);
                //cmd.Parameters.AddWithValue("@Date", objBEL.Date);
                cmd.Parameters.AddWithValue("@CBNO", objBEL.CBNO);
                //cmd.Parameters.AddWithValue("@ExDate", objBEL.ExDate);
                cmd.Parameters.AddWithValue("@ExAmount", objBEL.ExAmount);
                cmd.Parameters.AddWithValue("@AgencyName", objBEL.AgencyName);
                cmd.Parameters.AddWithValue("@GrossworkDone", objBEL.GrossWork);
                cmd.Parameters.AddWithValue("@StatusofWork", objBEL.Statusofwork);
                cmd.Parameters.AddWithValue("@Status", objBEL.Statusofwork1);
                cmd.Parameters.AddWithValue("@AreaDeveloped", objBEL.AreaDeveloped);
                cmd.Parameters.AddWithValue("@Remark", objBEL.Remark);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeleteEngineeringDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteEngineeringDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@EngId", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetEngineeringDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetEngineeringDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.Parameters.AddWithValue("@Filter", objBEL.IAName);
                cmd.Parameters.AddWithValue("@FilterCD", objBEL.ConstructionName);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetIndustrialAreaEngineeringDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetIndustrialAreaEngineeringDetail", con);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                //cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                //cmd.Parameters.AddWithValue("@par", objBEL.Parameter);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetConstructionDivisionsRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetCDivisionsDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetIndustrialAreaCDDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetIndustrialAreaCDDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        #endregion

        #region "lastupdated"

        public DataSet GetIATransferLevySearchDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetIATransferLevySearchDetail_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAIdParam", objBEL.IAIdParam);
                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetIALeaseRateSearchDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetIALeaseRatesSearchDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAIdParam", objBEL.IAIdParam);
                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetIndustrialAreaDetailRegWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetIndustrialAreaDetailRegWise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Region", objBEL.Region);
                cmd.Parameters.AddWithValue("@txtsearch", objBEL.Parameter);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetRegionalOffice(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionalOffice", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@txtSearch", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet SearchInternalUser(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("SearchInternalUser", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@txtSearch", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }





        public DataSet GetRegionalOfficeParam(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionalOfficeParam", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Region", objBEL.Region);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public DataSet GetRegionalOfficeAll()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[spGetRegionalOfficeAll]", con);
                cmd.CommandType = CommandType.StoredProcedure;


                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetIAUserRoleWise(string IA)

        {
            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("GetIAUserRoleWise_sp", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@IA", IA);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }


        public DataSet GetUserRole(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("GetUserRole_sp", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@userName", objBEL.Parameter);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }



        public Int32 InsertIALeaseRate(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertIALeaseRateMaster_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@RateID", objBEL.RateID);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialAreaId);
                cmd.Parameters.AddWithValue("@MinPeriod", objBEL.MinPeriod);
                cmd.Parameters.AddWithValue("@MaxPeriod", objBEL.MaxPeriod);
                cmd.Parameters.AddWithValue("@Rate", objBEL.LeaseRate);
                cmd.Parameters.AddWithValue("@Effective_From", objBEL.Effective_From);
                cmd.Parameters.AddWithValue("@Effective_To", objBEL.Effective_To);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }






        public DataSet GetIALeaseRateDetails(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("GetIALeaseRatesDetail_sp1", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@IAIdParam", objBEL.IAIdParam);

                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@search", objBEL.searchText);

                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;


        }



        public DataSet GetIAMaintenanceChargeDetails(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("[GetIAMaintenanceChargeDetail_sp]", con);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAIdParam", objBEL.IAIdParam);
                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@search", objBEL.searchText);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }



        public Int32 DeleteIAMaintenanceCharge(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteIAMaintenanceCharge_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RateId", objBEL.LeaseRateId);
                cmd.Parameters.AddWithValue("@IA", objBEL.IAName);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetIAMaintenanceChargePrev(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("[GetPrevMaintenceCharge_sp]", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@LeaseRateIdParam", objBEL.LeaseRateIdParam);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }


            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }



        public Int32 DeleteIALeaseRate(belBookDetails objBel)
        {
            BooksDetails_DAL objDal = new BooksDetails_DAL();
            try
            {
                return objDal.DeleteIALeaseRate(objBel);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objDal = null;
            }
        }



        public DataSet GetIALeaseRatePrev(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("GetPrevIALeaseRate_sp", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@LeaseRateIdParam", objBEL.LeaseRateIdParam);



                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }



        public DataSet GetIAMinPeriodLease(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("GetIAMinPeriodLease", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ia", objBEL.IAName);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }


        public Int32 InsertTransferLevyPer(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertTransferLevyPerMaster_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@RateID", objBEL.RateID);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialAreaId);
                cmd.Parameters.AddWithValue("@MinPeriod", objBEL.MinPeriod);
                cmd.Parameters.AddWithValue("@MaxPeriod", objBEL.MaxPeriod);
                cmd.Parameters.AddWithValue("@Rate", objBEL.LeaseRate);
                cmd.Parameters.AddWithValue("@Effective_From", objBEL.Effective_From);
                cmd.Parameters.AddWithValue("@Effective_To", objBEL.Effective_To);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        public DataSet GetTimeExtensionPerDetails(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetIATimeExtensionDetail_sp1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAIdParam", objBEL.IAIdParam);
                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@search", objBEL.searchText);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;

        }


        public DataSet GetTransferLevyPerDetails(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("GetIATransferLevyDetail_sp1", con);

                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAIdParam", objBEL.IAIdParam);
                cmd.Parameters.AddWithValue("@ParamType", objBEL.ParamType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@search", objBEL.searchText);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }

        public Int32 DeleteIATimeExtension(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteIATimeExtension_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RateId", objBEL.LeaseRateId);
                cmd.Parameters.AddWithValue("@IA", objBEL.IAName);
                cmd.Parameters.AddWithValue("@minPeriod", objBEL.MinPeriod);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeleteIATransferLevy(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteIATransferLevy_Sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RateId", objBEL.LeaseRateId);
                cmd.Parameters.AddWithValue("@IA", objBEL.IAName);
                cmd.Parameters.AddWithValue("@minPeriod", objBEL.MinPeriod);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetIATransferLevyPrev(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("[GetPrevIATransferLevy_sp]", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@LeaseRateIdParam", objBEL.LeaseRateIdParam);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }


        public DataSet GetIATimeExtensionPrev(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("[GetPrevIATimeExtension_sp]", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@LeaseRateIdParam", objBEL.LeaseRateIdParam);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }

        public DataSet GetIAMinPeriodTransferLevy(belBookDetails objBEL)

        {

            DataSet ds = new DataSet();

            try

            {

                SqlCommand cmd = new SqlCommand("[GetIAMinPeriodTransferLevy]", con);

                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ia", objBEL.IAName);


                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);

                adp.Fill(ds);

                cmd.Dispose();

            }

            catch (Exception ex)

            {

                throw ex;

            }

            finally

            {

                ds.Dispose();

            }

            return ds;

        }




        #endregion






        #region "SaveLandAcquistionDetail"
        public Int32 SaveLandAcquistionDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertLandAcquistionDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@TotalArea", objBEL.TotalAreaNew);
                cmd.Parameters.AddWithValue("@GSLand", objBEL.GSLandNew);
                cmd.Parameters.AddWithValue("@GovtLand", objBEL.GovtLandNew);
                cmd.Parameters.AddWithValue("@PrivateacquisitionLand", objBEL.PrivateacquisitionLand);
                cmd.Parameters.AddWithValue("@NotificationDate", objBEL.NotificationDate);
                cmd.Parameters.AddWithValue("@AwardArea", objBEL.AwardArea);
                cmd.Parameters.AddWithValue("@AwardDate", objBEL.AwardDate);
                cmd.Parameters.AddWithValue("@PossessionArea", objBEL.PossessionArea);
                cmd.Parameters.AddWithValue("@PossessionDate", objBEL.PossessionDate);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateLandAcquistionDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateLandAcquistionDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                //cmd.Parameters.AddWithValue("@TotalArea", objBEL.TotalAreaNew);
                cmd.Parameters.AddWithValue("@GSLand", objBEL.GSLandNew);
                cmd.Parameters.AddWithValue("@GovtLand", objBEL.GovtLandNew);
                cmd.Parameters.AddWithValue("@PrivateacquisitionLand", objBEL.PrivateacquisitionLand);
                cmd.Parameters.AddWithValue("@NotificationDate", objBEL.NotificationDate);
                cmd.Parameters.AddWithValue("@AwardArea", objBEL.AwardArea);
                cmd.Parameters.AddWithValue("@AwardDate", objBEL.AwardDate);
                cmd.Parameters.AddWithValue("@PossessionArea", objBEL.PossessionArea);
                cmd.Parameters.AddWithValue("@PossessionDate", objBEL.PossessionDate);
                cmd.Parameters.AddWithValue("@ExpenditureofLA", objBEL.ExpenditureofLA);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeleteLandAcquistionDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteLandAcquistionDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@LandacquisitionId", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetLandAcquistionDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetLandacquiredDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                //cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                //cmd.Parameters.AddWithValue("@par", objBEL.Parameter);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetGetUserRoleDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetUserRole_sp", con);
                cmd.Parameters.AddWithValue("@userName", objBEL.UserName);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetIndustrialAreaDetailforLandAcquist()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetIndustrialAreaDetailforLandAcquist", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        #region "Digitization"
        public DataSet GetDigitizationDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetDigitizationDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveDigitizationDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertDigitizationDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NameofSection", objBEL.NameofSection);
                cmd.Parameters.AddWithValue("@TotalNumberoffile", objBEL.TotalNumberoffile);
                cmd.Parameters.AddWithValue("@DocumentA4", objBEL.DocumentA4);
                cmd.Parameters.AddWithValue("@DocumentLegal", objBEL.DocumentLegal);
                cmd.Parameters.AddWithValue("@DocumentA0", objBEL.DocumentA0);
                cmd.Parameters.AddWithValue("@DocumentA1", objBEL.DocumentA1);
                cmd.Parameters.AddWithValue("@DocumentA3", objBEL.DocumentA3);
                cmd.Parameters.AddWithValue("@other", objBEL.other);
                cmd.Parameters.AddWithValue("@BookMarks", objBEL.BookMarks);
                cmd.Parameters.AddWithValue("@Maintenance", objBEL.Maintenance);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }

                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateDigitizationDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateDigitizationDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@NameofSection", objBEL.NameofSection);
                //cmd.Parameters.AddWithValue("@TotalNumberoffile", objBEL.TotalNumberoffile);
                cmd.Parameters.AddWithValue("@DocumentA4", objBEL.DocumentA4);
                cmd.Parameters.AddWithValue("@DocumentLegal", objBEL.DocumentLegal);
                cmd.Parameters.AddWithValue("@DocumentA0", objBEL.DocumentA0);
                cmd.Parameters.AddWithValue("@DocumentA1", objBEL.DocumentA1);
                cmd.Parameters.AddWithValue("@DocumentA3", objBEL.DocumentA3);
                cmd.Parameters.AddWithValue("@other", objBEL.other);
                cmd.Parameters.AddWithValue("@BookMarks", objBEL.BookMarks);
                cmd.Parameters.AddWithValue("@Maintenance", objBEL.Maintenance);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeleteDigitizationDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteDigitizationDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DigitizationID", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region Track Application
        public DataSet GetTrackApplicationList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ZNK_GetListOfTrackApplication", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserCreateBy", objBEL.CreatedBy);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 TrackapplicationRM(belBookDetails objBEL)
        {
            int result;
            try
            {
                // @ApplicationType,@Subject,@IssueDate,@LetterNo,@ForwardedTo,@Description,@serviceRequestNo,@LetterCopyfile,GETDATE(),@CreatedBy
                SqlCommand cmd = new SqlCommand("ZNK_InsertTrackapplicationRM", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ApplicationType", objBEL.LtApplicationType);
                cmd.Parameters.AddWithValue("@Subject", objBEL.LtSubject);
                cmd.Parameters.AddWithValue("@IssueDate", objBEL.LtIssuedDate);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.LtLetterNo);
                cmd.Parameters.AddWithValue("@ForwardedTo", objBEL.LtForwardedTo);
                cmd.Parameters.AddWithValue("@Description", objBEL.LtRemark);
                cmd.Parameters.AddWithValue("@serviceRequestNo", objBEL.LtServiceRequestNo);
                cmd.Parameters.AddWithValue("@LetterCopyfile", objBEL.LtFilePath);
                cmd.Parameters.AddWithValue("@CreateDate", DateTime.Now);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@GRDate", objBEL.LGrivenceRDate);
                cmd.Parameters.AddWithValue("@Status", objBEL.StatusID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateTrackApplication(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("ZNK_UpdateTrackapplicationRM", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.LTID);
                cmd.Parameters.AddWithValue("@ApplicationType", objBEL.LtApplicationType);
                cmd.Parameters.AddWithValue("@Subject", objBEL.LtSubject);
                cmd.Parameters.AddWithValue("@IssueDate", objBEL.LtIssuedDate);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.LtLetterNo);
                cmd.Parameters.AddWithValue("@ForwardedTo", objBEL.LtForwardedTo);
                cmd.Parameters.AddWithValue("@Description", objBEL.LtRemark);
                cmd.Parameters.AddWithValue("@serviceRequestNo", objBEL.LtServiceRequestNo);
                cmd.Parameters.AddWithValue("@LetterCopyfile", objBEL.LtFilePath);
                cmd.Parameters.AddWithValue("@GRDate", objBEL.LGrivenceRDate);
                cmd.Parameters.AddWithValue("@Status", objBEL.StatusID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion
        public DataSet GetAllotteeApplicationRequestTempRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAllAllotteeApplicationrequest", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public DataSet GetNivishMitraBasicDetail(string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand(@"select[ApplicantName] AllotteeName, [dbo].[FUN_IANAME_ByIAID] (INDUSTRIALAREA) as IndustrialArea, 
                                                  PlotSize, [SWCControlId] ControlId,[SWCUnitId] UNITid,[SWCServiceId] ServiceId,[SWCstatus]
                                                  from [dbo].[TempApplicationRegister]
                                                  WHERE ApplicationId = @ServiceRequestNO AND ISACTIVE = 1", con);
                //    cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", serviceID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        //public DataSet GetapplicableChargesnData(string serviceID)
        //{
        //    DataSet ds = new DataSet();
        //    try
        //    {
        //        SqlCommand cmd = new SqlCommand("ServiceApplicableFees", con);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.Parameters.AddWithValue("@ServiceRequestNO", serviceID);
        //        SqlDataAdapter adp = new SqlDataAdapter(cmd);
        //        adp.Fill(ds);
        //        cmd.Dispose();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        ds.Dispose();
        //    }
        //    return ds;
        //}


        //public DataSet GetApplicableFeesFromTransaction(string ref_no_upsidc)
        //{
        //    DataSet ds = new DataSet();
        //    try
        //    {
        //        SqlCommand cmd = new SqlCommand("GetApplicableFeesFromTransaction", con);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.Parameters.AddWithValue("@ref_no_upsidc", ref_no_upsidc);
        //        SqlDataAdapter adp = new SqlDataAdapter(cmd);
        //        adp.Fill(ds);
        //        cmd.Dispose();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        ds.Dispose();
        //    }
        //    return ds;
        //}



        //public string UpdateAllotteTransaction(belBookDetails objBEL)
        //{
        //    string result;
        //    try
        //    {
        //        SqlCommand cmd = new SqlCommand("SetTransectionDataAfterGeteway", con);
        //        cmd.CommandType = CommandType.StoredProcedure;

        //        cmd.Parameters.AddWithValue("@ref_no_upsidc", objBEL.PayTrans_unique_ref_UPSIDC);
        //        cmd.Parameters.AddWithValue("@unique_ref_gateway", objBEL.PayTrans_unique_ref);

        //        cmd.Parameters.AddWithValue("@response_code", objBEL.PayTrans_response_code);
        //        cmd.Parameters.AddWithValue("@service_tax", objBEL.PayTrans_service_tax);
        //        cmd.Parameters.AddWithValue("@processing_fee_amt", objBEL.PayTrans_processing_fee_amt);
        //        cmd.Parameters.AddWithValue("@total_amt", objBEL.PayTrans_total_amt);
        //        cmd.Parameters.AddWithValue("@trn_amt", objBEL.PayTrans_trn_amt);
        //        cmd.Parameters.AddWithValue("@trn_date", objBEL.PayTrans_trn_date);
        //        cmd.Parameters.AddWithValue("@interchange_val", objBEL.PayTrans_interchange_val);
        //        cmd.Parameters.AddWithValue("@tdr", objBEL.PayTrans_tdr);
        //        cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
        //        cmd.Parameters.AddWithValue("@submer", objBEL.PayTrans_submer);
        //        cmd.Parameters.AddWithValue("@tps", objBEL.PayTrans_tps);
        //        cmd.Parameters.AddWithValue("@PayTrans_id", objBEL.PayTrans_id);
        //        cmd.Parameters.AddWithValue("@rs", objBEL.PayTrans_rs);
        //        cmd.Parameters.AddWithValue("@GatewayResponse", objBEL.GatewayResponse);
        //        if (con.State == ConnectionState.Closed)
        //        {
        //            con.Open();
        //        }

        //        SqlDataAdapter adp = new SqlDataAdapter(cmd);
        //        DataTable dt = new DataTable();
        //        adp.Fill(dt);

        //        if (dt.Rows.Count > 0)
        //        {
        //            result = dt.Rows[0]["Message"].ToString();
        //        }
        //        else
        //        {
        //            result = "Failed";
        //        }


        //        return result;

        //    }
        //    catch
        //    {
        //        result = "Failed";
        //        return result;
        //    }
        //}



        #region "IndustrialAreaMaintenanceCharge"
        public Int32 SaveIndustrialAreaMaintenanceCharge(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertIndustrialAreaMaintenanceCharge_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@InterestRate", objBEL.RateOfPlot);
                cmd.Parameters.AddWithValue("@EffectiveFromDate", objBEL.EffectiveFromDate);
                cmd.Parameters.AddWithValue("@EffectiveToDate", objBEL.EffectiveToDate);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateIndustrialAreaMaintenanceCharge(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateIndustrialAreaMaintenanceCharge_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@InterestRate", objBEL.RateOfPlot);
                cmd.Parameters.AddWithValue("@EffectiveFromDate", objBEL.EffectiveFromDate);
                cmd.Parameters.AddWithValue("@EffectiveToDate", objBEL.EffectiveToDate);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@ModifiedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region "van vibhag"


        public DataSet GetBindVanVibhagMasterGridView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetVibhagMasterDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@par", objBEL.Parameter);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }





        public Int32 SaveVanVibhagDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertVanVibhagDetail_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@LocationAddress", objBEL.LocationAddress);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@SpeciesofTrees", objBEL.SpeciesofTrees);
                cmd.Parameters.AddWithValue("@NoofTrees", objBEL.NoOfTrees);
                cmd.Parameters.AddWithValue("@UploadedFile", objBEL.UploadedFile);
                cmd.Parameters.AddWithValue("@UploadedFileExt", objBEL.UploadedFileExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 UpdateVanVibhagDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateVanVibhagDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@LocationAddress", objBEL.LocationAddress);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@PlotSize", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@SpeciesofTrees", objBEL.SpeciesofTrees);
                cmd.Parameters.AddWithValue("@NoofTrees", objBEL.NoOfTrees);
                cmd.Parameters.AddWithValue("@UploadedFile", objBEL.UploadedFile);
                cmd.Parameters.AddWithValue("@UploadedFileExt", objBEL.UploadedFileExt);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }




        public Int32 DeleteVanVibhaagDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteVanVibhaagDetail_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlantId", objBEL.ID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        public DataSet GetPlatationDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetPlantationDocument", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        #endregion

        #region "Save Allottee Records"

        public DataSet SetApplicationRequestService(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[NewApplicationRequestAllottee_sp2]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@AllotedPloltNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@AllotedPloltSize", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ControlId", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@UnitId", objBEL.UnitId);
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@status", objBEL.Status);
                cmd.Parameters.AddWithValue("@Preference1", objBEL.Preference1);
                cmd.Parameters.AddWithValue("@Preference2", objBEL.Preference2);
                cmd.Parameters.AddWithValue("@Preference3", objBEL.Preference3);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetServiceRequestRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GETServiceInboxTickets", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@Userid", objBEL.UserID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 ServiceTicketCreate(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("ServiceTicketCreate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.industrialAreaID);
                cmd.Parameters.AddWithValue("@TicketownerID", objBEL.ticketOwnerID);
                cmd.Parameters.AddWithValue("@TicketRespondentID", objBEL.RespondentID);
                cmd.Parameters.AddWithValue("@SERVICENO", objBEL.serviceID);
                cmd.Parameters.AddWithValue("@case", objBEL.caseType);
                cmd.Parameters.AddWithValue("@Ticketfor", objBEL.ReQFor);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet getevaluationdataforBP(int IA, string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingdetailsforEvaluate", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", IA);
                cmd.Parameters.AddWithValue("@SERVICENO", serviceID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetevaluationData(int IA, string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GETDATAFOREVALAUTION", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", IA);
                cmd.Parameters.AddWithValue("@SERVICENO", serviceID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetDataStatus(string Case, string ServiceID, int IAIDD)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetDataStatus", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@case", Case);
                cmd.Parameters.AddWithValue("@IAID", IAIDD);
                cmd.Parameters.AddWithValue("@ServiceRequestID", ServiceID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetcommitteeforAllotmentApproval(string Case, string userID, int IAIDD)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetcommitteeforAllotmentApproval", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@case", Case);
                cmd.Parameters.AddWithValue("@IAID", IAIDD);
                cmd.Parameters.AddWithValue("@Username", userID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetApprovalOptionsandcommittee(string Case, string userID, int IAIDD)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetApprovalOptionsandcommittee", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@case", Case);
                cmd.Parameters.AddWithValue("@IAID", IAIDD);
                cmd.Parameters.AddWithValue("@Username", userID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet BindEvaluationChecklistGrid(int IA, string serviceID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetChecklistforevaluation", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", IA);
                cmd.Parameters.AddWithValue("@SERVICENO", serviceID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public Int32 InsertChecklistDocuments(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertBookDetails_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@BookName", objBEL.BookName);
                cmd.Parameters.AddWithValue("@Author", objBEL.Author);
                cmd.Parameters.AddWithValue("@Publisher", objBEL.Publisher);
                cmd.Parameters.AddWithValue("@Price", objBEL.Price);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 InsertUpdateAllottee_tblPaymentHeader(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertAlottePaymentHeader_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Action", objBEL.Action);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                //  cmd.Parameters.AddWithValue("@ToatalPlotedArea", objBEL.ToatalPlotedArea);
                cmd.Parameters.AddWithValue("@RateofInterest", objBEL.PaymentAmount);
                cmd.Parameters.AddWithValue("@RateatTimeAllotment", objBEL.RateatTimeAllotment);
                cmd.Parameters.AddWithValue("@RebateNonDefaulters", objBEL.RebateNonDefaulters);
                cmd.Parameters.AddWithValue("@NoInstallments", objBEL.NoInstallments);
                cmd.Parameters.AddWithValue("@LocationCharges", objBEL.LocationCharges);
                cmd.Parameters.AddWithValue("@EarnestMoneyRate", objBEL.EarnestMoneyRate);
                cmd.Parameters.AddWithValue("@ReservationMoneyPaidwitin30days", objBEL.ReservationMoneyPaidwitin30days);
                cmd.Parameters.AddWithValue("@DemantNoticeDate1", objBEL.DemantNoticeDate1);
                cmd.Parameters.AddWithValue("@DemantNoticeDate2", objBEL.DemantNoticeDate2);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);




                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertUpdate_MasterInvestment(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("insert_investmentdata", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ApplicantName", objBEL.ApplicantName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@plotSize", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@Price", objBEL.Price);
                cmd.Parameters.AddWithValue("@CaseType", objBEL.CaseType);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@Current_cost", objBEL.ProjectCurrentCost);
                cmd.Parameters.AddWithValue("@Employment_Projected", objBEL.EmploymentProjected);
                cmd.Parameters.AddWithValue("@Employment_Genreted", objBEL.EmploymentGenerated);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertUpdateAllottee_tblPaymentDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertAlottePaymentDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Action", objBEL.Action);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@PaymentReicvedDate", objBEL.PaymentReicvedDate);
                cmd.Parameters.AddWithValue("@PaymentAmount", objBEL.PaymentAmount);
                cmd.Parameters.AddWithValue("@PaymentDescription", objBEL.PaymentDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                cmd.Parameters.AddWithValue("@PaymentIssueDate", objBEL.PaymentIssueDate);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);

                cmd.Parameters.AddWithValue("@BankName", objBEL.PaymentBank);
                cmd.Parameters.AddWithValue("@PaymentDraftNo", objBEL.PaymentDraftNo);
                cmd.Parameters.AddWithValue("@PaymentTransactionNo", objBEL.PaymentTransactionNo);
                cmd.Parameters.AddWithValue("@PaymentChequeNo", objBEL.PaymentChequeNo);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet InsertUpdateAllotteeDetails_step1(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }

                SqlCommand cmd = new SqlCommand("InsertAlotteDetails_sp_step1", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeRegisterID", objBEL.AllotteeRegisterID);
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@Allotteename", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@Email", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNumber", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@ApplicationAdress2", objBEL.ApplicationAdress2);
                cmd.Parameters.AddWithValue("@FatherName", objBEL.FatherName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@AddharNo", objBEL.AddharNo);
                cmd.Parameters.AddWithValue("@DateofAllottementNo", objBEL.DateofAllottementNo);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;


        }

        public Int32 InsertUpdateAllotteeDetails_step2(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertAlotteDetails_sp_step2", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@AllotmentIssueDate", objBEL.AllotmentIssueDate);
                //cmd.Parameters.AddWithValue("@ref_AllotmentNo", objBEL.ref_AllotmentNo);
                //cmd.Parameters.AddWithValue("@ConstructionValueAtTimeofAllotment", objBEL.ConstructionValueAtTimeofAllotment);


                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@LeaseDeedDate", objBEL.LeaseDeedDate);
                cmd.Parameters.AddWithValue("@LeaseAgrementExecDate", objBEL.LeaseAgrementExecDate);

                cmd.Parameters.AddWithValue("@DateOfBuldingPlanSubmission", objBEL.DateOfBuldingPlanSubmission);
                cmd.Parameters.AddWithValue("@ReleaseofOccupancyCertificateDate", objBEL.ReleaseofOccupancyCertificateDate);
                //cmd.Parameters.AddWithValue("@RequestofOccupancyCertificateDate", objBEL.RequestofOccupancyCertificateDate);
                cmd.Parameters.AddWithValue("@DateofAllottementNo", objBEL.DateofAllottementNo);
                //cmd.Parameters.AddWithValue("@DateOfRequestForCompletion", objBEL.DateOfRequestForCompletion);
                cmd.Parameters.AddWithValue("@DateOfReleaseForCompletion", objBEL.DateOfReleaseForCompletion);
                cmd.Parameters.AddWithValue("@ModifiedBy", objBEL.ModifiedBy);
                cmd.Parameters.AddWithValue("@ModifiedDate", objBEL.ModifiedDate);




                cmd.Parameters.AddWithValue("@ref_LeaseDeed", objBEL.ref_LeaseDeed);
                cmd.Parameters.AddWithValue("@ref_BuildingPlan", objBEL.ref_BuildingPlan);
                cmd.Parameters.AddWithValue("@ref_CompletionCertificate", objBEL.ref_CompletionCertificate);
                cmd.Parameters.AddWithValue("@ref_OccupancyCertificate", objBEL.ref_OccupancyCertificate);
                cmd.Parameters.AddWithValue("@ref_ConstructionInspection", objBEL.ref_ConstructionInspection);
                cmd.Parameters.AddWithValue("@ref_CompletionInspection", objBEL.ref_CompletionInspection);

                cmd.Parameters.AddWithValue("@InspectionDateForConstructionPermit", objBEL.InspectionDateForConstructionPermit);
                cmd.Parameters.AddWithValue("@InspectionDateForComplition", objBEL.InspectionDateForComplition);


                cmd.Parameters.AddWithValue("@Lease_bookno", objBEL.Lease_bookno);
                cmd.Parameters.AddWithValue("@Lease_bookbinding", objBEL.Lease_bookbinding);
                cmd.Parameters.AddWithValue("@Lease_pagefrom", objBEL.Lease_pagefrom);
                cmd.Parameters.AddWithValue("@Lease_pageto", objBEL.Lease_pageto);
                cmd.Parameters.AddWithValue("@Lease_srno", objBEL.Lease_srno);
                cmd.Parameters.AddWithValue("@CertificateNo", objBEL.CertificateNo);
                cmd.Parameters.AddWithValue("@IssueDate", objBEL.IssueDate);
                cmd.Parameters.AddWithValue("@StampDutyAmount", objBEL.StampDutyAmount);
                cmd.Parameters.AddWithValue("@AccountReferenceNo", objBEL.AccountRefrenceNo);
                cmd.Parameters.AddWithValue("@UniqueDocRef", objBEL.UniqueDocRef);
                cmd.Parameters.AddWithValue("@GuaranteNo", objBEL.BankGuaranteeNo);
                cmd.Parameters.AddWithValue("@GuaranteAmount", objBEL.GuaranteeAmount);
                cmd.Parameters.AddWithValue("@GuarnteeCoverFrom", objBEL.GuaranteeCoverFrom);
                cmd.Parameters.AddWithValue("@GuaranteeCoverTo", objBEL.GuaranteeCoverTo);
                cmd.Parameters.AddWithValue("@LastDateOfClaim", objBEL.LastDateOfClaim);
                cmd.Parameters.AddWithValue("@BankProposalLetter", objBEL.BankProposalLetter);
                cmd.Parameters.AddWithValue("@BankSanctionLetter", objBEL.BankSanctionLetter);
                cmd.Parameters.AddWithValue("@SanctionLetterUPSIDC", objBEL.SanctionLetterOfUPSIDC);
                cmd.Parameters.AddWithValue("@NoOfStamp", objBEL.NoOfStamp);
                cmd.Parameters.AddWithValue("@StampAmount", objBEL.StampAmount);
                cmd.Parameters.AddWithValue("@TotalStampDuty", objBEL.TotalStampDuty);
                cmd.Parameters.AddWithValue("@Possessiondate", objBEL.Possessiondate);
                cmd.Parameters.AddWithValue("@PossessionArea", objBEL.PossessionArea);
                cmd.Parameters.AddWithValue("@RestorationRefNo", objBEL.RestorationRefNo);
                cmd.Parameters.AddWithValue("@RestorationRefDate", objBEL.RestorationRefDate);
                //cmd.Parameters.AddWithValue("@ChangeOfPlotRefNo", objBEL.ChangeOfPlotRefNo);
                //cmd.Parameters.AddWithValue("@ChangeOfPlotRefDate", objBEL.ChangeOfPlotRefDate);
                cmd.Parameters.AddWithValue("@ChangeOfProjectRefNo", objBEL.ChangeOfProjectRefNo);
                cmd.Parameters.AddWithValue("@ChangeOfProjectRefDate", objBEL.ChangeOfProjectRefDate);
                cmd.Parameters.AddWithValue("@AmagaRefNo", objBEL.AmagaRefNo);
                cmd.Parameters.AddWithValue("@AmagaRefDate", objBEL.AmagaRefDate);
                cmd.Parameters.AddWithValue("@SubDivRefNo", objBEL.SubDivRefNo);
                cmd.Parameters.AddWithValue("@SubDivRefDate", objBEL.SubDivRefDate);
                cmd.Parameters.AddWithValue("@SublettingRefNo", objBEL.SublettingRefNo);
                cmd.Parameters.AddWithValue("@SublettingRefDate", objBEL.SublettingRefDate);
                cmd.Parameters.AddWithValue("@DateOfAgreement", objBEL.DateOfAgreement);
                cmd.Parameters.AddWithValue("@DateOfExecutionAgreement", objBEL.DateOfExecutionAgreement);
                cmd.Parameters.AddWithValue("@AgreementOnPlotSize", objBEL.AgreementOnPlotSize);
                cmd.Parameters.AddWithValue("@SublettingPartyName", objBEL.SublettingPartyName);
                cmd.Parameters.AddWithValue("@SublettingArea", objBEL.SublettingArea);
                cmd.Parameters.AddWithValue("@SublettingYears", objBEL.SublettingForYears);
                cmd.Parameters.AddWithValue("@SublettingProjectName", objBEL.SublettingProjectName);


                //cmd.Parameters.AddWithValue("@CaseType", objBEL.AllotmentCaseType);
                //cmd.Parameters.AddWithValue("@TranserLevyCase", objBEL.TransferLevyCaseType);
                //cmd.Parameters.AddWithValue("@PrevDues", objBEL.AllotteePrevDues);

                #region Code By Manish
                cmd.Parameters.AddWithValue("@ReservationPaymentAmount", objBEL.ReservationPaymentAmount);
                cmd.Parameters.AddWithValue("@ReservationPaymentDate", objBEL.ReservationPaymentDate);
                cmd.Parameters.AddWithValue("@PhysicalPossessionDate", objBEL.PhysicalPossessionDate);

                cmd.Parameters.AddWithValue("@ReservationStatus", objBEL.ReservationmoneyStatus);
                cmd.Parameters.AddWithValue("@LeasedeedStatus", objBEL.LeaseDeedSignedStatus);
                cmd.Parameters.AddWithValue("@PossessionLetterStatus", objBEL.PossessionLetterStatus);
                cmd.Parameters.AddWithValue("@PhysicalPossessionStatus", objBEL.PhysicalPossessionStatus);
                cmd.Parameters.AddWithValue("@BuildingPlanDetailsStatus", objBEL.BuildingPlanStatus);
                cmd.Parameters.AddWithValue("@RestorationStatus", objBEL.RestorationStatus);
                cmd.Parameters.AddWithValue("@ChangeofPlotStatus", objBEL.ChangeofPlotStatus);
                cmd.Parameters.AddWithValue("@ChangeofProjectStatus", objBEL.ChangeofProjectStatus);
                cmd.Parameters.AddWithValue("@AmalgamationStatus", objBEL.AmalgamationStatus);
                cmd.Parameters.AddWithValue("@SubDivisionStatus", objBEL.SubDivisionStatus);

                cmd.Parameters.AddWithValue("@SublettingStatus", objBEL.SublettingStatus);
                cmd.Parameters.AddWithValue("@EStampStatus", objBEL.EStampStatus);
                cmd.Parameters.AddWithValue("@BankGuarantee", objBEL.BankGuaranteeStatus);
                cmd.Parameters.AddWithValue("@MortgageStatus", objBEL.MortgageStatus);
                cmd.Parameters.AddWithValue("@AgreementStatus", objBEL.AgreementStatus);
                cmd.Parameters.AddWithValue("@OtherCharges", objBEL.othercharges);

                cmd.Parameters.AddWithValue("@CompoundingCharges", objBEL.CompoundingCharges);
                cmd.Parameters.AddWithValue("@RestorationLevy", objBEL.RestorationLevy);
                cmd.Parameters.AddWithValue("@DeedafterRestoration", objBEL.DeedafterRestoration);

                //cmd.Parameters.AddWithValue("@AdditionalChargesforplot", objBEL.AdditionalChargesforplot);
                //cmd.Parameters.AddWithValue("@DeedafterChangeofPlot", objBEL.DeedafterChangeofPlot);

                cmd.Parameters.AddWithValue("@ChangeforChanges", objBEL.ChangeforChanges);
                cmd.Parameters.AddWithValue("@increaseofFAR", objBEL.increaseofFAR);
                cmd.Parameters.AddWithValue("@AmalgamationFees", objBEL.AmalgamationFees);
                cmd.Parameters.AddWithValue("@UsabilityFees", objBEL.UsabilityFees);

                cmd.Parameters.AddWithValue("@RectificationDeedDate", objBEL.RectificationDeedDate);
                cmd.Parameters.AddWithValue("@SubDivType", objBEL.SubDivType);
                cmd.Parameters.AddWithValue("@NoofPlotCreated", objBEL.NoofPlotCreated);
                cmd.Parameters.AddWithValue("@SubDivCharges", objBEL.SubDivCharges);
                cmd.Parameters.AddWithValue("@ExtensionCharges", objBEL.ExtensionCharges);
                cmd.Parameters.AddWithValue("@SublettingCharge", objBEL.SublettingCharge);
                cmd.Parameters.AddWithValue("@timePeriod", objBEL.timePeriod);


                cmd.Parameters.AddWithValue("@InttonTimeextension", objBEL.InttonTimeextension);
                cmd.Parameters.AddWithValue("@Inttonbalancedues", objBEL.Inttonbalancedues);
                cmd.Parameters.AddWithValue("@MaintenanceChargesWaiver", objBEL.MaintenanceChargesWaiver);
                cmd.Parameters.AddWithValue("@dateofIncreaseinfar", objBEL.dateofIncreaseinfar);
                cmd.Parameters.AddWithValue("@letternumber", objBEL.letternumber);
                cmd.Parameters.AddWithValue("@letterdate", objBEL.letterdate);

                cmd.Parameters.AddWithValue("@increasefARPayment", objBEL.Payment);
                cmd.Parameters.AddWithValue("@excutionofdeedafterFAR", objBEL.excutionofdeed);
                cmd.Parameters.AddWithValue("@interestWaiverStatus", objBEL.linterestWaiver);
                cmd.Parameters.AddWithValue("@increaseinfarStatus", objBEL.increaseinfar);

                cmd.Parameters.AddWithValue("@TimeextensionWaiverfrom", objBEL.TimeextensionWaiverfrom);
                cmd.Parameters.AddWithValue("@TimeextensionWaiverTo", objBEL.TimeextensionWaiverTo);

                cmd.Parameters.AddWithValue("@tefStatus", objBEL.TEFStatus);
                cmd.Parameters.AddWithValue("@Operationalmaintenancecharges", objBEL.Operationalmaintenancecharges);
                cmd.Parameters.AddWithValue("@ispossessionareadiff", objBEL.diffproarea);
                cmd.Parameters.AddWithValue("@possessionareadiff", objBEL.possessionareadiff);
                cmd.Parameters.AddWithValue("@Amountrecover", objBEL.Amountrecover);
                #endregion


                // Inspection Type:  dropdown  --- ddlInspection.Text.Trim());

                // [ProductManufactured] = txtProductManufactured
                //	[TotalAllottedplotArea] [float] NOT NULL,        txtTotalArea
                //	[AllotmentletterIssueDate] [datetime] NULL,     txtalltLetterIssueDate
                //	[LeaseDeedDate] [datetime] NULL,       txtLeaseDeed
                //	[LeaseAgreementExecDate] [datetime] NULL,   txtExecLeaseDeed
                //	[InspectionDate] [datetime] NULL,      txtInspectionDate
                //	[DateOfBuldingPlanSubmission] [datetime] NULL,   txtBuildingDate
                //	[DateOfRequestForOccupancyCertificate] [datetime]  = txtoccertificate;
                //	[DateOfReleaseForOccupancyCertificate] [datetime] = txtReloccertificate;
                //	[DateOfRequestForCompletion] [datetime] NULL,  = txtDateCompletion
                //	[DateOfReleaseForCompletion] [datetime] NULL, = txtcomcertificate
                //	[BuildingPlanApprovedRejectedDate] [datetime] NULL, = ddlInspection


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 InsertNewAllotteeDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[NewRegistrationRequestAllottee_sp]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", objBEL.ApplicationID);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.ApplicationName);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@FatherName", objBEL.FatherName);
                cmd.Parameters.AddWithValue("@AllotedPloltNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IAName);
                cmd.Parameters.AddWithValue("@AdharCardNo", objBEL.AddharNo);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@ApplicationAdress2", objBEL.ApplicationAdress2);
                cmd.Parameters.AddWithValue("@DateofAllotmentNo", objBEL.DateofAllottementNo);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetAlloteeDetailwithAID(string AID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ZNK_GetCompletedAlloteeDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AID", AID);               
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllotmentNoDetail(string AllotmentNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ZNK_GetAllotmentNoeDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Allotmentletterno", AllotmentNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetNewAlloteeDetailwithParameter(string IA)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetNewAllottees", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", IA);
                cmd.Parameters.AddWithValue("@AppID", DBNull.Value);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAllotetmentLetterDocument(string par)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDocument_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Allotmentletterno", par);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetEmploymentData(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("get_Employmentdata", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public DataSet GetCMDashboard(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("CMO_DASHBOARD", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@txtSearch", objBEL.searchText);
                cmd.Parameters.AddWithValue("@Company_type", objBEL.Companyid);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetInvestmentdata(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("get_investmentdata", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@txtSearch", objBEL.searchText);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public DataSet GetapplicableMasterByAllottee(string AlloteeId)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetapplicableMasterByAllottee", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", AlloteeId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }







        public DataSet GetAllAllotteeDetailsFilledById(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAllAllotteeDetailsById", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.AllotmentNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }






        public Int32 UpdateServiceChecklistDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateServiceCheckList_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesCondition", objBEL.ServiceTimeLinesCondition);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesDocuments", objBEL.ServiceTimeLinesDocuments);
                cmd.Parameters.AddWithValue("@filename", objBEL.filename);
                cmd.Parameters.AddWithValue("@content", objBEL.content);
                cmd.Parameters.AddWithValue("@Uploadfile", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.ModifiedBy);
                cmd.Parameters.AddWithValue("@ModifiedDate", objBEL.ModifiedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveServiceChecklist(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertSaveSaveServiceChecklist_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesCondition", objBEL.ServiceTimeLinesCondition);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesDocument", objBEL.ServiceTimeLinesDocuments);
                cmd.Parameters.AddWithValue("@filename", objBEL.filename);
                cmd.Parameters.AddWithValue("@content", objBEL.content);
                cmd.Parameters.AddWithValue("@Uploadfile", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetServiceMasterChecklists(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceMasterChecklists_SP", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceChecklistId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }














        //private Boolean InsertChecklistDocuments(belBookDetails objBEL)
        //{
        //    //String strConnString = System.Configuration.ConfigurationManager
        //    //.ConnectionStrings["conString"].ConnectionString;
        //    //SqlConnection con = new SqlConnection(strConnString);
        //    //cmd.CommandType = CommandType.Text;
        //    //cmd.Connection = con;
        //    //try
        //    //{
        //    //    con.Open();
        //    //    cmd.ExecuteNonQuery();
        //    //    return true;
        //    //}
        //    //catch (Exception ex)
        //    //{
        //    //    //Response.Write(ex.Message);
        //    //    return false;
        //    //}
        //    //finally
        //    //{
        //    //    con.Close();
        //    //    con.Dispose();
        //    //}
        //}


        public Int32 InsertUpdateAllotteeDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertAlotteDetails_sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Action", objBEL.Action);
                cmd.Parameters.AddWithValue("@AllotteeId", objBEL.dbId);
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@ApplicationId", objBEL.ApplicationID);
                cmd.Parameters.AddWithValue("@ApplicationName", objBEL.ApplicationName);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@ApplicationAdress2", objBEL.ApplicationAdress2);
                cmd.Parameters.AddWithValue("@AllotedPloltNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IndustrialID", objBEL.IAId);
                cmd.Parameters.AddWithValue("@ProductManufactured", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@AllotmentIssueDate", objBEL.AllotmentIssueDate);
                cmd.Parameters.AddWithValue("@ToatalPlotedArea", objBEL.ToatalPlotedArea);
                cmd.Parameters.AddWithValue("@LeaseDeedDate", objBEL.LeaseDeedDate);
                cmd.Parameters.AddWithValue("@LeaseAgrementExecDate", objBEL.LeaseAgrementExecDate);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveInspectionDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spInsertInspectionDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Action", objBEL.Action);
                cmd.Parameters.AddWithValue("@GVId", objBEL.IAId);
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@RegionName", objBEL.RegionName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@Allotteename", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@TypeofInspection", objBEL.TypeofInspection);
                cmd.Parameters.AddWithValue("@InspectionDate", objBEL.InspectionDate);
                cmd.Parameters.AddWithValue("@filename", objBEL.filename);
                cmd.Parameters.AddWithValue("@IA", objBEL.IsActive);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveBookDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertBookDetails_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@BookName", objBEL.BookName);
                cmd.Parameters.AddWithValue("@Author", objBEL.Author);
                cmd.Parameters.AddWithValue("@Publisher", objBEL.Publisher);
                cmd.Parameters.AddWithValue("@Price", objBEL.Price);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet SetServiceRequest(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("SetServiceRequest_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@ApplicationType", objBEL.ApplicationType);
                cmd.Parameters.AddWithValue("@CaseType", objBEL.CaseType);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ServiceRequest", objBEL.ServiceRequest);
                cmd.Parameters.AddWithValue("@Remarks", objBEL.Remarks);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                cmd.Parameters.AddWithValue("@ControlID", objBEL.SWCControlID);
                cmd.Parameters.AddWithValue("@UnitID", objBEL.SWCUnitID);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.SWCServiceID);
                cmd.Parameters.AddWithValue("@RequestID", objBEL.SWCRequestID);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@BPType", objBEL.BPType);
                cmd.Parameters.AddWithValue("@MalbaPaid", objBEL.MalbaPaid);
                cmd.Parameters.AddWithValue("@InfraPaid", objBEL.InfraPaid);
                cmd.Parameters.AddWithValue("@AreaStatus", objBEL.AreaStatus);
                cmd.Parameters.AddWithValue("@PrevAppBuiltUpArea", objBEL.PrevAppCoveredArea);
                cmd.Parameters.AddWithValue("@GSTNo", objBEL.GSTNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SetServiceRequestFinish(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SetServiceRequestFinish_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SetBPResubmit(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("SetBPResubmit", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequest);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveServiceTimelinesDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("InsertSaveServiceTimelinesDetails_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceTimeLinesDepartMent", objBEL.ServiceTimeLinesDepartMent);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesActivity", objBEL.ServiceTimeLinesActivity);
                cmd.Parameters.AddWithValue("@ServiceTimeLines", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesApprovingLevel", objBEL.ServiceTimeLinesApprovingLevel);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetChecklistDocumentByParmeter(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceChecklists_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                //  cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }










        #endregion

        #region "Get Allottee Records"
        public DataSet GetBookRecords()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("FetchBookRecords_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetBuildingPlanDetail()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingPlanDetail_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetInspectionDetailwithParameter(string IA)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetInspectionDetailsFilter", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", IA);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAlloteeDocumentDetail(int par)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteesDocument_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", par);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 UpdateInspectionDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreInspectionDocument", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentletterNO", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@InspectionDate", objBEL.InspectionDate);
                cmd.Parameters.AddWithValue("@InspectionReport", objBEL.InspectionLetter);
                cmd.Parameters.AddWithValue("@InspectionExt", objBEL.InsepectionfilenameExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        public Int32 UpdateBuildingPlanDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreBuildingPlanDocument", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotmentletterNO", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@UploadBuildingPlanDocument", objBEL.BuildingPlanDocument);
                cmd.Parameters.AddWithValue("@UploadCompletionCertificate", objBEL.CompletionCertificate);
                cmd.Parameters.AddWithValue("@UploadOccupancyCertificate", objBEL.OccupancyCertificate);
                cmd.Parameters.AddWithValue("@BuildingPlanDocumentExt", objBEL.BuildingPlanDocumentExt);
                cmd.Parameters.AddWithValue("@CompletionCertificateExt", objBEL.CompletionCertificateExt);
                cmd.Parameters.AddWithValue("@OccupancyCertificateExt", objBEL.OccupancyCertificateExt);
                cmd.Parameters.AddWithValue("@DateOfBuldingPlanSubmission", objBEL.BuldingPlanSubmissionDate);
                cmd.Parameters.AddWithValue("@DateOfReleaseForCompletion", objBEL.ReleaseofCompletionDate);
                cmd.Parameters.AddWithValue("@DateOfReleaseForOccupancyCertificate", objBEL.ReleaseofOccupancyCertificateDate);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        public DataSet GetBuildingPlanDocumentDetail(int par)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingPlanDocument_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", par);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetBuildingPlanDocumentDetailBasedtooPar(int par, int ID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingPlanDocumentBasedtooPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", par);
                cmd.Parameters.AddWithValue("@Id", ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAllotteesDocumenttBasedtooPar(int par, int ID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteesDocumenttBasedtooPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", par);
                cmd.Parameters.AddWithValue("@Id", ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetInspectionDocumentDetailBasedtooPar1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetInspectionDocumentDetailBasedtooPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@Filter", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetInspectionDocumentDetailBasedtooPar(int par, int ID)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetInspectionDocumentDetailBasedtooPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", par);
                cmd.Parameters.AddWithValue("@Id", ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetInspectionDocumentDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetInsepectionDocument_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@AppID", objBEL.IAName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 UpdateAllotmentLetterDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreAllotteeDocument", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //   cmd.Parameters.AddWithValue("@FILE_PATH", objBEL.DocumentName);
                cmd.Parameters.AddWithValue("@AllotmentletterNO", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@AllotmentLetterIssueDate", objBEL.AllotmentIssueDate);
                cmd.Parameters.AddWithValue("@AllotmentLetterExt", objBEL.AllotmentLetterExt);
                cmd.Parameters.AddWithValue("@leaseDeedDate", objBEL.LeaseDeedDate);
                cmd.Parameters.AddWithValue("@LeaseExecDate", objBEL.LeaseAgrementExecDate);
                cmd.Parameters.AddWithValue("@AllotmentletterVersion", objBEL.AllotmentletterVersion);
                cmd.Parameters.AddWithValue("@UploadDocument", objBEL.UploadAllotmentLetter);
                cmd.Parameters.AddWithValue("@LeaseDeedVersion", objBEL.LeaseDeedVersion);
                cmd.Parameters.AddWithValue("@UploadLeaseDeed", objBEL.UploadLeaseDeed);
                cmd.Parameters.AddWithValue("@LeaseDeedExt", objBEL.LeaseDeedExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        public DataSet GetUserRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetUserDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@role", objBEL.Roll);
                cmd.Parameters.AddWithValue("@userID", objBEL.UserName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetIAAssociatedWithRM(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("usp_GetIAAssociatedWithRM", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@role", objBEL.Roll);
                cmd.Parameters.AddWithValue("@userID", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetBuildingPlanwithParameter(string IA)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("sp_GetBuildingPlanFilter", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", IA);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAlloteeDetailwithParameter(string IA)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spx_GetAllottees", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", IA);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAlloteeDetailonUsername(string usr)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetcompleteAllottees1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //  cmd.Parameters.AddWithValue("@Filter", NULL);
                cmd.Parameters.AddWithValue("@@AppID", usr);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAlloteeDetail()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteDetail_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public DataSet GetServiceRequestBPDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceRequestBPDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequest", objBEL.ServiceRequest);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetAllotteeRecordComplete(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetcompleteAllottees1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", null);
                cmd.Parameters.AddWithValue("@AppID", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 SaveRequestReport(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spInsertRequestReport", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@InspectionID", objBEL.dbId);
                cmd.Parameters.AddWithValue("@RequestReportType", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@RegionaName", objBEL.RegionName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@ApplicationID", objBEL.ApplicationID);
                cmd.Parameters.AddWithValue("@AllotmentNo", objBEL.AllotmentNo);
                cmd.Parameters.AddWithValue("@TypeofInspection", objBEL.TypeofInspection);
                cmd.Parameters.AddWithValue("@ReuestorName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.RequestorPhone);
                cmd.Parameters.AddWithValue("@EmailID", objBEL.RequestorEmailID);
                cmd.Parameters.AddWithValue("@Purpose", objBEL.RequestPurpose);
                cmd.Parameters.AddWithValue("@RequestedBy", objBEL.CreatedBy);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetSearchRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spSearchByString", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetInspectionDetail()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetInspectionDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetServiceTimelinesRecords()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceTimelinesRecords_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetInspectorRequestRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetInspectorRequestRecords ", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@RequestNo", objBEL.ServiceRequestNO);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetBindVanVibhagGridView(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetVibhagDetail", con);
                cmd.Parameters.AddWithValue("@SearchString", objBEL.SearchRecord);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }




        public DataSet GetServiceRequestTempRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceRequestTempRecords_Sp ", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@REPORT", objBEL.RequestReportType);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetInspectionCertificateBasedtoPar(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetInspectionDocumentDetailBasedtoPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@Filter", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetInspectionCertificateDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetInsepectionDocumentList_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@AppID", objBEL.IAName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetCheckListDocumentList(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetCheckListDocumentlist", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                //cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetServiceChecklists()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceChecklists_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllotetmentLetterDocument(string par, string DocumentType)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDocument_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Allotmentletterno", par);
                cmd.Parameters.AddWithValue("@DocumentType", DocumentType);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }







        public DataSet GetServiceChecklists_SP_BY_Condtion(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceChecklists_SP_BY_Condtion", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceChecklistId);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesCondition", objBEL.ServiceChecklistCondition);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetServiceChecklistsLAW_SP_BY_Condtion(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceChecklistsLAW_SP_BY_Condtion", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceChecklistId);
                

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetServiceChecklistsPIP_SP_BY_Condtion(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceChecklistsPIP_SP_BY_Condtion", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceChecklistId);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetServiceChecklists(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServiceChecklists_SP", con);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceChecklistId);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        #endregion

        #region "Delete Allottee Records"
        public Int32 DeleteBookRecord(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteBookRecords_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@BookId", objBEL.BookId);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetApplicationType(string par)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetApplicatonDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceTimeLineId", par);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateAllotmentLetterFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreAllotteeRecords1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //   cmd.Parameters.AddWithValue("@FILE_PATH", objBEL.DocumentName);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                cmd.Parameters.AddWithValue("@AllotmentLetterIssueDate", objBEL.AllotmentIssueDate);
                cmd.Parameters.AddWithValue("@leaseDeedDate", SqlDateTime.Null);
                cmd.Parameters.AddWithValue("@LeaseExecDate", SqlDateTime.Null);
                cmd.Parameters.AddWithValue("@AllotmentletterVersion", objBEL.AllotmentletterVersion);
                cmd.Parameters.AddWithValue("@UploadDocument", objBEL.UploadAllotmentLetter);
                cmd.Parameters.AddWithValue("@LeaseDeedVersion", objBEL.LeaseDeedVersion);
                cmd.Parameters.AddWithValue("@UploadLeaseDeed", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);


                //	@LeaseDeedExt varchar(50) = NULL,


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteAllotteeRecord(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteAllotteeDetails_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 DeleteServiceTimeLinesRecord(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("DeleteServiceTimeLinesRecords_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceTimeLinesRecordId", objBEL.ServiceTimeLinesID);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion

        #region "Update Allottee Records"
        public Int32 UpdateBookRecord(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateBookRecord_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@BookId", objBEL.BookId);
                cmd.Parameters.AddWithValue("@BookName", objBEL.BookName);
                cmd.Parameters.AddWithValue("@Author", objBEL.Author);
                cmd.Parameters.AddWithValue("@Publisher", objBEL.Publisher);
                cmd.Parameters.AddWithValue("@Price", objBEL.Price);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateServiceTimelinesRecord(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateServiceTimelinesRecord_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesDepartMent", objBEL.ServiceTimeLinesDepartMent);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesActivity", objBEL.ServiceTimeLinesActivity);
                cmd.Parameters.AddWithValue("@ServiceTimeLines", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesApprovingLevel", objBEL.ServiceTimeLinesApprovingLevel);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.ModifiedBy);
                cmd.Parameters.AddWithValue("@ModifiedDate", objBEL.ModifiedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateLeaseDeedFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreAllotteeRecords1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                cmd.Parameters.AddWithValue("@AllotmentLetterIssueDate", SqlDateTime.Null);
                cmd.Parameters.AddWithValue("@AllotmentLetterExt", DBNull.Value);
                cmd.Parameters.AddWithValue("@leaseDeedDate", objBEL.LeaseDeedDate);
                cmd.Parameters.AddWithValue("@LeaseExecDate", objBEL.LeaseAgrementExecDate);
                cmd.Parameters.AddWithValue("@AllotmentletterVersion", DBNull.Value);
                cmd.Parameters.AddWithValue("@UploadDocument", objBEL.UploadAllotmentLetter);
                cmd.Parameters.AddWithValue("@LeaseDeedVersion", objBEL.LeaseDeedVersion);
                cmd.Parameters.AddWithValue("@UploadLeaseDeed", objBEL.UploadLeaseDeed);
                cmd.Parameters.AddWithValue("@LeaseDeedExt", objBEL.LeaseDeedExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateInspectionFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreInspectionRecord", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                cmd.Parameters.AddWithValue("@TypeofInspection", objBEL.TypeofInspection);
                cmd.Parameters.AddWithValue("@InspectionDate", objBEL.InspectionDate);
                cmd.Parameters.AddWithValue("@InspectionReport", objBEL.InspectionLetter);
                cmd.Parameters.AddWithValue("@InspectionExt", objBEL.InsepectionfilenameExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateBuildingPlanFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreBuildingPlan", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                cmd.Parameters.AddWithValue("@DateOfBuldingPlanSubmission", objBEL.BuldingPlanSubmissionDate);
                cmd.Parameters.AddWithValue("@UploadBuildingPlanDocument", objBEL.BuildingPlanDocument);
                cmd.Parameters.AddWithValue("@BuildingPlanDocumentExt", objBEL.BuildingPlanDocumentExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateCompletionFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreCompletion", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                cmd.Parameters.AddWithValue("@DateOfRequestForCompletion", objBEL.CompletionDate);
                cmd.Parameters.AddWithValue("@DateOfReleaseForCompletion", objBEL.ReleaseofCompletionDate);
                cmd.Parameters.AddWithValue("@CompletionCertificate", objBEL.CompletionCertificate);
                cmd.Parameters.AddWithValue("@CompletionCertificateExt", objBEL.BuildingPlanDocumentExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 UpdateOccupancyFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("spStoreOccupancy", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.dbId);
                cmd.Parameters.AddWithValue("@DateOfRequestForOccupancy", objBEL.RequestofOccupancyCertificateDate);
                cmd.Parameters.AddWithValue("@DateOfReleaseForOccupancy", objBEL.ReleaseofOccupancyCertificateDate);
                cmd.Parameters.AddWithValue("@UploadOccupancyCertificate", objBEL.OccupancyCertificate);
                cmd.Parameters.AddWithValue("@OccupancyCertificateExt", objBEL.OccupancyCertificateExt);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 CheckLoginAllotte(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("ZNK_AllotteeLogin", con);               
              
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pLoginName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@pPassword", objBEL.Password);                 

                //Add the output parameter to the command object
                SqlParameter outPutParameter = new SqlParameter();
                outPutParameter.ParameterName = "@responseMessage";
                outPutParameter.SqlDbType = System.Data.SqlDbType.NVarChar;
                outPutParameter.Direction = System.Data.ParameterDirection.Output;
                outPutParameter.Size = 50;
                cmd.Parameters.Add(outPutParameter);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.Dispose();
                //Retrieve the value of the output parameter


                if (result == 0)
                {
                    objBEL.responseMessage = outPutParameter.Value.ToString();
                    return result;
                }
                else
                {
                    objBEL.responseMessage = outPutParameter.Value.ToString();
                    return 0;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 CheckLogin(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("uspAllotteeLogin", con);
                if (objBEL.Roll == "1") { cmd = new SqlCommand("sp_InternalUserLogin", con); }
                if (objBEL.Roll == "2") { cmd = new SqlCommand("uspAllotteeLogin", con); }
                if (objBEL.Roll == "3") { cmd = new SqlCommand("uspAllotteeLogin", con); }
                if (objBEL.Roll == "4") { cmd = new SqlCommand("sp_OtherDeptUserLogin", con); }
                if (objBEL.Roll == "5") { cmd = new SqlCommand("sp_lidaUserLogin", con); }
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pLoginName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@pPassword", objBEL.Password);
                cmd.Parameters.AddWithValue("@pIPAddress", objBEL.IPAddress);
                //cmd.Parameters.AddWithValue("@Idendical", objBEL.Roll);

                //Add the output parameter to the command object
                SqlParameter outPutParameter = new SqlParameter();
                outPutParameter.ParameterName = "@responseMessage";
                outPutParameter.SqlDbType = System.Data.SqlDbType.NVarChar;
                outPutParameter.Direction = System.Data.ParameterDirection.Output;
                outPutParameter.Size = 50;
                cmd.Parameters.Add(outPutParameter);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.Dispose();
                //Retrieve the value of the output parameter


                if (result == 0)
                {
                    objBEL.responseMessage = outPutParameter.Value.ToString();
                    return result;
                }
                else
                {
                    objBEL.responseMessage = outPutParameter.Value.ToString();
                    return 0;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public DataSet GetregionalNameRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionNameDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetregionalNameRecords1(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionNameDetail1", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetregionalNameRecordsAuc(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionNameDetailAuc", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet CM_GetLoginDetailCheck(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[spGetInternalLoginCheck_CM]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pLoginName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@pPassword", objBEL.Password);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 CM_UpdatePassword(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_UpdateLoginPassword_CM]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Username", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Password", objBEL.Password);




                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet GetPayHeaderRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetHeaderDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetregionalOfficeRecords(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetRegionalDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetInternalUserPersonalDetails(string strName)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetInternalUserDetail", con);
                cmd.Parameters.AddWithValue("@username", strName);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 1000;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetIndustrialAreaDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetIndustrialAreaDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@username", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion

        public Int32 SaveArchitectDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateServiceRequestsRecord_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NameofStructuralEngineer", objBEL.StructuralEngineer);
                cmd.Parameters.AddWithValue("@StructuralEngineerLicensedNo", objBEL.StructuralEngineerLicensedNo);
                cmd.Parameters.AddWithValue("@StructuralEngineerRegistratinNo", objBEL.StructuralEngineerRegistratinNo);
                cmd.Parameters.AddWithValue("@StructuralEngineerAddress", objBEL.StructuralEngineerAddress);
                cmd.Parameters.AddWithValue("@NameofArchitect", objBEL.NameofArchitect);
                cmd.Parameters.AddWithValue("@ArchitectLicenseNo", objBEL.ArchitectLicenseNo);
                cmd.Parameters.AddWithValue("@ArchitectRegistrationNo", objBEL.ArchitectRegistrationNo);
                cmd.Parameters.AddWithValue("@ArchitectAddress", objBEL.ArchitectAddress);

                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.ModifiedBy);
                cmd.Parameters.AddWithValue("@ModifiedDate", objBEL.ModifiedDate);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetAllotteesDocumentBasedtoPar(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllottementLetterBasedtoPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@Filter", par);
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@Status", objBEL.Type);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetAllotementLetterDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAllotteeDocs", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetBuildingPlanCertificateDetailBasedtoPar(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingPlanDocumentBasedtoPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@Status", objBEL.Type);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetBuildingPlanCertificateDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingPlanCertificate_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@AppID", objBEL.IAName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 SaveFARDetail(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateFARRequestsRecord_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequest);
                cmd.Parameters.AddWithValue("@Far", objBEL.Far);
                cmd.Parameters.AddWithValue("@Groundcover", objBEL.Groundcover);
                cmd.Parameters.AddWithValue("@SetBackFront", objBEL.SetBackFront);
                cmd.Parameters.AddWithValue("@SetBackRear", objBEL.SetBackRear);
                cmd.Parameters.AddWithValue("@SetBackSide1", objBEL.SetBackSide1);
                cmd.Parameters.AddWithValue("@SetBackSide2", objBEL.SetBackSide2);
                cmd.Parameters.AddWithValue("@Height", objBEL.Height);
                cmd.Parameters.AddWithValue("@Occupancy", objBEL.Occupancy);
                cmd.Parameters.AddWithValue("@NatureofOccupancy", objBEL.NatureofOccupancy);
                cmd.Parameters.AddWithValue("@Modifiedby", objBEL.ModifiedBy);



                /////////////////  Update By Mr Manish
                cmd.Parameters.AddWithValue("@ExistingBasement", objBEL.ExistingBasement);
                cmd.Parameters.AddWithValue("@ExistingGroundFloor", objBEL.ExistingGroundFloor);
                cmd.Parameters.AddWithValue("@ExistingFirstFloor", objBEL.ExistingFirstFloor);
                cmd.Parameters.AddWithValue("@ExistingSecondFloor", objBEL.ExistingSecondFloor);
                cmd.Parameters.AddWithValue("@ExistingMezzanineFloor", objBEL.ExistingMezzanineFloor);
                cmd.Parameters.AddWithValue("@ProposedBasement", objBEL.ProposedBasement);
                cmd.Parameters.AddWithValue("@ProposedGroundFloor", objBEL.ProposedGroundFloor);
                cmd.Parameters.AddWithValue("@ProposedFirstFloor", objBEL.ProposedFirstFloor);
                cmd.Parameters.AddWithValue("@ProposedSecondFloor", objBEL.ProposedSecondFloor);
                cmd.Parameters.AddWithValue("@ProposedMezzanineFloor", objBEL.ProposedMezzanineFloor);
                cmd.Parameters.AddWithValue("@Foundation", objBEL.Foundation);
                cmd.Parameters.AddWithValue("@Floors", objBEL.Floors);
                cmd.Parameters.AddWithValue("@Walls", objBEL.Walls);
                cmd.Parameters.AddWithValue("@Roofs", objBEL.Roofs);
                cmd.Parameters.AddWithValue("@NoofStories", objBEL.NoofLatrines);
                cmd.Parameters.AddWithValue("@NoofLatrines", objBEL.NoofStories);
                cmd.Parameters.AddWithValue("@PurposeofBuildingUse", objBEL.PurposeofBuildingUse);
                cmd.Parameters.AddWithValue("@PreviousConstruction", objBEL.PreviousConstruction);
                cmd.Parameters.AddWithValue("@SourceofWater", objBEL.SourceofWater);
                cmd.Parameters.AddWithValue("@CoveredArea", objBEL.CoveredArea);
                cmd.Parameters.AddWithValue("@StiltFloor", objBEL.StiltFloor);
                cmd.Parameters.AddWithValue("@Mumti", objBEL.Mumti);
                cmd.Parameters.AddWithValue("@TemporaryStructExists", objBEL.TemporaryStructExists);
                cmd.Parameters.AddWithValue("@LabourHutmentArea", objBEL.LabourHutmentArea);
                cmd.Parameters.AddWithValue("@AreaOtherUse", objBEL.AreaOtherUse);





                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        //public Int32 SaveFARDetail(belBookDetails objBEL)
        //{
        //    int result;
        //    try
        //    {
        //        SqlCommand cmd = new SqlCommand("UpdateFARRequestsRecord_SP", con);
        //        cmd.CommandType = CommandType.StoredProcedure;

        //        cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequest);
        //        cmd.Parameters.AddWithValue("@Far", objBEL.Far);
        //        cmd.Parameters.AddWithValue("@Groundcover", objBEL.Groundcover);
        //        cmd.Parameters.AddWithValue("@SetBackFront", objBEL.SetBackFront);
        //        cmd.Parameters.AddWithValue("@SetBackRear", objBEL.SetBackRear);
        //        cmd.Parameters.AddWithValue("@SetBackSide1", objBEL.SetBackSide1);
        //        cmd.Parameters.AddWithValue("@SetBackSide2", objBEL.SetBackSide2);
        //        cmd.Parameters.AddWithValue("@Height", objBEL.Height);
        //        cmd.Parameters.AddWithValue("@Occupancy", objBEL.Occupancy);
        //        cmd.Parameters.AddWithValue("@NatureofOccupancy", objBEL.NatureofOccupancy);

        //        cmd.Parameters.AddWithValue("@Modifiedby", objBEL.ModifiedBy);


        //        if (con.State == ConnectionState.Closed)
        //        {
        //            con.Open();
        //        }
        //        result = cmd.ExecuteNonQuery();
        //        cmd.Dispose();
        //        if (result > 0)
        //        {
        //            return result;
        //        }
        //        else
        //        {
        //            return 0;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        if (con.State != ConnectionState.Closed)
        //        {
        //            con.Close();
        //        }
        //    }
        //}




        public DataSet GetBuildingPlanDocumentDetailBasedtooPar(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingPlanDocumentBasedtooPar_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ID", objBEL.ID);
                cmd.Parameters.AddWithValue("@Status", objBEL.Type);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetBuildingPlanDocumentDetail(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBuildingPlanDocument_Sp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Filter", objBEL.Parameter);
                cmd.Parameters.AddWithValue("@AppID", objBEL.IAName);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetExecutiveauthority(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetExecutiveauthority", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        public DataSet GetAllotteeDueAmount(string allotmentLetterNo)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetAlloteeDuePayments", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Allotmentletterno", allotmentLetterNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetAllotteeloginDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spc_GetAllotteeloginDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeId", objBEL.Parameter);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 UpdateIsCompletedstatus(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("UpdateIsCompletedstatus_SP", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }




        public Int32 UpdatePassword(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_UpdateLoginPassword", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Username", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Password", objBEL.Password);




                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetLoginDetailCheck(belBookDetails objBEL)
        {

            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("spGetInternalLoginCheck", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pLoginName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@pPassword", objBEL.Password);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

       
        public DataSet SetApplicationRequest(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[NewApplicationRequestAllottee_sp1]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@AllotteeName", objBEL.Allotteename);
                cmd.Parameters.AddWithValue("@emailID", objBEL.Email);
                cmd.Parameters.AddWithValue("@PhoneNo", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@AllotedPloltNo", objBEL.plotSize);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@ApplicationAdress1", objBEL.ApplicationAdress1);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@AuthorisedSignatory", objBEL.AuthorisedSignatory);
                cmd.Parameters.AddWithValue("@SignatoryAddress", objBEL.SignatoryAddress);
                cmd.Parameters.AddWithValue("@SignatoryPhone", objBEL.SignatoryPhone);
                cmd.Parameters.AddWithValue("@SignatoryEmail", objBEL.SignatoryEmail);
                cmd.Parameters.AddWithValue("@CompanyName", objBEL.CompanyName);
                cmd.Parameters.AddWithValue("@FirmConstitution", objBEL.FirmConstitution);
                cmd.Parameters.AddWithValue("@PanNo", objBEL.PanNo);
                cmd.Parameters.AddWithValue("@CinNo", objBEL.CinNo);
                cmd.Parameters.AddWithValue("@ControlId", objBEL.ControlId);
                cmd.Parameters.AddWithValue("@UnitId", objBEL.UnitId);
                cmd.Parameters.AddWithValue("@ServiceId", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@status", objBEL.Status);
                cmd.Parameters.AddWithValue("@Preference1", objBEL.Preference1);
                cmd.Parameters.AddWithValue("@Preference2", objBEL.Preference2);
                cmd.Parameters.AddWithValue("@Preference3", objBEL.Preference3);
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        #region "Plot  Cancellation"
        public Int32 SavePlotNoticesDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_PlotNoticesDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@NoticeRefNo", objBEL.NoticeRefNo);
                cmd.Parameters.AddWithValue("@NoticeDate", objBEL.NoticeDate);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveClauseNoticesDetails(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_ClauseNoticesDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@Clause", objBEL.Clause);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 ClearPlotCancelNotices(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("sp_ClearPlotCancelNotices", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        #endregion

        #region "ListOfNotices"

        public DataSet ListOfPlotForNotices(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ListOfPlotsForNotices", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetExistingAllotteeAgainstPlot(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("ListOfPlotsForNotices", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.IAID);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetAllotteeAgainstPlot(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("AllotteeAgainstPlot", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetListOfNotices(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetListOfNotices", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetServicesForDropDown(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetServicesForDropDown", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 InsertNoticesServed(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertNoticesServed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@NoticeRefNo", objBEL.NoticeRefNo);
                cmd.Parameters.AddWithValue("@NoticeIssueDate", objBEL.NoticeDate);
                cmd.Parameters.AddWithValue("@NoticeDescription", objBEL.NoticeDescription);
                cmd.Parameters.AddWithValue("@NoticeContent", objBEL.NoticeContent);
                cmd.Parameters.AddWithValue("@NoticeName", objBEL.NoticeName);
                cmd.Parameters.AddWithValue("@NoticeExtn", objBEL.NoticeExtn);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 UpdateNoticServedWithFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateNoticesServedWithFile]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NoticeID", objBEL.NoticeID);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@NoticeRefNo", objBEL.NoticeRefNo);
                cmd.Parameters.AddWithValue("@NoticeIssueDate", objBEL.NoticeDate);
                cmd.Parameters.AddWithValue("@NoticeDescription", objBEL.NoticeDescription);
                cmd.Parameters.AddWithValue("@NoticeContent", objBEL.NoticeContent);
                cmd.Parameters.AddWithValue("@NoticeName", objBEL.NoticeName);
                cmd.Parameters.AddWithValue("@NoticeExtn", objBEL.NoticeExtn);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 UpdateNoticServedWithoutFile(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateNoticesServedWithoutFile]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NoticeID", objBEL.NoticeID);
                cmd.Parameters.AddWithValue("@ServiceID", objBEL.ServiceId);
                cmd.Parameters.AddWithValue("@NoticeRefNo", objBEL.NoticeRefNo);
                cmd.Parameters.AddWithValue("@NoticeIssueDate", objBEL.NoticeDate);
                cmd.Parameters.AddWithValue("@NoticeDescription", objBEL.NoticeDescription);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 DeleteNoticeServed(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_DeleteNoticesServed]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NoticeID", objBEL.NoticeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetNoticesServedDoc(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("sp_GetNoticesServedDoc", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@NoticeID", objBEL.NoticeID);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }



        #endregion


        #region "Dues Clearence"


        public Int32 InsertDuesAgainstPlot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertDuesOnPlot]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.Parameters.AddWithValue("@TowardsPremium", objBEL.TowardsPremium);
                cmd.Parameters.AddWithValue("@InterestOnPremium", objBEL.InterestOnPremium);
                cmd.Parameters.AddWithValue("@MaintenanceCharge", objBEL.MaintenanceCharge);
                cmd.Parameters.AddWithValue("@InterestOnMaintenanceCharge", objBEL.InterestOnMaintenanceCharge);
                cmd.Parameters.AddWithValue("@LeaseRent", objBEL.LeaseRent);
                cmd.Parameters.AddWithValue("@GSTOnLeaseRent", objBEL.GSTOnLeaseRent);
                cmd.Parameters.AddWithValue("@TimeExtensionFee", objBEL.TimeExtensionFee);
                cmd.Parameters.AddWithValue("@InterestOnTimeExtension", objBEL.InterestOnTimeExtension);
                cmd.Parameters.AddWithValue("@RemainingLeasePeriod", objBEL.RemainingLeasePeriod);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);




                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        public Int32 InsertPaymentAgainstPlot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_InsertPaymentsOnPlot]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.Parameters.AddWithValue("@TowardsPremium", objBEL.TowardsPremium);
                cmd.Parameters.AddWithValue("@InterestOnPremium", objBEL.InterestOnPremium);
                cmd.Parameters.AddWithValue("@MaintenanceCharge", objBEL.MaintenanceCharge);
                cmd.Parameters.AddWithValue("@InterestOnMaintenanceCharge", objBEL.InterestOnMaintenanceCharge);
                cmd.Parameters.AddWithValue("@LeaseRent", objBEL.LeaseRent);
                cmd.Parameters.AddWithValue("@GSTOnLeaseRent", objBEL.GSTOnLeaseRent);
                cmd.Parameters.AddWithValue("@TimeExtensionFee", objBEL.TimeExtensionFee);
                cmd.Parameters.AddWithValue("@InterestOnTimeExtension", objBEL.InterestOnTimeExtension);
                cmd.Parameters.AddWithValue("@RemainingLeasePeriod", objBEL.RemainingLeasePeriod);
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);




                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public DataSet GetDuesAndPayment(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetDuesAndPAyments", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAID", objBEL.IAID);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 DeletePaymentAgainstPlot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_DeletepaymentAgainstPlot]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@PaymentID", objBEL.PaymentID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 DeleteDuesAgainstPlot(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_DeleteDuesAgainstPlot]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DuesID", objBEL.DuesID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        #endregion


        #region "Allottee"

        public DataSet CheckFinalSubmission(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("CheckFinalSubmission", con);

                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetListOfVacantPlotsForSubdivisionIAWise(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfVacantPlotForSubdivision]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAIdParam);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetPlotAdjacencyDetails(belBookDetails objBEL)

        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetPloAdjacencyDetails]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAId", objBEL.IAIdParam);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetTempCheckListDocument(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetTempCheckListDocumentDetail", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                //cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@ServiceRequestNO", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@DocumentID", objBEL.DocumentID);


                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 SaveTempServiceChecklistDocument(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[SP_TempUploadChecklistfile]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceCheckListsID", objBEL.ServiceCheckListsID);
                cmd.Parameters.AddWithValue("@ServiceTimeLinesID", objBEL.ServiceTimeLinesID);
                cmd.Parameters.AddWithValue("@Allotmentletterno", objBEL.UserName);
                cmd.Parameters.AddWithValue("@Name", objBEL.filename);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.content);
                cmd.Parameters.AddWithValue("@Documents", objBEL.Uploadfile);
                cmd.Parameters.AddWithValue("@CreatedBy", objBEL.CreatedBy);
                cmd.Parameters.AddWithValue("@CreatedDate", objBEL.CreatedDate);
                cmd.Parameters.AddWithValue("@ServiceRequestNo", objBEL.ServiceRequestNO);
                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 SaveApplicantSign(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantSign]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        public Int32 MoveTemppplicationDataToMainTable(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Move_Temp_ApplicationData_To_MainTables]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Service_Request_No", objBEL.ServiceRequestNO);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }
        #endregion
        #region "SMS"
        public DataSet GetPhoneNoOfUser(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("GetPhoneNoOfUser", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet VerifyOTP(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {

                SqlCommand cmd = new SqlCommand("sp_chechOTp", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                cmd.Parameters.AddWithValue("@OTP", objBEL.OTP);
                cmd.Parameters.AddWithValue("@OTPFor", objBEL.OTPFor);

                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                //    throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 SaveOTP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveOTP]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@USERID", objBEL.UserId);
                cmd.Parameters.AddWithValue("@USerMobile", objBEL.PhoneNumber);
                cmd.Parameters.AddWithValue("@OTP", objBEL.OTP);
                cmd.Parameters.AddWithValue("@RefNO", objBEL.ReferenceNumber);
                cmd.Parameters.AddWithValue("@OTPFor", objBEL.OTPFor);





                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion
        #region "Account Clearance"
        public DataSet GetAllRegionalOffice(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("Sp_GetAllRegionalOffice", con);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public DataSet GetIAregionalOfficeWise(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("SpGetIAregionalOfficeWise", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetListOfApplicationForAccountClearance(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfApplicationForAccountClearance]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@ServiceType", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                cmd.Parameters.AddWithValue("@searchText", objBEL.searchText);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public DataSet GetListOfApplicationAccountCleared(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfApplicationWhoseAccountCleared]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@IndustrialArea", objBEL.IndustrialArea);
                cmd.Parameters.AddWithValue("@PaymentMode", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@ServiceType", objBEL.ServiceTimeLines);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDate);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDate);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }
        public Int32 UpdateApplicationAfterAccountClearence(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[UpdateAllotmentApplicationAfterAccountsClearence]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Service_Request_No", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@TransactionID", objBEL.TranID);
                cmd.Parameters.AddWithValue("@ConfirmAmount", objBEL.PayTrans_trn_amt);
                cmd.Parameters.AddWithValue("@ConfirmDate", objBEL.PayDate);



                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }



        #endregion


        #region "Demand note"

        public DataSet GetAllotteeDetailsAgainstPlot(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("AllotteeDetailsAgainstPlot", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@IAName", objBEL.IAName);
                cmd.Parameters.AddWithValue("@PlotNo", objBEL.PlotNo);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public DataSet GetBifircatedDemandDetails(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("GetBifircatedDemandDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandID", objBEL.demandID);

                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }


        public Int32 DeleteDemandNote(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[DeleteDemandNotice]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandID", objBEL.demandID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public DataSet DemandNoteEntry(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDemandNoteHeader]", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AlloteeId);
                cmd.Parameters.AddWithValue("@LetterNo", objBEL.AllotmentLetterno);
                cmd.Parameters.AddWithValue("@DueAmount", objBEL.DueAmount);
                cmd.Parameters.AddWithValue("@DemandDate", objBEL.DemandDate);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        //Date 10-04-2019 

        //public Int32 DemandNoteDetailEntry(belBookDetails objBEL)
        //{
        //    int result;
        //    try
        //    {
        //        SqlCommand cmd = new SqlCommand("[insertDemandNoteDetails]", con);
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.Parameters.AddWithValue("@DemandID", objBEL.demandID);
        //        cmd.Parameters.AddWithValue("@PaymentID", objBEL.paymentID);
        //        cmd.Parameters.AddWithValue("@Paydesc", objBEL.PayDesc);
        //        cmd.Parameters.AddWithValue("@DueAmount", objBEL.Amount);

        //        if (con.State == ConnectionState.Closed)
        //        {
        //            con.Open();
        //        }
        //        result = cmd.ExecuteNonQuery();
        //        cmd.Dispose();
        //        if (result > 0)
        //        {
        //            return result;
        //        }
        //        else
        //        {
        //            return 0;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        if (con.State != ConnectionState.Closed)
        //        {
        //            con.Close();
        //        }
        //    }
        //}


        public Int32 UploadDemandNoticeDoc(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[insertDemandNoteDocuments]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DemandID", objBEL.demandID);
                cmd.Parameters.AddWithValue("@Document", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@FileName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ContentType", objBEL.ImageContent);
                cmd.Parameters.AddWithValue("@UserName", objBEL.UserName);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        #endregion






        #region Devendra PIP_Reports DAL
        public DataSet GetListOfInvestmentIAWisePIPReports(belBookDetails objBEL)
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("[GetListOfInvestmentAllotteeWisePIPReport]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@RegionalOffice", objBEL.RegionalOffice);
                cmd.Parameters.AddWithValue("@ReportType", objBEL.PaymentMode);
                cmd.Parameters.AddWithValue("@FromDate", objBEL.FromDatetime);
                cmd.Parameters.AddWithValue("@ToDate", objBEL.ToDatetime);
                cmd.Parameters.AddWithValue("@Service", objBEL.serviceID);



                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        #endregion




        #region MASHI 

        public DataSet UpdateApplicantfIPBasicDetails(belBookDetails objBel)
        {
            BooksDetails_DAL objDal = new BooksDetails_DAL();
            try
            {
                return objDal.UpdateApplicantPIPBasicDetails(objBel);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                objDal = null;
            }
        }


        
        public DataSet GetCompanyTypeForPIPFin()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlCommand cmd = new SqlCommand("SP_CompanyNamePIP_Fin", con);
                cmd.CommandType = CommandType.StoredProcedure;
                SqlDataAdapter adp = new SqlDataAdapter(cmd);
                adp.Fill(ds);
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                ds.Dispose();
            }
            return ds;
        }

        public Int32 ClearFirmConstitutionPIPFin(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[sp_clearFirmConstitutionPIPFin]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

        public Int32 SaveShareHolderDetailsPIPFin(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_UpdateApplicantShareHoldersPIPFin]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@AllotteeID", objBEL.AllotteeID);
                cmd.Parameters.AddWithValue("@ShareholderName", objBEL.ShareHolderName);
                cmd.Parameters.AddWithValue("@Address", objBEL.ShareHolderAddress);
                cmd.Parameters.AddWithValue("@SharePer", objBEL.ShareHolderPer);
                cmd.Parameters.AddWithValue("@Phone", objBEL.ShareHolderPhone);
                cmd.Parameters.AddWithValue("@Email", objBEL.ShareHolderEmail);

                //cmd.Parameters.AddWithValue("@Dues", objBEL.ShareHolderDues);
                //cmd.Parameters.AddWithValue("@CourtCases", objBEL.ShareHolderCourtCases);


                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }


        public Int32 SaveApplicantImagefIP(belBookDetails objBEL)
        {
            int result;
            try
            {
                SqlCommand cmd = new SqlCommand("[Sp_SaveApplicantImagefIP]", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ServiceReqNo", objBEL.ServiceRequestNO);
                cmd.Parameters.AddWithValue("@ApplicantImage", objBEL.ApplicantImageByte);
                cmd.Parameters.AddWithValue("@ApplicantImageName", objBEL.ApplicantImageName);
                cmd.Parameters.AddWithValue("@ApplicantImageType", objBEL.ImageContent);

                if (con.State == ConnectionState.Closed)
                {
                    con.Open();
                }
                result = cmd.ExecuteNonQuery();
                cmd.Dispose();
                if (result > 0)
                {
                    return result;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (con.State != ConnectionState.Closed)
                {
                    con.Close();
                }
            }
        }

       








        #endregion

    }
}
